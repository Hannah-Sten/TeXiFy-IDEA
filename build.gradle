// Include the Gradle plugins which help building everything.
// Supersedes the use of 'buildscript' block and 'apply plugin:'
plugins {
    id 'org.jetbrains.intellij' version '0.4.7'
    id 'org.jetbrains.kotlin.jvm' version '1.3.21'

    // Plugin which can check for Gradle dependencies, use the help/dependencyUpdates task.
    id 'com.github.ben-manes.versions' version '0.21.0'

    // Plugin which can update Gradle dependencies, use the help/useLatestVersions task.
    id 'se.patrikerdes.use-latest-versions' version '0.2.9'

    // Used to debug in a different IDE
    id 'maven'
    id 'de.undercouch.download' version '3.4.3'
}

group 'nl.rubensten'
version '0.6.5'

repositories {
    mavenCentral()
}

sourceSets {
    // Specify source directories
    main.java.srcDirs += 'src/'
    main.java.srcDirs += 'gen/'
    main.resources.srcDirs += 'resources/'
    main.kotlin.srcDirs += 'src/'
    main.kotlin.srcDirs += 'gen/'

    // Specify test directories
    test.java.srcDirs += 'test/'
    test.kotlin.srcDirs += 'test/'
}

// Java target version
sourceCompatibility = 1.8

// Specify the right jvm target for Kotlin
compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

// Same for Kotlin tests
compileTestKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    // Local dependencies
    compile files("lib/pretty-tools-JDDE-2.1.0.jar")
    compile files("lib/JavaDDE.dll")
    compile files("lib/JavaDDEx64.dll")

    // From Kotlin documentation
    compile "org.jetbrains.kotlin:kotlin-stdlib"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    // just in case, version number specified in buildscript is used by default
    compile "org.jetbrains.kotlin:kotlin-reflect"

    // D-Bus Java bindings
    compile "com.github.hypfvieh:dbus-java:3.0.1"
    compile "org.slf4j:slf4j-simple:1.8.0-beta2"

    // Kotlin coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1"

    // Test dependencies

    // Also compile junit 4, just in case
    testCompile("junit:junit:4.12")
    testRuntime("org.junit.vintage:junit-vintage-engine:5.3.1")

    // Use junit 5 for test cases
    testCompile("org.junit.jupiter:junit-jupiter-api:5.3.1")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.3.1")

    // Enable use of the JUnitPlatform Runner within the IDE
    testCompile("org.junit.platform:junit-platform-runner:1.3.1")

    // just in case
    testCompile "org.jetbrains.kotlin:kotlin-test"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit"

}

// Special resource dependencies
processResources {
    from ('lib') {
        include 'pretty-tools-JDDE-2.1.0.jar'
        include 'JavaDDE.dll'
        include 'JavaDDEx64.dll'
    }
}

// Copy jar and dependencies in 'lib/' to a zip with the right folder structure
task zip(type: Zip) {

    into('TeXiFy-IDEA/lib') {
        from jar
        from 'lib'
    }

}

def pycharmVersion = '2019.1'

// This task is used to debug the plugin in a different IDE, in this case Pycharm
// Source: https://gist.github.com/thomas15v/716ea57261855bf61d8b6131be419c26
task setupPycharm() {
    if (!new File(".gradle/ide/pycharm-${pycharmVersion}").exists()){
        download {
            src "https://download.jetbrains.com/python/pycharm-professional-${pycharmVersion}.tar.gz"
            dest '.gradle/downloads/py.tar.gz'
        }
        copy {
            from tarTree(resources.gzip('.gradle/downloads/py.tar.gz'))
            into '.gradle/ide'
        }
    }
}

// In order to debug with PyCharm, just add the -PusePycharm=true argument to your runIde run configuration.
runIde {
    if (project.hasProperty('usePycharm') && usePycharm == 'true') {
        dependsOn(setupPycharm)
    }
}

intellij {
    if (project.hasProperty('usePycharm') && usePycharm == 'true') {
        alternativeIdePath ".gradle/ide/pycharm-${pycharmVersion}"
    }

    version '2019.1'
}

test {
    // Enable JUnit 5 (Gradle 4.6+).
    useJUnitPlatform()
    
    // Always run tests, even when nothing changed
//    dependsOn 'cleanTest'
    // Show test results
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Set the attributes in the idea-version tag, otherwise they will get overwritten with a too narrow compatibility range.
patchPluginXml {
    sinceBuild '173.*'
    untilBuild ''
}

// Allow publishing to the Jetbrains repo via a Gradle task
// This requires to put your Jetbrains username and password, see http://www.jetbrains.org/intellij/sdk/docs/tutorials/build_system/deployment.html for more details
// You should provide them either via environment variables (ORG_GRADLE_PROJECT_intellijPublishUsername and similar for password) or Gradle task parameters (-Dorg.gradle.project.intellijPublishUsername=myusername and password)
publishPlugin {

    username intellijPublishUsername
    password intellijPublishPassword

    // Specify channel as per the tutorial.
    // More documentation: https://github.com/JetBrains/gradle-intellij-plugin/blob/master/README.md#publishing-dsl
    channels 'alpha'
}
