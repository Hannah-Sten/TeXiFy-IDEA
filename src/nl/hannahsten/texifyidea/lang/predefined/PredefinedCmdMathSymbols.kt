package nl.hannahsten.texifyidea.lang.predefined

import nl.hannahsten.texifyidea.lang.LatexContexts
import nl.hannahsten.texifyidea.lang.PredefinedCommandSet

object PredefinedCmdMathSymbols : PredefinedCommandSet() {

    val lowercaseGreek = mathCommands {

        symbol("alpha", "α", "Greek letter alpha")
        symbol("beta", "β", "Greek letter beta")
        symbol("gamma", "γ", "Greek letter gamma")
        symbol("delta", "δ", "Greek letter delta")
        symbol("epsilon", "ϵ", "Greek letter epsilon")
        symbol("varepsilon", "ε", "Greek letter varepsilon (variant)")
        symbol("zeta", "ζ", "Greek letter zeta")
        symbol("eta", "η", "Greek letter eta")
        symbol("theta", "θ", "Greek letter theta")
        symbol("vartheta", "ϑ", "Greek letter vartheta (variant)")
        symbol("iota", "ι", "Greek letter iota")
        symbol("kappa", "κ", "Greek letter kappa")
        symbol("lambda", "λ", "Greek letter lambda")
        symbol("mu", "μ", "Greek letter mu")
        symbol("nu", "ν", "Greek letter nu")
        symbol("xi", "ξ", "Greek letter xi")
        symbol("pi", "π", "Greek letter pi")
        symbol("varpi", "ϖ", "Greek letter varpi (variant)")
        symbol("rho", "ρ", "Greek letter rho")
        symbol("varrho", "ϱ", "Greek letter varrho (variant)")
        symbol("sigma", "σ", "Greek letter sigma")
        symbol("varsigma", "ς", "Greek letter varsigma (final sigma)")
        symbol("tau", "τ", "Greek letter tau")
        symbol("upsilon", "υ", "Greek letter upsilon")
        symbol("phi", "ϕ", "Greek letter phi (straight)")
        symbol("varphi", "φ", "Greek letter varphi (curly variant)")
        symbol("chi", "χ", "Greek letter chi")
        symbol("psi", "ψ", "Greek letter psi")
        symbol("omega", "ω", "Greek letter omega")
    }

    val uppercaseGreek = mathCommands {

        symbol("Gamma", "Γ", "Capital greek letter Gamma")
        symbol("Delta", "Δ", "Capital greek letter Delta")
        symbol("Theta", "Θ", "Capital greek letter Theta")
        symbol("Lambda", "Λ", "Capital greek letter Lambda")
        symbol("Xi", "Ξ", "Capital greek letter Xi")
        symbol("Pi", "Π", "Capital greek letter Pi")
        symbol("Sigma", "Σ", "Capital greek letter Sigma")
        symbol("Upsilon", "ϒ", "Capital greek letter Upsilon")
        symbol("Phi", "Φ", "Capital greek letter Phi")
        symbol("Psi", "Ψ", "Capital greek letter Psi")
        symbol("Omega", "Ω", "Capital greek letter Omega")
    }

    val variantGreek = mathCommands {

        packageOf("amsmath")

        // amsmath variants of uppercase Greek letters
        symbol("varGamma", "Γ", "Capital greek letter varGamma (amsmath variant)")
        symbol("varDelta", "Δ", "Capital greek letter varDelta (amsmath variant)")
        symbol("varTheta", "Θ", "Capital greek letter varTheta (amsmath variant)")
        symbol("varLambda", "Λ", "Capital greek letter varLambda (amsmath variant)")
        symbol("varXi", "Ξ", "Capital greek letter varXi (amsmath variant)")
        symbol("varPi", "Π", "Capital greek letter varPi (amsmath variant)")
        symbol("varSigma", "Σ", "Capital greek letter varSigma (amsmath variant)")
        symbol("varUpsilon", "ϒ", "Capital greek letter varUpsilon (amsmath variant)")
        symbol("varPhi", "Φ", "Capital greek letter varPhi (amsmath variant)")
        symbol("varPsi", "Ψ", "Capital greek letter varPsi (amsmath variant)")
        symbol("varOmega", "Ω", "Capital greek letter varOmega (amsmath variant)")
    }

    val arrows = mathCommands {

        // Default arrows
        symbol("leftarrow", "←", "Left arrow")
        symbol("Leftarrow", "⇐", "Left double arrow")
        symbol("rightarrow", "→", "Right arrow")
        symbol("Rightarrow", "⇒", "Right double arrow")
        symbol("to", "→", "Right arrow (alias)")
        symbol("gets", "←", "Left arrow (alias)")
        symbol("leftrightarrow", "↔", "Left and right arrow")
        symbol("Leftrightarrow", "⇔", "Left and right double arrow")
        symbol("longleftarrow", "⟵", "Long left arrow")
        symbol("Longleftarrow", "⟸", "Long left double arrow")
        symbol("longrightarrow", "⟶", "Long right arrow")
        symbol("Longrightarrow", "⟹", "Long right double arrow")
        symbol("longleftrightarrow", "⟷", "Long left and right arrow")
        symbol("Longleftrightarrow", "⟺", "Long left and right double arrow")
        symbol("uparrow", "↑", "Up arrow")
        symbol("Uparrow", "⇑", "Up double arrow")
        symbol("downarrow", "↓", "Down arrow")
        symbol("Downarrow", "⇓", "Down double arrow")
        symbol("updownarrow", "↕", "Up and down arrow")
        symbol("Updownarrow", "⇕", "Up and down double arrow")
        symbol("mapsto", "↦", "Maps to")
        symbol("hookleftarrow", "↩", "Left arrow with hook")
        symbol("leftharpoonup", "↼", "Left harpoon up")
        symbol("leftharpoondown", "↽", "Left harpoon down")
        symbol("rightleftharpoons", "⇌", "Right and left harpoons")
        symbol("longmapsto", "⟼", "Long maps to")
        symbol("hookrightarrow", "↪", "Right arrow with hook")
        symbol("rightharpoonup", "⇀", "Right harpoon up")
        symbol("rightharpoondown", "⇁", "Right harpoon down")
        symbol("nearrow", "↗", "North east arrow")
        symbol("searrow", "↘", "South east arrow")
        symbol("swarrow", "↙", "South west arrow")
        symbol("nwarrow", "↖", "North west arrow")

        // amssymb arrows
        packageOf("amssymb")
        symbol("nrightarrow", "↛", "Not right arrow")
        symbol("dashrightarrow", "⤍", "Dashed right arrow")
        symbol("leftrightarrows", "⇆", "Left and right arrow pair")
        symbol("leftarrowtail", "↢", "Left arrow with tail")
        symbol("curvearrowleft", "↶", "Anti clockwise semicircle arrow top")
        symbol("upuparrows", "⇈", "Up arrow pair")
        symbol("multimap", "⊸", "Multimap")
        symbol("rightleftarrows", "⇄", "Right and left arrow pair")
        symbol("twoheadrightarrow", "↠", "Two headed right arrow")
        symbol("Rsh", "↱", "Up arrow with right tip")
        symbol("downharpoonright", "⇂", "Down harpoon right")
        symbol("dashleftarrow", "⇠", "Dashed left arrow")
        symbol("Lleftarrow", "⇚", "Left triple arrow")
        symbol("looparrowleft", "↫", "Left arrow with loop")
        symbol("circlearrowleft", "↺", "Anti clockwise circle arrow")
        symbol("upharpoonleft", "↿", "Up harpoon left")
        symbol("leftrightsquigarrow", "↭", "Left and right wave arrow")
        symbol("rightrightarrows", "⇉", "Right arrow pair")
        symbol("rightarrowtail", "↣", "Right arrow with tail")
        symbol("curvearrowright", "↷", "Clockwise semicircle arrow top")
        symbol("downdownarrows", "⇊", "Down arrow pair")
        symbol("rightsquigarrow", "⇝", "Right wave arrow")
        symbol("leftleftarrows", "⇇", "Left arrow pair")
        symbol("twoheadleftarrow", "↞", "Two headed left arrow")
        symbol("leftrightharpoons", "↰", "Left and right harpoons")
        symbol("Lsh", "↰", "Up arrow with left tip")
        symbol("downharpoonleft", "⇃", "Down harpoon left")
        symbol("looparrowright", "↬", "Right arrow with loop")
        symbol("circlearrowright", "↻", "Clockwise circle arrow")
        symbol("upharpoonright", "↾", "Up harpoon right")
        symbol("nleftarrow", "↚", "Not left arrow")
        symbol("nLeftarrow", "⇍", "Not left double arrow")
        symbol("nRightarrow", "⇏", "Not right double arrow")
        symbol("nleftrightarrow", "↮", "Not left and right arrow")
        symbol("nLeftrightarrow", "⇎", "Not left and right double arrow")

        // latexsymb arrows
        packageOf("latexsymb")
        symbol("leadsto", "⤳", "Leadsto")

        // stmaryrd arrows
        packageOf("stmaryrd")
        symbol("Longmapsfrom", "⟽", "Long maps from double arrow")
        symbol("Longmapsto", "⟾", "Long maps to double arrow")
        symbol("Mapsfrom", "⤆", "Maps from double arrow")
        symbol("Mapsto", "⤇", "Maps to double arrow")
        symbol("leftarrowtriangle", "⇽", "Left open headed arrow")
        symbol("rightarrowtriangle", "⇾", "Right open headed arrow")
        symbol("leftrightarroweq", null, "Left and right arrow equals")
        symbol("leftrightarrowtriangle", "⇿", "Left and right open headed arrow")
        symbol("lightning", "☇", "Lightning")
        symbol("longmapsfrom", "⟻", "Long maps from")
        symbol("mapsfrom", "↤", "Maps from")
        symbol("nnearrow", "↗", "North north east arrow")
        symbol("nnwarrow", "↖", "North north west arrow")
        symbol("ssearrow", "↘", "South south east arrow")
        symbol("sswarrow", "↙", "South south west arrow")
        symbol("shortleftarrow", "←", "Short left arrow")
        symbol("shortuparrow", "↑", "Short up arrow")
        symbol("shortrightarrow", "→", "Short right arrow")
        symbol("shortdownarrow", "↓", "Short down arrow")
    }

    val defaultMathSymbols = mathCommands {
        underContexts(LatexContexts.Math, LatexContexts.Text) {
            // they can also be used in non-math contexts
            symbol("vdots", "⋮", "Vertical dots")
            symbol("ldots", "…", "Low dots")
        }

        symbol("aleph", "ℵ", "Aleph symbol") // Added display as it's a symbol
        symbol("amalg", "⨿", "Amalgamation symbol")
        symbol("asymp", "≍", "Asymptotically equivalent")
        symbol("backslash", "\\", "Backslash")
        symbol("bigcap", "⋂", "N-ary intersection")
        symbol("bigcirc", "○", "Big circle")
        symbol("bigcup", "⋃", "N-ary union")
        symbol("bigodot", "⨀", "N-ary circled dot")
        symbol("bigoplus", "⨁", "N-ary circled plus")
        symbol("bigotimes", "⨂", "N-ary circled times")
        symbol("bigsqcup", "⨆", "N-ary square union")
        symbol("bigtriangledown", "▽", "Big triangle down")
        symbol("bigtriangleup", "∆", "Big triangle up")
        symbol("biguplus", "⨄", "N-ary union with plus")
        symbol("bigvee", "⋁", "Big vee")
        symbol("bigwedge", "⋀", "Big wedge")
        symbol("bot", "⟂", "Bottom symbol")
        symbol("cdot", "·", "Center dot")
        symbol("cdotp", "·", "Center dot punctuation")
        symbol("cdots", "⋯", "Center dots")
        symbol("clubsuit", "♣", "Club suit")
        symbol("colon", ":", "Colon")
        symbol("dagger", "†", "Dagger")
        symbol("dashv", "⊣", "Left tack")
        symbol("ddagger", "‡", "Double dagger")
        symbol("ddots", "⋱", "Down right diagonal dots")
        symbol("div", "÷", "Division sign")
        symbol("dots", "⋯", "Dots")
        symbol("ell", "ℓ", "Script small l")
        symbol("flat", "♭", "Flat sign")
        symbol("hbar", "ℏ", "H bar")
        symbol("heartsuit", "♡", "Heart suit")
        symbol("Im", "ℑ", "Imaginary part")
        symbol("imath", "ı", "Dotless i")
        symbol("jmath", "ȷ", "Dotless j")

        symbol("natural", "♮", "Natural sign")
        symbol("neg", "¬", "Negation")
        symbol("prime", "′", "Prime")
        symbol("Re", "ℜ", "Real part")
        symbol("sharp", "♯", "Sharp sign")
        symbol("spadesuit", "♠", "Spade suit")
        symbol("surd", "√", "Square root surd")
        symbol("top", "⊤", "Top symbol")
        symbol("triangle", "△", "Triangle up")
        symbol("vee", "⋁", "Vee")
        symbol("wedge", "⋀", "Wedge")
        symbol("wp", "℘", "Script capital P")
        symbol("arrowvert", "|", "Vertical arrow")
        symbol("Arrowvert", "‖", "Double vertical arrow")
        symbol("bracevert", null, "Brace vertical symbol")
        symbol("Capital_Arrowvert", "‖", "Capital double vertical arrow")
        symbol("diamond", "◇", "Diamond symbol")
        symbol("diamondsuit", "♢", "Diamond suit")
        symbol("ldotp", ".", "Low dot punctuation")
        symbol("mathellipsis", "…", "Math ellipsis")
    }

    val amsmathMathSymbols = mathCommands {

        packageOf("amsmath")

        symbol("backprime", "‵", "Reversed prime")
    }

    val amssymbMathSymbols = mathCommands {

        packageOf("amssymb")

        symbol("bigstar", "★", "Big star")
        symbol("blacksquare", "⬛", "Black square")
        symbol("blacklozenge", "⧫", "Black lozenge")
        symbol("blacktriangle", "▴", "Black triangle")
        symbol("blacktriangledown", "▾", "Black triangle down")
        symbol("Box", "☐", "Box")
        symbol("Diamond", "◇", "Diamond")
        symbol("Game", "⅁", "Mirrored G") // Added typical display
        symbol("circledR", "®", "Circled R")
        symbol("circledS", "Ⓢ", "Circled S")
        symbol("diagdown", "∖", "Diagonal down")
        symbol("diagup", "∕", "Diagonal up")
        symbol("divideontimes", "⋇", "Divide on times")
        symbol("eth", "ð", "Eth")
        symbol("hslash", "ħ", "H slash")
        symbol("llcorner", "⌞", "Lower left corner")
        symbol("lrcorner", "⌟", "Lower right corner")
        symbol("lozenge", "⬨", "Lozenge")
        symbol("mho", "℧", "Reversed ohm")
        symbol("square", "◻", "Square")
        symbol("triangledown", "▽", "Triangle down")
        symbol("ulcorner", "⌜", "Upper left corner")
        symbol("urcorner", "⌝", "Upper right corner")
        symbol("vartriangle", "△", "Variant triangle")
        symbol("Bbbk", "\uD835\uDD5C", "Blackboard bold k")
        symbol("Finv", "Ⅎ", "Inverse F")

        symbol("mathgroup", null, "Math group")
        symbol("mathsterling", null, "Math sterling symbol")
        symbol("mathunderscore", null, "Math underscore")
    }

    val wasysymMathSymbols = mathCommands {

        packageOf("wasysym")

        symbol("logof", "⍟", "Log of")
        symbol("ocircle", "◯", "O circle")
        symbol("wasypropto", "∝", "Proportional")
        symbol("invneg", "⌐", "Inverted not sign") // Added typical display
    }

    val mathTextOperators = mathCommands {
        packageOf("amsopn")
        // Text-based operators (no arg, display as command name if applicable)
        symbol("arccos", "arccos", "Inverse cosine")
        symbol("arcsin", "arcsin", "Inverse sine")
        symbol("arctan", "arctan", "Inverse tangent")
        symbol("arg", "arg", "Argument")
        symbol("bmod", "bmod", "Binary modulus")
        symbol("cos", "cos", "Cosine")
        symbol("cosh", "cosh", "Hyperbolic cosine")
        symbol("cot", "cot", "Cotangent")
        symbol("coth", "coth", "Hyperbolic cotangent")
        symbol("csc", "csc", "Cosecant")
        symbol("deg", "deg", "Degrees")
        symbol("det", "det", "Determinant")
        symbol("dim", "dim", "Dimension")
        symbol("exp", "exp", "Exponential")
        symbol("gcd", "gcd", "Greatest common divisor")
        symbol("hom", "hom", "Homomorphism")
        symbol("inf", "inf", "Infimum")
        symbol("ker", "ker", "Kernel")
        symbol("lg", "lg", "Base 2 logarithm")
        symbol("lim", "lim", "Limit")
        symbol("liminf", "liminf", "Limit inferior")
        symbol("limsup", "limsup", "Limit superior")
        symbol("ln", "ln", "Natural logarithm")
        symbol("log", "log", "Logarithm")
        symbol("max", "max", "Maximum")
        symbol("min", "min", "Minimum")
        symbol("pmod", "pmod", "Parenthesized modulus")
        symbol("Pr", "Pr", "Probability")
        symbol("sec", "sec", "Secant")
        symbol("sin", "sin", "Sine")
        symbol("sinh", "sinh", "Hyperbolic sine")
        symbol("sup", "sup", "Supremum")
        symbol("tan", "tan", "Tangent")
        symbol("tanh", "tanh", "Hyperbolic tangent")

        symbol("projlim", description = "Projective limit")
        symbol("varinjlim", description = "Variant direct limit")
        symbol("varliminf", description = "Variant limit inferior")
        symbol("varlimsup", description = "Variant limit superior")
        symbol("varprojlim", description = "Variant inverse limit")
    }

    val defaultOperatorSymbols = mathCommands {

        symbol("forall", "∀", "Universal quantifier")
        symbol("partial", "∂", "Partial derivative")
        symbol("exists", "∃", "Existential quantifier")
        symbol("emptyset", "∅", "Empty set")
        symbol("nabla", "∇", "Nabla operator")
        symbol("in", "∈", "Element of")
        symbol("notin", "∉", "Not an element of")
        symbol("ni", "∋", "Contains as member")
        symbol("prod", "∏", "N-ary product")
        symbol("coprod", "∐", "N-ary coproduct")
        symbol("sum", "∑", "N-ary summation")
        symbol("mp", "∓", "Minus plus")
        symbol("pm", "±", "Plus minus")
        symbol("setminus", "∖", "Set minus")
        symbol("ast", "∗", "Asterisk operator")
        symbol("star", "⋆", "Star operator")
        symbol("circ", "∘", "Composition operator")
        symbol("bullet", "∙", "Bullet operator")
        symbol("propto", "∝", "Proportional to")
        symbol("infty", "∞", "Infinity")
        symbol("angle", "∠", "Angle")
        symbol("mid", "∣", "Divides")
        symbol("parallel", "∥", "Parallel")
        symbol("shortparallel", "∥", "Short parallel")
        symbol("land", "∧", "Logical and")
        symbol("lor", "∨", "Logical or")
        symbol("cap", "∩", "Intersection")
        symbol("cup", "∪", "Union")
        symbol("int", "∫", "Integral")
        symbol("idotsint", "∫⋯∫", "Multiple integral with dots")
        symbol("oint", "∮", "Contour integral")
        symbol("sim", "∼", "Similarity")
        symbol("wr", "≀", "Wreath product")
        symbol("approx", "≈", "Approximately equal")
        symbol("neq", "≠", "Not equal")
        symbol("equiv", "≡", "Equivalent")
        symbol("leq", "≤", "Less than or equal")
        symbol("geq", "≥", "Greater than or equal")
        symbol("subset", "⊂", "Subset")
        symbol("supset", "⊃", "Superset")
        symbol("subseteq", "⊆", "Subset or equal")
        symbol("supseteq", "⊇", "Superset or equal")
        symbol("sqcap", "⊓", "Square intersection")
        symbol("sqcup", "⊔", "Square union")
        symbol("oplus", "⊕", "Circled plus")
        symbol("ominus", "⊖", "Circled minus")
        symbol("otimes", "⊗", "Circled times")
        symbol("oslash", "⊘", "Circled slash")
        symbol("odot", "⊙", "Circled dot")
        symbol("bowtie", "⋈", "Bowtie")
        symbol("times", "×", "Multiplication")
        symbol("uplus", "⊎", "Multiset union")
        symbol("simeq", "≃", "Similar or equal")
        symbol("prec", "≺", "Precedes")
        symbol("succ", "≻", "Succeeds")
        symbol("perp", "⟂", "Perpendicular")
        symbol("vdash", "⊢", "Right tack")
        symbol("models", "⊧", "Models")

        packageOf("amssymb")
        symbol("nexists", "∄", "Non-existence quantifier")
        symbol("varnothing", "∅", "Alternative empty set")
        symbol("complement", "∁", "Set complement")
        symbol("smallsetminus", "∖", "Small set minus")
        symbol("dotplus", "∔", "Dot plus")
        symbol("varpropto", "∝", "Variant proportional to")
        symbol("measuredangle", "∡", "Measured angle")
        symbol("sphericalangle", "∢", "Spherical angle")
        symbol("shortmid", "∣", "Short divides")
        symbol("nshortmid", null, "Not short divides")
        symbol("nparallel", "∦", "Not parallel")
        symbol("nshortparallel", "∦", "Not short parallel")
        symbol("Cup", "⋓", "Double union")
        symbol("Cap", "⋒", "Double intersection")
        symbol("therefore", "∴", "Therefore")
        symbol("because", "∵", "Because")
        symbol("lneq", "⪇", "Less than, not equal")
        symbol("leqq", "≦", "Less than or equal (variant)")
        symbol("gneq", "⪈", "Greater than, not equal")
        symbol("geqq", "≧", "Greater than or equal (variant)")
        symbol("nless", "≮", "Not less than")
        symbol("ngtr", "≯", "Not greater than")
        symbol("nleq", "≰", "Not less than or equal")
        symbol("nleqq", "≦\u200D\u0338", "Not less than or equal (variant)")
        symbol("ngeq", "≱", "Not greater than or equal")
        symbol("ngeqq", "≧\u200D\u0338", "Not greater than or equal (variant)")
        symbol("ll", "≪", "Much less than")
        symbol("lll", "⋘", "Very much less than")
        symbol("lneqq", "≨", "Less than, not equivalent")
        symbol("gneqq", "≩", "Greater than, not equivalent")
        symbol("gg", "≫", "Much greater than")
        symbol("ggg", "⋙", "Very much greater than")
        symbol("subseteqq", "⊆", "Subset or equal (variant)")
        symbol("supseteqq", "⊇", "Superset or equal (variant)")
        symbol("nsubseteq", "⊈", "Not subset or equal")
        symbol("nsubseteqq", "⊈", "Not subset or equal (variant)")
        symbol("nsupseteq", "⊉", "Not superset or equal")
        symbol("nsupseteqq", "⊉", "Not superset or equal (variant)")
        symbol("sqsubset", "⊏", "Square subset")
        symbol("sqsupset", "⊐", "Square superset")
        symbol("sqsubseteq", "⊑", "Square subset or equal")
        symbol("sqsupseteq", "⊒", "Square superset or equal")
        symbol("boxplus", "⊞", "Boxed plus")
        symbol("boxminus", "⊟", "Boxed minus")
        symbol("boxtimes", "⊠", "Boxed times")
        symbol("boxdot", "⊡", "Boxed dot")
        symbol("Join", "⨝", "Join operator")
        symbol("triangleright", "▷", "Right triangle")
        symbol("triangleleft", "◁", "Left triangle")
        symbol("lhd", "◁", "Left half triangle")
        symbol("rhd", "▷", "Right half triangle")
        symbol("unlhd", "⊴", "Unnormalized left half triangle")
        symbol("unrhd", "⊵", "Unnormalized right half triangle")
        symbol("tranglelefteq", "⊴", "Triangle left or equal")
        symbol("trianglerighteq", "⊵", "Triangle right or equal")
        symbol("ltimes", "⋉", "Left times")
        symbol("rtimes", "⋊", "Right times")
        symbol("leftthreetimes", "⋋", "Left three times")
        symbol("rightthreetimes", "⋌", "Right three times")
        symbol("circledcirc", "⊚", "Circled circle")
        symbol("circleddash", "⊝", "Circled dash")
        symbol("circledast", "⊛", "Circled asterisk")
        symbol("barwedge", "⊼", "Barred wedge")
        symbol("veebar", "⊻", "Barred vee")
        symbol("doublebarwedge", "⌆", "Double barred wedge")
        symbol("curlywedge", "⋏", "Curly wedge")
        symbol("curlyvee", "⋎", "Curly vee")
        symbol("intercal", "⊺", "Intercalate")
        symbol("pitchfork", "⋔", "Pitchfork")
        symbol("nsim", null, "Not similar")
        symbol("backsimeq", "⋍", "Backwards similar or equal")
        symbol("approxeq", "≊", "Approximately equal (variant)")
        symbol("cong", "≅", "Congruent")
        symbol("ncong", "≇", "Not congruent")
        symbol("smile", "⌣", "Smile relation")
        symbol("frown", "⌢", "Frown relation")
        symbol("smallsmile", "⌣", "Small smile relation")
        symbol("smallfrown", "⌢", "Small frown relation")
        symbol("between", "≬", "Between relation")
        symbol("nprec", "⊀", "Not precedes")
        symbol("nsucc", "⊁", "Not succeeds")
        symbol("preceq", "⪯", "Precedes or equal")
        symbol("succeq", "⪰", "Succeeds or equal")
        symbol("npreceq", "⋠", "Not precedes or equal")
        symbol("nsucceq", "⋡", "Not succeeds or equal")
        symbol("preccurlyeq", "≼", "Precedes or curly equal")
        symbol("succcurlyeq", "≽", "Succeeds or curly equal")
        symbol("curlyeqprec", "⋞", "Curly equal precedes")
        symbol("curlyeqsucc", "⋟", "Curly equal succeeds")
        symbol("precsim", "≾", "Precedes or similar")
        symbol("succsim", "≿", "Succeeds or similar")
        symbol("precnsim", "⋨", "Not precedes or similar")
        symbol("succnsim", "⋩", "Not succeeds or similar")
        symbol("precapprox", "⪷", "Precedes or approximate")
        symbol("succapprox", "⪸", "Succeeds or approximate")
        symbol("precnapprox", "⪹", "Not precedes or approximate")
        symbol("succnapprox", "⪺", "Not succeeds or approximate")
        symbol("nvdash", "⊬", "Not right tack")
        symbol("Vdash", "⊩", "Forces")
        symbol("Vvdash", "⊪", "Triple right tack")
        symbol("vDash", "⊨", "Vertical double dash right")
        symbol("nvDash", "⊭", "Not vertical double dash right")
        symbol("nVDash", "⊯", "Not double vertical double dash right")
        symbol("nmid", "∤", "Not divides")
        symbol("lessdot", "⋖", "Less than with dot")
        symbol("gtrdot", "⋗", "Greater than with dot")
        symbol("lvertneqq", null, "Less than, not equal (vertical)")
        symbol("gvertneqq", null, "Greater than, not equal (vertical)")
        symbol("leqslant", "⩽", "Less than or equal slant")
        symbol("geqslant", "⩾", "Greater than or equal slant")
        symbol("nleqslant", null, "Not less than or equal slant")
        symbol("ngeqslant", null, "Not greater than or equal slant")
        symbol("eqslantless", "⪕", "Equal or slant less")
        symbol("eqslantgtr", "⪖", "Equal or slant greater")
        symbol("lessgtr", "≶", "Less than or greater than")
        symbol("gtrless", "≷", "Greater than or less than")
        symbol("lesseqgtr", "⋚", "Less than or equal or greater than")
        symbol("gtreqless", "⋛", "Greater than or equal or less than")
        symbol("lesseqqgtr", "⪋", "Less than or equal or greater than (variant)")
        symbol("gtreqqless", "⪌", "Greater than or equal or less than (variant)")
        symbol("lesssim", "≲", "Less than or similar")
        symbol("gtrsim", "≳", "Greater than or similar")
        symbol("lnsim", "⋦", "Not less than or similar")
        symbol("gnsim", "⋧", "Not greater than or similar")
        symbol("lessapprox", "⪅", "Less than or approximate")
        symbol("gtrapprox", "⪆", "Greater than or approximate")
        symbol("lnapprox", "⪉", "Not less than or approximate")
        symbol("gnapprox", "⪊", "Not greater than or approximate")
        symbol("vartriangleright", "⊳", "Variant right triangle")
        symbol("vartriangleleft", "⊲", "Variant left triangle")
        symbol("ntriangleleft", "⋪", "Not left triangle")
        symbol("ntriangleright", "⋫", "Not right triangle")
        symbol("trianglelefteq", "⊴", "Left triangle or equal")
        symbol("trianglerighteq", "⊵", "Right triangle or equal")
        symbol("ntrianglelefteq", "⋬", "Not left triangle or equal")
        symbol("ntrianglerighteq", "⋭", "Not right triangle or equal")
        symbol("blacktriangleleft", "◂", "Black left triangle")
        symbol("blacktriangleright", "▸", "Black right triangle")
        symbol("subsetneq", "⊊", "Subset, not equal")
        symbol("supsetneq", "⊋", "Superset, not equal")
        symbol("varsubsetneq", null, "Variant subset, not equal")
        symbol("varsupsetneq", null, "Variant superset, not equal")
        symbol("subsetneqq", "⫋", "Subset, not equivalent")
        symbol("supsetneqq", "⫌", "Superset, not equivalent")
        symbol("backepsilon", "϶", "Reversed epsilon")
        symbol("Subset", "⋐", "Double subset")
        symbol("Supset", "⋑", "Double superset")
        symbol("circeq", "≗", "Circle equal")
        symbol("triangleq", "≜", "Triangle equal")
        symbol("eqcirc", null, "Equal with circle")
        symbol("bumpeq", null, "Bump equal")
        symbol("Bumpeq", null, "Double bump equal")
        symbol("doteq", "≐", "Dot equal")
        symbol("doteqdot", "≑", "Dot equal dot")
        symbol("risingdotseq", "≓", "Rising dots equal")
        symbol("fallingdotseq", "≒", "Falling dots equal")

        packageOf("amsmath")
        symbol("iint", "∬", "Double integral")
        symbol("iiint", "∭", "Triple integral")
        symbol("iiiint", "⨌", "Quadruple integral")

        packageOf("stmaryrd")
        symbol("trianglelefteqslant", null, "Left triangle or equal slant")
        symbol("trianglerighteqslant", null, "Right triangle or equal slant")
        symbol("ntrianglelefteqslant", null, "Not left triangle or equal slant")
        symbol("ntrianglerighteqslant", null, "Not right triangle or equal slant")
        symbol("subsetplus", null, "Subset with plus")
        symbol("subsetpluseq", null, "Subset with plus or equal")
        symbol("supsetplus", null, "Superset with plus")
        symbol("supsetpluseq", null, "Superset with plus or equal")
        symbol("inplus", null, "Element of with plus")
        symbol("niplus", null, "Contains with plus")
    }

    val mathToolsColoneq = mathCommands {
        packageOf("mathtools")
        symbol("coloneqq", ":=")
        symbol("eqqcolon", "=:")
        symbol("coloneq", ":–")
        symbol("eqcolon", "–:")
        symbol("colonapprox", ":≈")
        symbol("colonsim", ":∼")
        symbol("dblcolon", "::")
        symbol("Coloneqq", "::=")
        symbol("Eqqcolon", "=::")
        symbol("Coloneq", "::–")
        symbol("Eqcolon", "–::")
        symbol("Colonapprox", "::≈")
        symbol("Colonsim", "::∼")
    }

//    val delimiters = mathCommands {
    // see PredefinedCmdPairedDelimiters
//    }

    val uncategorizedStmaryrdSymbols = mathCommands {
        packageOf("stmaryrd")
        symbol("Yleft", null)
        symbol("Yup", null)
        symbol("Yright", null)
        symbol("Ydown", null)
        symbol("binampersand", "&")
        symbol("bindnasrepma", null)
        symbol("baro", "⏀")
        symbol("boxbar", null)
        symbol("boxcircle", null)
        symbol("boxbox", null)
        symbol("boxdot", null)
        symbol("boxast", null)
        symbol("boxbslash", null)
        symbol("boxempty", "◻")
        symbol("boxslash", null)
        symbol("bigbox", null)
        symbol("varcurlyvee", null)
        symbol("bigcurlyvee", null)
        symbol("varcurlywedge", null)
        symbol("bigcurlywedge", null)
        symbol("curlyveedownarrow", null)
        symbol("curlyveeuparrow", null)
        symbol("curlywedgedownarrow", null)
        symbol("curlywedgeuparrow", null)
        symbol("bbslash", "⑊")
        symbol("sslash", "⃫")
        symbol("fatbslash", null)
        symbol("fatslash", null)
        symbol("fatsemi", null)
        symbol("bigparallel", "∥")
        symbol("interleave", "⫴")
        symbol("biginterleave", "⫴")
        symbol("talloblong", "▯")
        symbol("leftslice", null)
        symbol("rightslice", null)
        symbol("merge", null)
        symbol("moo", null)
        symbol("nplus", null)
        symbol("bignplus", null)
        symbol("minuso", "⦵")
        symbol("obar", "⊖")
        symbol("oblong", "▯")
        symbol("obslash", "⃠")
        symbol("ogreaterthan", "⧁")
        symbol("olessthan", "⧀")
        symbol("ovee", null)
        symbol("owedge", null)
        symbol("varbigcirc", "◯")
        symbol("varoast", "⊛")
        symbol("varobar", "⦶")
        symbol("varobslash", "⦸")
        symbol("varocircle", "⦾")
        symbol("varodot", "⨀")
        symbol("varogreaterthan", "⧁")
        symbol("varolessthan", "⧀")
        symbol("varominus", "⊖")
        symbol("varoplus", "⊕")
        symbol("varoslash", "⊘")
        symbol("varotimes", "⊗")
        symbol("varovee", null)
        symbol("varowedge", null)
        symbol("vartimes", "⨉")
        symbol("bigsqcap", "⊓")
    }

    val diffcoeff = mathCommands {
        packageOf("diffcoeff")
        val orderSpec = "order-spec".optional
        val differentiand = "differentiand".required
        val variables = "variable(s)".required
        val ptOfEval = "pt of eval".optional
        val commands = setOf(
            "diff", "diff*", "diff**",
            "diffp", "diffp*", "diffp**",
            "difs", "difs*", "difs**",
            "difsp", "difsp*", "difsp**",
            "difc", "difc**",
            "difcp", "difcp**"
        )
        commands.forEach { name ->
            name.cmd(orderSpec, differentiand, variables, ptOfEval)
        }
    }

    val upgreekCommand = mathCommands {
        packageOf("upgreek")
        symbol("upalpha", "α")
        symbol("upbeta", "β")
        symbol("upgamma", "γ")
        symbol("Upgamma", "Γ")
        symbol("updelta", "δ")
        symbol("Updelta", "Δ")
        symbol("upepsilon", "ϵ")
        symbol("upvarepsilon", "ε")
        symbol("upzeta", "ζ")
        symbol("upeta", "η")
        symbol("uptheta", "θ")
        symbol("upvartheta", "ϑ")
        symbol("Uptheta", "Θ")
        symbol("upiota", "ι")
        symbol("upkappa", "κ")
        symbol("uplambda", "λ")
        symbol("Uplambda", "Λ")
        symbol("upmu", "μ")
        symbol("upnu", "ν")
        symbol("upxi", "ξ")
        symbol("Upxi", "Ξ")
        symbol("uppi", "π")
        symbol("upvarpi", "ϖ")
        symbol("Uppi", "Π")
        symbol("uprho", "ρ")
        symbol("upvarrho", "ρ")
        symbol("upsigma", "σ")
        symbol("upvarsigma", "σ")
        symbol("Upsigma", "Σ")
        symbol("uptau", "τ")
        symbol("upupsilon", "υ")
        symbol("Upupsilon", "ϒ")
        symbol("upphi", "ϕ")
        symbol("upvarphi", "φ")
        symbol("Upphi", "Φ")
        symbol("upchi", "χ")
        symbol("uppsi", "ψ")
        symbol("Uppsi", "Ψ")
        symbol("upomega", "ω")
        symbol("Upomega", "Ω")
    }
}