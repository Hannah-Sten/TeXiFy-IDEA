:experimental:

These settings can be found in menu:File[Settings > Languages & Frameworks > TeXiFy]

[#closing-math]
== Option to disable automatic insertion of second $

By default, when you type `$` to start an inline math environment, the closing `$` will be inserted automatically.
You can use this setting to disable this.

Note that if your cursor is right before the closing `$`, so like `$ <cursor>$`, you can type `$` and IntelliJ will skip over the closing `$` just like with closing braces.

[#brace-insertion]
== Option to disable automatic brace insertion around text in subscript and superscript

By default, TeXiFy will automatically insert braces around multiple letters/numbers when they are directly after a `_` or `^` without spaces inbetween.

This means that when you type `$a_bc$` it will result in `$a_{bc}$`, to ensure that both the `b` and the `c` appear as subscript.

You can disable this behaviour using this setting.

[#item-insertion]
== Option to disable auto-insertion of \item

By default, when you press kbd:[Enter] when in an itemize or enumerate environment, TeXiFy will insert a new `\item` for you.

For example, when in a situation like

[source,latex]
----
\begin{itemize}
    \item <cursor>
\end{itemize}
----

and you press kbd:[Enter], it will result in

[source,latex]
----
\begin{itemize}
    \item
    \item <cursor>
\end{itemize}
----

If you do not want to insert an `\item`, press kbd:[Shift + Enter] instead.

You can disable the automatic insertion of `\item` using this setting.

[#dependency-check]
== Option to disable automatic package dependency checks

You can disable the automatic insertion of package dependencies.
This also disables the inspection which checks for link:Probable-bugs#Missing-imports[Missing imports].
For more information, see link:Automatic-package-importing[Automagically import packages of common commands].

If you disable this, consider if TeXiFy should support your use case and please open an issue if so.


[#continuous-preview]
== Option to enable continuous preview of math and TikZ environments
_Since b0.6.7_

When enabled and you are typing in a math environment (for example inline math `$..$` or display math `\[ ... \]`) then a preview window will pop up which will show how the math will look like. The same holds for `tikzpicture` environments.

For more information about the preview and how to install dependencies, see link:Preview#Equation-preview[Equation preview].
For continuous compilation of the complete document, see link:Compilers#Latexmk[Latexmk].

image::continuous-preview.gif[Continuous preview]

[#backslash-selection]
== Option to include the backslash when selecting a LaTeX command
_Since b0.6.10_

When enabled, selecting a LaTeX command by for example double-clicking or using kbd:[Ctrl + W] will also include the backslash in the selection.

[#automatic-compilation]
== Option to enable automatic compilation
_Since b0.6.8_

See link:Automatic-compilation[Support for automatic compilation].

[#smart-quotes]
== Option to enable smart quote substitution

Instead of writing opening and closing quotes like `+`quote'+` and ```quote''` yourself, you can also let TeXiFy choose for you whether to insert opening or closing quotes, and of what type.

Typing `\"` will still always work. In other cases, there are three options.

=== Ligatures

If you type single quotes, so you type `'quote'`, the opening single quote will be replaced by ```, so the result is `+`quote'+`.

For double quotes, typing `"quote"` will end up as ```quote''`.

=== Commands

Instead of using ``` for opening and `'` for closing, you can also use the commands `\lq{}` and `\rq{}` for left and right quotes.
These have exactly the same result.

Typing `'quote'` will result in `\lq{}quote\rq{}`, and typing `"quote"` will result in `\lq\lq{}quote\rq\rq{}`.

=== Csquotes
_Since b0.6.6_

The https://ctan.org/pkg/csquotes?lang=en[csquotes] (Context Sensitive quotes) package provides some improvements for typesetting quotes, using the `\enquote` command.
For example, nested quotations work properly.

Typing `'quote'` will result in `\enquote*{quote}` and typing `"quote"` will result in `\enquote{quote}`.

This also works for nested quotes, typing `"nested "quotes""` results in `\enquote{nested \enquote{quotes}}`.

Note that instead of typing the closing `'` or `"` you could also type the closing `}` and IntelliJ will skip over it like usual.
Whenever the next character is not a closing brace, we assume you want opening quotes and insert the `\enquote` command.

For more advantages, see https://tex.stackexchange.com/questions/39285/whats-the-advantage-of-using-csquotes-over-using-an-editors-auto-replacement-f


[#pdfviewer]
== Option to select default PDF viewer
_Since b0.6.7_

This lists all supported pdf viewers that are installed on your system, which you can select as the default pdf viewer.
Selecting a supported viewer as default means that you get forward and inverse search, and that the selected pdf viewer is the viewer that will open when compilation is done.

The supported pdf viewers are link:SumatraPDF-support[Sumatra] for Windows, and link:Evince-support[Evince] and link:Okular-support[Okular] for linux.
You can use any other pdf viewer by selecting the option Custom PDF Viewer.


[#labeldefining-commands]
== Option to specify custom commands that also define a label

Because TeXiFy does not automatically detect if your custom LaTeX command (defined with `\newcommand`) also includes a `\label` command using one of the parameters, you can enter the names of these commands manually in the settings.
This will make sure that TeXiFy understands that your custom command specifies a label, and thus other features will work correctly, including the duplicate label inspection, the missing label inspection, structure view and autocomplete.
//There also is an intention on `\newcommand`

In the table, each entry has the following values.

* Name of command: the LaTeX command
* Position of label parameter: which (required) parameter of your custom command is input as value to the `\label`, so if you use `\label{#42}` then this number should be 42
* Label previous command: should be true if your custom command labels the LaTeX command/environment that is right before that, for example using `\captionof` from the `caption` package.

An example:

[source,latex]
----
\documentclass{article}

\newcommand{\italiclabel}[2]{
\section{#1}\label{#2}
}

\begin{document}
    \italiclabel{label me}{me:label}
    If you add the italiclabel command with position 2 to the table in settings, then~\ref{me:label} will be recognized (and autocompleted).

\end{document}
----
