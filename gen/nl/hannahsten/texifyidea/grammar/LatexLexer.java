/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package nl.hannahsten.texifyidea.grammar;

import com.intellij.lexer.FlexLexer;
import java.util.*;

import com.intellij.psi.tree.IElementType;
import nl.hannahsten.texifyidea.util.magic.EnvironmentMagic;

import static nl.hannahsten.texifyidea.psi.LatexTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LatexLexer.flex</tt>
 */
public class LatexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INLINE_MATH = 2;
  public static final int INLINE_MATH_LATEX = 4;
  public static final int DISPLAY_MATH = 6;
  public static final int TEXT_INSIDE_INLINE_MATH = 8;
  public static final int NESTED_INLINE_MATH = 10;
  public static final int PARTIAL_DEFINITION = 12;
  public static final int NEW_ENVIRONMENT_DEFINITION_NAME = 14;
  public static final int NEW_ENVIRONMENT_DEFINITION = 16;
  public static final int NEW_ENVIRONMENT_SKIP_BRACE = 18;
  public static final int NEW_ENVIRONMENT_DEFINITION_END = 20;
  public static final int NEW_DOCUMENT_ENV_DEFINITION_NAME = 22;
  public static final int NEW_DOCUMENT_ENV_DEFINITION_ARGS_SPEC = 24;
  public static final int LATEX3 = 26;
  public static final int INLINE_VERBATIM_PLAIN_START = 28;
  public static final int INLINE_VERBATIM = 30;
  public static final int INLINE_VERBATIM_NORMAL_START = 32;
  public static final int POSSIBLE_VERBATIM_BEGIN = 34;
  public static final int VERBATIM_OPTIONAL_ARG = 36;
  public static final int VERBATIM_START = 38;
  public static final int VERBATIM_END = 40;
  public static final int INLINE_VERBATIM_OPTIONAL_ARG = 42;
  public static final int VERBATIM = 44;
  public static final int POSSIBLE_VERBATIM_OPTIONAL_ARG = 46;
  public static final int POSSIBLE_VERBATIM_END = 48;
  public static final int PSEUDOCODE = 50;
  public static final int POSSIBLE_PSEUDOCODE_END = 52;
  public static final int OFF = 54;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4224 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\2\5\1\17\u01e2\5");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\55\6\1\7\3\6\1\10\6\6\1\7\14\6\1\11\3\6\1\11\3\6"+
    "\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\2\6\1"+
    "\10\3\6\1\10\2\6\1\7\10\6\1\7\1\6\1\10\57\6\1\5\12\6\1\7\1\10\11\6\1\11\3"+
    "\6\1\10\5\6\1\12\5\6\1\10\2\6\1\10\4\6\1\12\35\6\1\13\1\14\1\15\175\6\1\5"+
    "\160\6\1\7\24\6\1\10\1\6\1\7\5\6\2\10\2\6\1\10\14\6\1\10\130\6\1\10\54\6\1"+
    "\7\35\6\1\11\3\6\1\10\1\6\1\16\4\6\1\10\10\6\1\10\12\6\1\10\3\6\1\10\13\6"+
    "\1\10\3\6\1\7\2\6\1\10\15\6\1\7\32\6\1\10\60\6\1\7\6\6\1\10\143\6\1\17\1\20"+
    "\12\6\1\10\65\6");

  /* The ZZ_CMAP_A table has 544 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\10\1\27\2\31\1\30\22\0\1\63\1\62\1\104\1\0\1\76\1\66\1\102\1\0\1\2"+
    "\1\3\1\56\1\77\1\103\1\101\2\0\12\100\1\34\1\0\1\57\1\61\1\60\1\0\1\17\1\71"+
    "\2\33\1\54\1\35\1\70\2\33\1\72\2\33\1\74\1\33\1\52\1\42\1\43\1\33\1\53\1\40"+
    "\1\64\1\75\1\33\1\73\1\65\2\33\1\4\1\1\1\5\1\0\1\34\1\0\1\25\1\11\1\23\1\16"+
    "\1\12\1\20\1\13\1\24\1\14\1\33\1\47\1\37\1\51\1\15\1\44\1\36\1\33\1\26\1\46"+
    "\1\22\1\55\1\45\1\50\1\21\1\41\1\33\1\6\1\105\1\7\7\0\1\32\32\0\1\67\77\0"+
    "\12\77\46\0\12\77\14\0\12\77\20\0\12\77\6\0\12\77\6\0\13\67\35\0\2\32\5\0"+
    "\1\67\57\0\1\67\26\0\12\77\16\0\62\77");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\2"+
    "\1\27\3\2\1\30\1\31\1\2\1\32\1\33\1\1"+
    "\1\34\1\2\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\2\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\2\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\2\1\67\1\61"+
    "\1\70\1\71\1\72\21\70\1\73\2\0\1\20\1\74"+
    "\1\20\1\70\1\75\1\70\1\76\1\77\17\70\2\0"+
    "\11\70\2\0\12\70\1\100\11\70\1\0\1\101\1\74"+
    "\1\0\1\74\1\20\11\70\1\100\10\70\2\0\7\70"+
    "\1\102\3\70\2\0\1\70\1\103\7\70\1\100\7\70"+
    "\2\0\1\74\1\20\10\70\1\100\6\70\1\0\1\104"+
    "\1\105\4\70\1\102\4\70\2\0\6\70\1\106\6\70"+
    "\1\106\2\70\1\107\1\0\1\74\1\20\1\110\4\70"+
    "\1\106\3\70\1\106\2\70\1\0\5\70\1\111\7\70"+
    "\2\0\1\112\13\70\1\106\2\70\1\0\1\74\11\70"+
    "\1\113\3\70\1\114\6\70\1\0\15\70\1\0\1\74"+
    "\17\70\1\0\5\70\1\115\4\70\1\0\1\74\14\70"+
    "\1\0\1\116\10\70\1\0\1\74\11\70\1\0\5\70"+
    "\1\0\1\74\7\70\1\0\5\70\1\0\1\74\7\70"+
    "\1\117\5\70\1\0\1\107\6\70\1\120\1\121\3\70"+
    "\1\121\7\70\1\122\2\70\1\123\2\70\1\123\30\70"+
    "\2\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[514];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a"+
    "\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a"+
    "\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u0834"+
    "\0\u0834\0\u0834\0\u0834\0\u0834\0\u087a\0\u0834\0\u07a8\0\u08c0"+
    "\0\u0906\0\u0834\0\u0834\0\u094c\0\u0834\0\u0992\0\u0834\0\u0834"+
    "\0\u0834\0\u0834\0\u09d8\0\u0834\0\u0a1e\0\u0a64\0\u0aaa\0\u0834"+
    "\0\u0834\0\u0af0\0\u0834\0\u0834\0\u0834\0\u0834\0\u0b36\0\u0834"+
    "\0\u0834\0\u0834\0\u0834\0\u0834\0\u0834\0\u0b7c\0\u0834\0\u0834"+
    "\0\u0834\0\u0834\0\u0834\0\u0834\0\u0834\0\u0834\0\u0834\0\u0bc2"+
    "\0\u0834\0\u0834\0\u0834\0\u0834\0\u0834\0\u0c08\0\u0834\0\u0834"+
    "\0\u0c4e\0\u0c94\0\u0834\0\u0cda\0\u0d20\0\u0d66\0\u0834\0\u0834"+
    "\0\u0834\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50"+
    "\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180"+
    "\0\u11c6\0\u120c\0\u0834\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a"+
    "\0\u13b0\0\u0834\0\u13f6\0\u0834\0\u0834\0\u143c\0\u1482\0\u14c8"+
    "\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8"+
    "\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928"+
    "\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58"+
    "\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88"+
    "\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8"+
    "\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c\0\u0834\0\u21a2"+
    "\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c\0\u23d2"+
    "\0\u2418\0\u245e\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u25bc\0\u2602"+
    "\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u2832"+
    "\0\u2878\0\u28be\0\u2904\0\u294a\0\u2990\0\u29d6\0\u0e38\0\u2a1c"+
    "\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c"+
    "\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa\0\u0e38\0\u2df0\0\u2e36"+
    "\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066"+
    "\0\u30ac\0\u30f2\0\u2bc0\0\u3138\0\u317e\0\u31c4\0\u320a\0\u3250"+
    "\0\u3296\0\u143c\0\u32dc\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u343a"+
    "\0\u3480\0\u0834\0\u2bc0\0\u34c6\0\u350c\0\u3552\0\u3598\0\u35de"+
    "\0\u3624\0\u366a\0\u36b0\0\u36f6\0\u373c\0\u3782\0\u37c8\0\u380e"+
    "\0\u3854\0\u389a\0\u38e0\0\u3926\0\u0e38\0\u396c\0\u39b2\0\u39f8"+
    "\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u3b56\0\u3b9c\0\u1252\0\u3be2"+
    "\0\u3c28\0\u3c6e\0\u0e38\0\u3cb4\0\u3cfa\0\u3d40\0\u3d86\0\u143c"+
    "\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a\0\u3f70\0\u3fb6"+
    "\0\u3ffc\0\u4042\0\u4088\0\u40ce\0\u0e38\0\u4114\0\u415a\0\u41a0"+
    "\0\u41e6\0\u422c\0\u4272\0\u42b8\0\u42fe\0\u4344\0\u0e38\0\u438a"+
    "\0\u43d0\0\u4416\0\u445c\0\u44a2\0\u44e8\0\u452e\0\u4574\0\u45ba"+
    "\0\u4600\0\u4646\0\u0834\0\u468c\0\u46d2\0\u4718\0\u475e\0\u47a4"+
    "\0\u47ea\0\u4830\0\u4876\0\u48bc\0\u4902\0\u4948\0\u498e\0\u49d4"+
    "\0\u0834\0\u4a1a\0\u4a60\0\u4aa6\0\u0e38\0\u4aec\0\u4b32\0\u4b78"+
    "\0\u4bbe\0\u4c04\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8"+
    "\0\u4dee\0\u4e34\0\u4e7a\0\u4ec0\0\u4f06\0\u4f4c\0\u4f92\0\u4fd8"+
    "\0\u501e\0\u5064\0\u50aa\0\u50f0\0\u5136\0\u517c\0\u51c2\0\u5208"+
    "\0\u524e\0\u5294\0\u52da\0\u5320\0\u5366\0\u53ac\0\u53f2\0\u5438"+
    "\0\u547e\0\u54c4\0\u550a\0\u5550\0\u5596\0\u55dc\0\u5622\0\u5668"+
    "\0\u0e38\0\u56ae\0\u56f4\0\u573a\0\u5780\0\u57c6\0\u580c\0\u5852"+
    "\0\u5898\0\u58de\0\u5924\0\u596a\0\u59b0\0\u59f6\0\u5a3c\0\u5a82"+
    "\0\u5ac8\0\u5b0e\0\u5b54\0\u5b9a\0\u0e38\0\u5be0\0\u5c26\0\u5c6c"+
    "\0\u5cb2\0\u5cf8\0\u5d3e\0\u5d84\0\u5dca\0\u5e10\0\u5e56\0\u5e9c"+
    "\0\u5ee2\0\u5f28\0\u5f6e\0\u5fb4\0\u5ffa\0\u6040\0\u6086\0\u60cc"+
    "\0\u6112\0\u6158\0\u619e\0\u61e4\0\u622a\0\u6270\0\u62b6\0\u62fc"+
    "\0\u6342\0\u6388\0\u63ce\0\u6414\0\u645a\0\u64a0\0\u64e6\0\u652c"+
    "\0\u6572\0\u65b8\0\u65fe\0\u6644\0\u668a\0\u66d0\0\u6716\0\u675c"+
    "\0\u67a2\0\u67e8\0\u682e\0\u6874\0\u68ba\0\u6900\0\u6946\0\u698c"+
    "\0\u69d2\0\u6a18\0\u6a5e\0\u6aa4\0\u6aea\0\u6b30\0\u6b76\0\u6bbc"+
    "\0\u6c02\0\u6c48\0\u6c8e\0\u6cd4\0\u0834\0\u0e38\0\u6d1a\0\u6d60"+
    "\0\u6da6\0\u143c\0\u6dec\0\u6e32\0\u6e78\0\u6ebe\0\u6f04\0\u6f4a"+
    "\0\u6f90\0\u143c\0\u6fd6\0\u701c\0\u0e38\0\u7062\0\u70a8\0\u143c"+
    "\0\u70ee\0\u7134\0\u717a\0\u71c0\0\u7206\0\u724c\0\u7292\0\u72d8"+
    "\0\u731e\0\u7364\0\u73aa\0\u73f0\0\u7436\0\u747c\0\u74c2\0\u7508"+
    "\0\u754e\0\u7594\0\u75da\0\u7620\0\u7666\0\u76ac\0\u76f2\0\u7738"+
    "\0\u0e38\0\u143c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[514];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\16\35\3\45\1\46\23\35\1\47\1\50\1\51"+
    "\1\52\1\53\1\45\2\35\1\54\1\46\6\35\1\55"+
    "\2\35\1\56\1\57\1\60\1\61\1\62\1\35\1\63"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\16\35"+
    "\3\45\1\46\23\35\1\47\1\50\1\51\1\52\1\53"+
    "\1\45\2\35\1\54\1\46\6\35\1\64\2\35\1\56"+
    "\1\57\1\60\1\61\1\62\1\35\1\65\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\16\35\3\45\1\46"+
    "\23\35\1\47\1\50\1\51\1\52\1\53\1\45\2\35"+
    "\1\54\1\46\6\35\1\46\2\35\1\56\1\57\1\60"+
    "\1\61\1\62\1\35\1\66\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\16\35\3\45\1\46\23\35\1\47"+
    "\1\50\1\51\1\52\1\53\1\45\2\35\1\54\1\46"+
    "\6\35\1\55\2\35\1\56\1\57\1\60\1\61\1\62"+
    "\1\35\1\67\1\37\1\40\1\41\1\42\1\43\1\70"+
    "\1\45\16\35\3\45\1\46\23\35\1\47\1\50\1\51"+
    "\1\52\1\53\1\45\2\35\1\54\1\46\6\35\1\71"+
    "\2\35\1\56\1\57\1\60\1\61\1\62\1\35\1\67"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\16\35"+
    "\3\45\1\46\23\35\1\47\1\50\1\51\1\52\1\53"+
    "\1\45\2\35\1\54\1\46\6\35\1\64\2\35\1\56"+
    "\1\57\1\60\1\61\1\62\1\35\1\72\1\37\1\40"+
    "\1\41\1\42\1\73\1\74\1\45\16\35\3\45\1\46"+
    "\23\35\1\47\1\50\1\51\1\52\1\53\1\45\2\35"+
    "\1\54\1\46\6\35\1\75\2\35\1\56\1\57\1\60"+
    "\1\61\1\62\1\35\1\67\1\37\1\40\1\41\1\42"+
    "\1\43\1\76\1\45\16\35\3\45\1\46\23\35\1\47"+
    "\1\50\1\51\1\52\1\53\1\45\2\35\1\54\1\46"+
    "\6\35\1\46\2\35\1\56\1\57\1\60\1\61\1\62"+
    "\1\35\1\77\1\37\1\40\1\41\1\42\1\100\1\101"+
    "\1\45\16\35\3\45\1\46\23\35\1\47\1\50\1\51"+
    "\1\52\1\53\1\45\2\35\1\54\1\46\6\35\1\75"+
    "\2\35\1\56\1\57\1\60\1\61\1\62\1\35\1\67"+
    "\1\37\1\40\1\41\1\42\1\102\1\44\1\45\16\35"+
    "\3\45\1\46\23\35\1\47\1\50\1\51\1\52\1\53"+
    "\1\45\2\35\1\54\1\46\6\35\1\46\2\35\1\56"+
    "\1\57\1\60\1\61\1\62\1\35\1\77\1\37\1\40"+
    "\1\41\1\42\1\100\1\103\1\45\16\35\3\45\1\46"+
    "\23\35\1\47\1\50\1\51\1\52\1\53\1\45\2\35"+
    "\1\54\1\46\6\35\1\75\2\35\1\56\1\57\1\60"+
    "\1\61\1\62\1\35\1\67\1\37\1\40\1\41\1\42"+
    "\1\43\1\104\1\45\16\35\3\45\1\46\23\35\1\47"+
    "\1\50\1\51\1\52\1\53\1\45\2\35\1\54\1\46"+
    "\6\35\1\46\2\35\1\56\1\57\1\60\1\61\1\62"+
    "\1\35\1\67\1\37\1\40\1\41\1\42\1\100\1\105"+
    "\1\45\16\35\3\45\1\46\23\35\1\47\1\50\1\51"+
    "\1\52\1\53\1\45\2\35\1\54\1\46\6\35\1\46"+
    "\2\35\1\56\1\57\1\60\1\61\1\62\1\35\1\106"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\16\35"+
    "\3\45\1\46\23\35\1\47\1\50\1\51\1\52\1\53"+
    "\1\45\2\35\1\54\1\46\6\35\1\46\2\35\1\56"+
    "\1\57\1\60\1\61\1\62\1\107\1\110\1\111\1\107"+
    "\1\112\1\113\1\114\1\70\76\107\106\115\1\107\1\110"+
    "\1\111\1\107\1\116\1\113\1\117\1\70\76\107\1\120"+
    "\1\77\1\37\1\40\1\41\1\42\1\100\1\70\1\45"+
    "\16\120\3\45\1\46\24\120\1\50\1\51\1\52\1\53"+
    "\1\45\2\120\1\54\1\46\6\120\1\75\2\120\1\56"+
    "\1\57\1\60\1\61\1\62\1\35\1\67\1\37\1\40"+
    "\1\121\1\122\1\43\1\44\1\45\16\35\3\45\1\46"+
    "\23\35\1\47\1\50\1\51\1\52\1\53\1\45\2\35"+
    "\1\54\1\46\6\35\1\46\2\35\1\56\1\57\1\60"+
    "\1\61\1\62\1\35\1\67\1\37\1\40\1\41\1\42"+
    "\1\43\1\123\1\45\16\35\3\45\1\46\23\35\1\47"+
    "\1\50\1\51\1\52\1\53\1\45\2\35\1\54\1\46"+
    "\6\35\1\46\2\35\1\56\1\57\1\60\1\61\1\62"+
    "\1\35\1\67\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\16\35\3\45\1\46\23\35\1\47\1\50\1\51"+
    "\1\52\1\53\1\45\2\35\1\54\1\46\6\35\1\46"+
    "\2\35\1\56\1\57\1\60\1\61\1\62\1\35\1\67"+
    "\1\37\1\40\1\121\1\124\1\43\1\44\1\45\16\35"+
    "\3\45\1\46\23\35\1\47\1\50\1\51\1\52\1\53"+
    "\1\45\2\35\1\54\1\46\6\35\1\46\2\35\1\56"+
    "\1\57\1\60\1\61\1\62\1\125\1\126\6\125\1\45"+
    "\16\125\3\45\31\125\1\45\22\125\4\127\1\130\3\127"+
    "\1\131\16\127\3\131\31\127\1\131\22\127\1\132\5\133"+
    "\1\43\2\133\16\132\4\133\24\132\5\133\2\132\2\133"+
    "\6\132\1\133\2\132\5\133\1\35\1\134\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\16\35\3\45\1\46"+
    "\23\35\1\47\1\50\1\51\1\52\1\53\1\45\2\35"+
    "\1\54\1\46\6\35\1\55\2\35\1\56\1\57\1\60"+
    "\1\61\1\62\1\135\1\67\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\16\135\3\45\1\46\24\135\1\50"+
    "\1\51\1\52\1\53\1\45\2\135\1\54\1\46\6\135"+
    "\1\46\2\135\1\56\1\57\1\60\1\61\1\62\66\125"+
    "\1\136\17\125\1\35\10\0\16\35\4\0\24\35\5\0"+
    "\2\35\2\0\6\35\1\0\2\35\5\0\2\137\1\140"+
    "\1\137\1\141\4\137\1\142\1\143\2\144\1\145\1\146"+
    "\1\147\4\144\1\150\1\144\1\151\1\0\1\137\2\0"+
    "\1\144\1\137\1\152\1\153\1\154\3\144\1\155\1\144"+
    "\1\156\4\144\1\157\1\160\1\161\1\162\6\137\2\144"+
    "\2\137\6\144\10\137\116\0\1\45\16\0\3\45\31\0"+
    "\1\45\30\0\1\163\50\0\1\164\17\0\3\165\1\0"+
    "\1\165\10\0\1\163\77\0\27\166\2\0\31\166\1\167"+
    "\1\170\22\166\101\0\1\56\4\0\4\137\1\141\4\137"+
    "\1\142\1\143\2\144\1\145\1\146\1\147\2\144\1\171"+
    "\1\144\1\150\1\144\1\151\1\0\1\137\2\0\1\144"+
    "\1\137\1\152\1\153\1\154\3\144\1\155\1\144\1\156"+
    "\4\144\1\157\1\160\1\161\1\162\6\137\2\144\2\137"+
    "\6\144\13\137\1\64\1\141\4\137\1\142\1\143\2\144"+
    "\1\145\1\146\1\147\4\144\1\150\1\144\1\151\1\0"+
    "\1\137\2\0\1\144\1\137\1\152\1\153\1\154\3\144"+
    "\1\155\1\144\1\156\4\144\1\157\1\160\1\161\1\162"+
    "\6\137\2\144\2\137\6\144\12\137\1\140\1\137\1\141"+
    "\1\172\3\137\1\142\1\143\2\144\1\145\1\146\1\147"+
    "\4\144\1\150\1\144\1\151\1\0\1\137\2\0\1\144"+
    "\1\137\1\152\1\153\1\154\3\144\1\155\1\144\1\156"+
    "\4\144\1\157\1\160\1\161\1\162\6\137\2\144\2\137"+
    "\6\144\14\137\1\141\4\137\1\142\1\143\2\144\1\145"+
    "\1\146\1\147\4\144\1\150\1\144\1\151\1\0\1\137"+
    "\2\0\1\144\1\137\1\152\1\153\1\154\3\144\1\155"+
    "\1\144\1\156\4\144\1\157\1\160\1\161\1\162\6\137"+
    "\2\144\2\137\6\144\14\137\1\141\4\137\1\144\1\173"+
    "\2\144\1\145\1\146\1\147\4\144\1\150\1\144\1\151"+
    "\1\0\1\137\2\0\1\144\1\137\1\152\1\153\1\154"+
    "\3\144\1\155\1\144\1\156\4\144\1\157\1\160\1\161"+
    "\1\162\6\137\2\144\2\137\6\144\14\137\1\174\1\175"+
    "\3\137\1\142\1\143\2\144\1\145\1\146\1\147\4\144"+
    "\1\150\1\144\1\151\1\0\1\137\2\0\1\144\1\137"+
    "\1\152\1\153\1\154\3\144\1\155\1\144\1\156\4\144"+
    "\1\157\1\160\1\161\1\162\6\137\2\144\2\137\6\144"+
    "\14\137\1\141\4\137\4\176\1\177\1\200\1\201\4\176"+
    "\1\202\1\176\1\203\1\0\1\137\2\0\2\176\1\204"+
    "\1\205\1\206\3\176\1\207\1\176\1\210\4\176\1\211"+
    "\1\212\1\213\1\214\6\137\2\176\2\137\6\176\2\137"+
    "\1\176\5\137\1\120\10\0\16\120\4\0\24\120\5\0"+
    "\2\120\2\0\6\120\1\0\2\120\16\0\1\215\1\216"+
    "\103\0\1\131\16\0\3\131\31\0\1\131\22\0\1\132"+
    "\10\0\16\132\4\0\24\132\5\0\2\132\2\0\6\132"+
    "\1\0\2\132\5\0\2\137\1\140\1\137\1\141\4\137"+
    "\1\142\1\217\2\144\1\145\1\146\1\147\4\144\1\150"+
    "\1\144\1\151\1\0\1\137\2\0\1\144\1\137\1\220"+
    "\1\153\1\154\3\144\1\221\1\144\1\156\4\144\1\157"+
    "\1\222\1\161\1\162\6\137\2\144\2\137\1\223\1\144"+
    "\1\224\1\225\1\226\1\227\10\137\1\135\10\0\16\135"+
    "\4\0\24\135\5\0\2\135\2\0\6\135\1\0\2\135"+
    "\67\0\1\230\1\231\33\0\1\144\1\232\14\144\4\0"+
    "\1\144\1\0\21\144\6\0\2\144\2\0\6\144\21\0"+
    "\4\144\1\233\11\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\21\0\16\144\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\1\144\1\234"+
    "\14\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\3\144\1\235\12\144\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\3\144\1\236"+
    "\12\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\15\144\1\237\4\0\1\144\1\0\21\144"+
    "\6\0\2\144\2\0\6\144\21\0\1\144\1\240\14\144"+
    "\4\0\1\144\1\0\21\144\6\0\2\144\2\0\6\144"+
    "\21\0\10\144\1\241\5\144\4\0\1\144\1\0\21\144"+
    "\6\0\2\144\2\0\6\144\21\0\14\144\1\242\1\243"+
    "\4\0\1\144\1\0\4\144\1\244\2\144\1\245\11\144"+
    "\6\0\2\144\2\0\6\144\21\0\16\144\4\0\1\144"+
    "\1\0\11\144\1\246\6\144\1\247\6\0\2\144\2\0"+
    "\6\144\21\0\15\144\1\250\4\0\1\144\1\0\21\144"+
    "\6\0\2\144\2\0\6\144\21\0\1\144\1\251\14\144"+
    "\4\0\1\144\1\0\21\144\6\0\2\144\2\0\6\144"+
    "\21\0\1\144\1\252\14\144\4\0\1\144\1\0\21\144"+
    "\6\0\2\144\2\0\6\144\21\0\1\144\1\253\14\144"+
    "\4\0\1\144\1\0\21\144\6\0\2\144\2\0\6\144"+
    "\21\0\1\144\1\254\14\144\4\0\1\144\1\0\21\144"+
    "\6\0\2\144\2\0\6\144\21\0\15\144\1\255\4\0"+
    "\1\144\1\0\21\144\6\0\2\144\2\0\6\144\10\0"+
    "\27\164\4\0\25\164\1\256\25\164\60\0\1\257\16\0"+
    "\3\165\1\0\1\165\2\0\27\166\2\0\55\166\10\260"+
    "\1\167\16\260\2\261\1\167\4\260\1\262\24\260\1\167"+
    "\22\260\27\166\2\0\31\166\1\263\23\166\11\0\1\144"+
    "\1\264\14\144\4\0\1\144\1\0\21\144\6\0\2\144"+
    "\2\0\6\144\21\0\4\144\1\265\11\144\4\0\1\144"+
    "\1\0\21\144\6\0\2\144\2\0\6\144\21\0\16\176"+
    "\4\0\23\176\6\0\2\176\2\0\6\176\2\0\1\176"+
    "\16\0\1\176\1\266\14\176\4\0\23\176\6\0\2\176"+
    "\2\0\6\176\2\0\1\176\16\0\3\176\1\267\12\176"+
    "\4\0\23\176\6\0\2\176\2\0\6\176\2\0\1\176"+
    "\16\0\3\176\1\270\12\176\4\0\23\176\6\0\2\176"+
    "\2\0\6\176\2\0\1\176\16\0\15\176\1\271\4\0"+
    "\23\176\6\0\2\176\2\0\6\176\2\0\1\176\16\0"+
    "\1\176\1\272\14\176\4\0\23\176\6\0\2\176\2\0"+
    "\6\176\2\0\1\176\16\0\10\176\1\273\5\176\4\0"+
    "\23\176\6\0\2\176\2\0\6\176\2\0\1\176\16\0"+
    "\14\176\1\274\1\176\4\0\6\176\1\275\14\176\6\0"+
    "\2\176\2\0\6\176\2\0\1\176\16\0\16\176\4\0"+
    "\13\176\1\276\6\176\1\277\6\0\2\176\2\0\6\176"+
    "\2\0\1\176\16\0\15\176\1\300\4\0\23\176\6\0"+
    "\2\176\2\0\6\176\2\0\1\176\16\0\1\176\1\301"+
    "\14\176\4\0\23\176\6\0\2\176\2\0\6\176\2\0"+
    "\1\176\16\0\1\176\1\302\14\176\4\0\23\176\6\0"+
    "\2\176\2\0\6\176\2\0\1\176\16\0\1\176\1\303"+
    "\14\176\4\0\23\176\6\0\2\176\2\0\6\176\2\0"+
    "\1\176\16\0\1\176\1\304\14\176\4\0\23\176\6\0"+
    "\2\176\2\0\6\176\2\0\1\176\16\0\15\176\1\305"+
    "\4\0\23\176\6\0\2\176\2\0\6\176\2\0\1\176"+
    "\17\0\1\306\110\0\1\307\101\0\4\144\1\310\11\144"+
    "\4\0\1\144\1\0\21\144\6\0\2\144\2\0\6\144"+
    "\21\0\4\144\1\311\3\144\1\241\5\144\4\0\1\144"+
    "\1\0\2\144\1\312\16\144\6\0\2\144\2\0\6\144"+
    "\21\0\15\144\1\313\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\21\0\1\144\1\314\14\144\4\0"+
    "\1\144\1\0\21\144\6\0\2\144\2\0\6\144\21\0"+
    "\16\144\4\0\1\144\1\0\7\144\1\315\10\144\1\316"+
    "\6\0\2\144\2\0\6\144\21\0\7\144\1\317\6\144"+
    "\4\0\1\144\1\0\21\144\6\0\2\144\2\0\6\144"+
    "\21\0\13\144\1\320\2\144\4\0\1\144\1\0\21\144"+
    "\6\0\2\144\2\0\6\144\21\0\16\144\4\0\1\144"+
    "\1\0\7\144\1\321\11\144\6\0\2\144\2\0\6\144"+
    "\21\0\4\144\1\322\11\144\4\0\1\144\1\0\21\144"+
    "\6\0\2\144\2\0\6\144\20\0\1\230\16\0\3\230"+
    "\4\0\1\323\24\0\1\230\104\0\1\324\34\0\2\144"+
    "\1\325\13\144\4\0\1\144\1\0\21\144\6\0\2\144"+
    "\2\0\6\144\21\0\5\144\1\326\10\144\4\0\1\144"+
    "\1\0\21\144\6\0\2\144\2\0\6\144\21\0\16\144"+
    "\4\0\1\144\1\0\13\144\1\327\5\144\6\0\2\144"+
    "\2\0\6\144\21\0\15\144\1\330\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\7\144\1\331"+
    "\6\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\1\144\1\332\14\144\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\4\144\1\145"+
    "\11\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\16\144\4\0\1\144\1\0\1\144\1\333"+
    "\17\144\6\0\2\144\2\0\6\144\21\0\11\144\1\334"+
    "\4\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\1\144\1\335\14\144\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\1\336\11\144"+
    "\1\336\3\144\4\0\1\144\1\0\10\144\2\336\7\144"+
    "\6\0\2\144\2\0\6\144\21\0\16\144\4\0\1\144"+
    "\1\0\11\144\1\337\7\144\6\0\2\144\2\0\6\144"+
    "\21\0\11\144\1\340\4\144\4\0\1\144\1\0\21\144"+
    "\6\0\2\144\2\0\6\144\21\0\14\144\1\341\1\144"+
    "\4\0\1\144\1\0\21\144\6\0\2\144\2\0\6\144"+
    "\21\0\16\144\4\0\1\144\1\0\7\144\1\342\11\144"+
    "\6\0\2\144\2\0\6\144\21\0\15\144\1\343\4\0"+
    "\1\144\1\0\21\144\6\0\2\144\2\0\6\144\21\0"+
    "\16\144\4\0\1\144\1\0\13\144\1\344\5\144\6\0"+
    "\2\144\2\0\6\144\21\0\4\144\1\157\11\144\4\0"+
    "\1\144\1\0\21\144\6\0\2\144\2\0\6\144\21\0"+
    "\12\144\1\345\3\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\21\0\16\144\4\0\1\144\1\0"+
    "\2\144\1\336\16\144\6\0\2\144\2\0\6\144\10\0"+
    "\27\164\4\0\25\164\1\346\25\164\27\260\2\0\55\260"+
    "\10\0\1\261\16\0\3\261\4\0\1\347\24\0\1\261"+
    "\22\0\25\260\1\350\1\260\2\0\55\260\22\166\1\351"+
    "\4\166\2\0\33\166\1\351\21\166\11\0\10\144\1\352"+
    "\5\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\5\144\1\353\10\144\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\16\176\4\0"+
    "\15\176\1\354\5\176\6\0\2\176\2\0\6\176\2\0"+
    "\1\176\16\0\15\176\1\355\4\0\23\176\6\0\2\176"+
    "\2\0\6\176\2\0\1\176\16\0\7\176\1\356\6\176"+
    "\4\0\23\176\6\0\2\176\2\0\6\176\2\0\1\176"+
    "\16\0\1\176\1\357\14\176\4\0\23\176\6\0\2\176"+
    "\2\0\6\176\2\0\1\176\16\0\4\176\1\177\11\176"+
    "\4\0\23\176\6\0\2\176\2\0\6\176\2\0\1\176"+
    "\16\0\16\176\4\0\3\176\1\360\17\176\6\0\2\176"+
    "\2\0\6\176\2\0\1\176\16\0\11\176\1\361\4\176"+
    "\4\0\23\176\6\0\2\176\2\0\6\176\2\0\1\176"+
    "\16\0\1\362\11\176\1\362\3\176\4\0\12\176\2\362"+
    "\7\176\6\0\2\176\2\0\6\176\2\0\1\176\16\0"+
    "\11\176\1\363\4\176\4\0\23\176\6\0\2\176\2\0"+
    "\6\176\2\0\1\176\16\0\14\176\1\364\1\176\4\0"+
    "\23\176\6\0\2\176\2\0\6\176\2\0\1\176\16\0"+
    "\16\176\4\0\11\176\1\365\11\176\6\0\2\176\2\0"+
    "\6\176\2\0\1\176\16\0\15\176\1\366\4\0\23\176"+
    "\6\0\2\176\2\0\6\176\2\0\1\176\16\0\16\176"+
    "\4\0\15\176\1\367\5\176\6\0\2\176\2\0\6\176"+
    "\2\0\1\176\16\0\4\176\1\211\11\176\4\0\23\176"+
    "\6\0\2\176\2\0\6\176\2\0\1\176\16\0\12\176"+
    "\1\370\3\176\4\0\23\176\6\0\2\176\2\0\6\176"+
    "\2\0\1\176\16\0\16\176\4\0\4\176\1\362\16\176"+
    "\6\0\2\176\2\0\6\176\2\0\1\176\20\0\1\371"+
    "\110\0\1\372\100\0\5\144\1\373\10\144\4\0\1\144"+
    "\1\0\21\144\6\0\2\144\2\0\6\144\21\0\5\144"+
    "\1\374\10\144\4\0\1\144\1\0\21\144\6\0\2\144"+
    "\2\0\6\144\21\0\16\144\4\0\1\144\1\0\11\144"+
    "\1\375\7\144\6\0\2\144\2\0\6\144\21\0\16\144"+
    "\4\0\1\144\1\0\7\144\1\376\11\144\6\0\2\144"+
    "\2\0\6\144\21\0\4\144\1\157\11\144\4\0\1\144"+
    "\1\0\1\144\1\377\17\144\6\0\2\144\2\0\6\144"+
    "\21\0\15\144\1\u0100\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\21\0\4\144\1\u0101\11\144\4\0"+
    "\1\144\1\0\21\144\6\0\2\144\2\0\6\144\21\0"+
    "\3\144\1\u0102\12\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\21\0\16\144\4\0\1\144\1\0"+
    "\7\144\1\u0103\11\144\6\0\2\144\2\0\6\144\21\0"+
    "\11\144\1\u0104\4\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\35\0\1\u0105\102\0\1\u0106\41\0"+
    "\1\u0106\32\0\3\144\1\u0107\12\144\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\3\144\1\u0108"+
    "\12\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\1\144\1\u0109\14\144\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\1\144\1\u010a"+
    "\14\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\4\144\1\u010b\11\144\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\7\144\1\336"+
    "\6\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\16\144\4\0\1\144\1\0\2\144\1\u010c"+
    "\16\144\6\0\2\144\2\0\6\144\21\0\13\144\1\u010d"+
    "\2\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\5\144\1\u010e\3\144\1\u010f\2\144\1\u0110"+
    "\1\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\11\144\1\335\4\144\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\3\144\1\u0111"+
    "\12\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\1\144\1\u0112\14\144\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\16\144\4\0"+
    "\1\144\1\0\10\144\1\u0113\10\144\6\0\2\144\2\0"+
    "\6\144\21\0\1\u0114\15\144\4\0\1\144\1\0\21\144"+
    "\6\0\2\144\2\0\6\144\21\0\16\144\4\0\1\144"+
    "\1\0\17\144\1\u0115\1\144\6\0\2\144\2\0\6\144"+
    "\21\0\16\144\4\0\1\144\1\0\2\144\1\u0116\16\144"+
    "\6\0\2\144\2\0\6\144\10\0\27\164\4\0\25\164"+
    "\1\346\1\u0117\24\164\25\0\1\u0118\60\0\26\260\1\u0119"+
    "\2\0\55\260\12\166\1\u011a\14\166\2\0\4\166\1\u011a"+
    "\50\166\11\0\11\144\1\u011b\4\144\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\1\176\1\u011c"+
    "\14\176\4\0\23\176\6\0\2\176\2\0\6\176\2\0"+
    "\1\176\16\0\1\176\1\u011d\14\176\4\0\23\176\6\0"+
    "\2\176\2\0\6\176\2\0\1\176\16\0\4\176\1\u011e"+
    "\11\176\4\0\23\176\6\0\2\176\2\0\6\176\2\0"+
    "\1\176\16\0\7\176\1\362\6\176\4\0\23\176\6\0"+
    "\2\176\2\0\6\176\2\0\1\176\16\0\16\176\4\0"+
    "\4\176\1\u011f\16\176\6\0\2\176\2\0\6\176\2\0"+
    "\1\176\16\0\13\176\1\u0120\2\176\4\0\23\176\6\0"+
    "\2\176\2\0\6\176\2\0\1\176\16\0\3\176\1\u0121"+
    "\12\176\4\0\23\176\6\0\2\176\2\0\6\176\2\0"+
    "\1\176\16\0\1\176\1\u0122\14\176\4\0\23\176\6\0"+
    "\2\176\2\0\6\176\2\0\1\176\16\0\16\176\4\0"+
    "\12\176\1\u0123\10\176\6\0\2\176\2\0\6\176\2\0"+
    "\1\176\16\0\1\u0124\15\176\4\0\23\176\6\0\2\176"+
    "\2\0\6\176\2\0\1\176\16\0\16\176\4\0\21\176"+
    "\1\u0125\1\176\6\0\2\176\2\0\6\176\2\0\1\176"+
    "\16\0\16\176\4\0\4\176\1\u0126\16\176\6\0\2\176"+
    "\2\0\6\176\2\0\1\176\21\0\1\u0127\102\0\16\144"+
    "\4\0\1\144\1\0\6\144\1\u0128\12\144\6\0\2\144"+
    "\2\0\1\u0129\1\144\1\u012a\1\u012b\1\u012c\1\144\21\0"+
    "\1\144\1\u012d\14\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\2\144\1\u012e\3\144\21\0\12\144\1\u012f"+
    "\3\144\4\0\1\144\1\0\10\144\1\u0113\10\144\6\0"+
    "\2\144\2\0\6\144\21\0\1\144\1\u0130\14\144\4\0"+
    "\1\144\1\0\21\144\6\0\2\144\2\0\6\144\21\0"+
    "\16\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\1\144\1\u0131\4\144\21\0\12\144\1\u0132\3\144\4\0"+
    "\1\144\1\0\21\144\6\0\2\144\2\0\6\144\21\0"+
    "\16\144\4\0\1\144\1\0\2\144\1\u0133\16\144\6\0"+
    "\2\144\2\0\6\144\21\0\16\144\4\0\1\144\1\0"+
    "\1\144\1\317\17\144\6\0\2\144\2\0\6\144\21\0"+
    "\3\144\1\u0134\12\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\36\0\1\u0135\71\0\1\u0136\22\0"+
    "\1\u0136\61\0\4\144\1\u0137\11\144\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\4\144\1\u0138"+
    "\11\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\4\144\1\u0139\11\144\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\12\144\1\u013a"+
    "\3\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\1\144\1\u013b\14\144\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\16\144\4\0"+
    "\1\144\1\0\3\144\1\u013c\15\144\6\0\2\144\2\0"+
    "\6\144\21\0\14\144\1\u013d\1\144\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\3\144\1\u013e"+
    "\12\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\16\144\4\0\1\144\1\0\20\144\1\u013f"+
    "\6\0\2\144\2\0\6\144\21\0\4\144\1\u0140\11\144"+
    "\4\0\1\144\1\0\21\144\6\0\2\144\2\0\6\144"+
    "\21\0\10\144\1\u0141\5\144\4\0\1\144\1\0\21\144"+
    "\6\0\2\144\2\0\6\144\21\0\3\144\1\u0142\12\144"+
    "\4\0\1\144\1\0\21\144\6\0\2\144\2\0\6\144"+
    "\21\0\16\144\4\0\1\144\1\0\21\144\1\u0143\5\0"+
    "\2\144\2\0\6\144\21\0\16\144\4\0\1\144\1\0"+
    "\7\144\1\u0144\11\144\6\0\2\144\2\0\6\144\21\0"+
    "\14\144\1\u0145\1\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\36\0\1\u0146\57\0\27\260\2\0"+
    "\15\260\1\u0147\37\260\21\166\1\167\5\166\2\0\34\166"+
    "\1\167\20\166\11\0\4\176\1\u0148\11\176\4\0\23\176"+
    "\6\0\2\176\2\0\6\176\2\0\1\176\16\0\12\176"+
    "\1\u0149\3\176\4\0\23\176\6\0\2\176\2\0\6\176"+
    "\2\0\1\176\16\0\1\176\1\u014a\14\176\4\0\23\176"+
    "\6\0\2\176\2\0\6\176\2\0\1\176\16\0\16\176"+
    "\4\0\5\176\1\u014b\15\176\6\0\2\176\2\0\6\176"+
    "\2\0\1\176\16\0\4\176\1\u014c\11\176\4\0\23\176"+
    "\6\0\2\176\2\0\6\176\2\0\1\176\16\0\10\176"+
    "\1\u014d\5\176\4\0\23\176\6\0\2\176\2\0\6\176"+
    "\2\0\1\176\16\0\3\176\1\u014e\12\176\4\0\23\176"+
    "\6\0\2\176\2\0\6\176\2\0\1\176\16\0\16\176"+
    "\4\0\23\176\1\u0143\5\0\2\176\2\0\6\176\2\0"+
    "\1\176\16\0\16\176\4\0\11\176\1\u014f\11\176\6\0"+
    "\2\176\2\0\6\176\2\0\1\176\16\0\14\176\1\u0150"+
    "\1\176\4\0\23\176\6\0\2\176\2\0\6\176\2\0"+
    "\1\176\22\0\1\u0151\101\0\15\144\1\u0152\4\0\1\144"+
    "\1\0\21\144\6\0\2\144\2\0\6\144\21\0\16\144"+
    "\4\0\1\144\1\0\7\144\1\u0153\10\144\1\u0154\6\0"+
    "\2\144\2\0\6\144\21\0\7\144\1\u0155\6\144\4\0"+
    "\1\144\1\0\21\144\6\0\2\144\2\0\6\144\21\0"+
    "\13\144\1\u0156\2\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\21\0\16\144\4\0\1\144\1\0"+
    "\7\144\1\u0157\11\144\6\0\2\144\2\0\6\144\21\0"+
    "\7\144\1\u012d\6\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\21\0\1\144\1\u0158\14\144\4\0"+
    "\1\144\1\0\21\144\6\0\2\144\2\0\6\144\21\0"+
    "\14\144\1\u0159\1\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\21\0\16\144\4\0\1\144\1\0"+
    "\2\144\1\u015a\16\144\6\0\2\144\2\0\6\144\21\0"+
    "\11\144\1\u015b\4\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\21\0\1\144\1\317\14\144\4\0"+
    "\1\144\1\0\21\144\6\0\2\144\2\0\6\144\21\0"+
    "\16\144\4\0\1\144\1\0\2\144\1\u0155\16\144\6\0"+
    "\2\144\2\0\6\144\56\0\1\u015c\60\0\1\230\43\0"+
    "\1\230\31\0\16\144\4\0\1\144\1\0\1\144\1\u015d"+
    "\17\144\6\0\2\144\2\0\6\144\21\0\16\144\4\0"+
    "\1\144\1\0\10\144\1\u015e\10\144\6\0\2\144\2\0"+
    "\6\144\21\0\11\144\1\u015f\4\144\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\10\144\1\u0160"+
    "\5\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\16\144\4\0\1\144\1\0\4\144\1\u0161"+
    "\14\144\6\0\2\144\2\0\6\144\21\0\11\144\1\u0162"+
    "\4\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\11\144\1\u0163\4\144\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\11\144\1\u0164"+
    "\4\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\16\144\4\0\1\144\1\0\2\144\1\u0165"+
    "\16\144\6\0\2\144\2\0\6\144\21\0\1\144\1\u0166"+
    "\14\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\5\144\1\u0167\10\144\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\12\144\1\u0168"+
    "\3\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\15\144\1\u0169\4\0\1\144\1\0\21\144"+
    "\6\0\2\144\2\0\6\144\56\0\1\u016a\37\0\12\260"+
    "\1\u016b\14\260\2\0\55\260\11\0\16\176\4\0\12\176"+
    "\1\u016c\10\176\6\0\2\176\2\0\6\176\2\0\1\176"+
    "\16\0\11\176\1\u016d\4\176\4\0\23\176\6\0\2\176"+
    "\2\0\6\176\2\0\1\176\16\0\10\176\1\u016e\5\176"+
    "\4\0\23\176\6\0\2\176\2\0\6\176\2\0\1\176"+
    "\16\0\16\176\4\0\6\176\1\u016f\14\176\6\0\2\176"+
    "\2\0\6\176\2\0\1\176\16\0\16\176\4\0\4\176"+
    "\1\u0170\16\176\6\0\2\176\2\0\6\176\2\0\1\176"+
    "\16\0\1\176\1\u0171\14\176\4\0\23\176\6\0\2\176"+
    "\2\0\6\176\2\0\1\176\16\0\5\176\1\u0172\10\176"+
    "\4\0\23\176\6\0\2\176\2\0\6\176\2\0\1\176"+
    "\16\0\12\176\1\u0173\3\176\4\0\23\176\6\0\2\176"+
    "\2\0\6\176\2\0\1\176\16\0\15\176\1\u0174\4\0"+
    "\23\176\6\0\2\176\2\0\6\176\2\0\1\176\16\0"+
    "\16\144\4\0\1\144\1\0\7\144\1\u0175\11\144\6\0"+
    "\2\144\2\0\6\144\21\0\15\144\1\u0155\4\0\1\144"+
    "\1\0\21\144\6\0\2\144\2\0\6\144\21\0\4\144"+
    "\1\u0176\11\144\4\0\1\144\1\0\21\144\6\0\2\144"+
    "\2\0\6\144\21\0\3\144\1\u0177\12\144\4\0\1\144"+
    "\1\0\21\144\6\0\2\144\2\0\6\144\21\0\16\144"+
    "\4\0\1\144\1\0\7\144\1\u0178\11\144\6\0\2\144"+
    "\2\0\6\144\21\0\5\144\1\u0179\10\144\4\0\1\144"+
    "\1\0\21\144\6\0\2\144\2\0\6\144\21\0\11\144"+
    "\1\317\4\144\4\0\1\144\1\0\21\144\6\0\2\144"+
    "\2\0\6\144\21\0\16\144\4\0\1\144\1\0\2\144"+
    "\1\317\16\144\6\0\2\144\2\0\6\144\21\0\3\144"+
    "\1\u017a\12\144\4\0\1\144\1\0\21\144\6\0\2\144"+
    "\2\0\6\144\22\0\1\u017b\104\0\16\144\4\0\1\144"+
    "\1\0\20\144\1\u017c\6\0\2\144\2\0\6\144\21\0"+
    "\3\144\1\u017d\12\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\21\0\16\144\4\0\1\144\1\0"+
    "\2\144\1\u017e\16\144\6\0\2\144\2\0\6\144\21\0"+
    "\11\144\1\u017f\4\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\21\0\4\144\1\u0180\11\144\4\0"+
    "\1\144\1\0\21\144\6\0\2\144\2\0\6\144\21\0"+
    "\1\144\1\u0181\14\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\21\0\16\144\4\0\1\144\1\0"+
    "\2\144\1\u0162\16\144\6\0\2\144\2\0\6\144\21\0"+
    "\13\144\1\u0182\2\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\21\0\3\144\1\u0183\12\144\4\0"+
    "\1\144\1\0\21\144\6\0\2\144\2\0\6\144\21\0"+
    "\12\144\1\336\3\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\21\0\1\144\1\u0184\14\144\4\0"+
    "\1\144\1\0\21\144\6\0\2\144\2\0\6\144\21\0"+
    "\16\144\4\0\1\144\1\0\20\144\1\u0185\6\0\2\144"+
    "\2\0\6\144\21\0\1\144\1\344\14\144\4\0\1\144"+
    "\1\0\21\144\6\0\2\144\2\0\6\144\22\0\1\u0186"+
    "\73\0\26\260\1\u0187\2\0\55\260\11\0\3\176\1\u0188"+
    "\12\176\4\0\23\176\6\0\2\176\2\0\6\176\2\0"+
    "\1\176\16\0\16\176\4\0\4\176\1\u0189\16\176\6\0"+
    "\2\176\2\0\6\176\2\0\1\176\16\0\11\176\1\u018a"+
    "\4\176\4\0\23\176\6\0\2\176\2\0\6\176\2\0"+
    "\1\176\16\0\4\176\1\u018b\11\176\4\0\23\176\6\0"+
    "\2\176\2\0\6\176\2\0\1\176\16\0\3\176\1\u018c"+
    "\12\176\4\0\23\176\6\0\2\176\2\0\6\176\2\0"+
    "\1\176\16\0\12\176\1\362\3\176\4\0\23\176\6\0"+
    "\2\176\2\0\6\176\2\0\1\176\16\0\1\176\1\u018d"+
    "\14\176\4\0\23\176\6\0\2\176\2\0\6\176\2\0"+
    "\1\176\16\0\16\176\4\0\22\176\1\u018e\6\0\2\176"+
    "\2\0\6\176\2\0\1\176\16\0\1\176\1\367\14\176"+
    "\4\0\23\176\6\0\2\176\2\0\6\176\2\0\1\176"+
    "\16\0\12\144\1\u018f\3\144\4\0\1\144\1\0\21\144"+
    "\6\0\2\144\2\0\6\144\21\0\12\144\1\u0190\3\144"+
    "\4\0\1\144\1\0\21\144\6\0\2\144\2\0\6\144"+
    "\21\0\16\144\4\0\1\144\1\0\2\144\1\u0191\16\144"+
    "\6\0\2\144\2\0\6\144\21\0\16\144\4\0\1\144"+
    "\1\0\1\144\1\u0155\17\144\6\0\2\144\2\0\6\144"+
    "\21\0\16\144\4\0\1\144\1\0\20\144\1\u0192\6\0"+
    "\2\144\2\0\6\144\21\0\16\144\4\0\1\144\1\0"+
    "\7\144\1\u0193\11\144\6\0\2\144\2\0\6\144\36\0"+
    "\1\u0194\70\0\11\144\1\u0195\4\144\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\15\144\1\u0196"+
    "\4\0\1\144\1\0\21\144\6\0\2\144\2\0\6\144"+
    "\21\0\16\144\4\0\1\144\1\0\20\144\1\u0197\6\0"+
    "\2\144\2\0\6\144\21\0\12\144\1\u0198\3\144\4\0"+
    "\1\144\1\0\21\144\6\0\2\144\2\0\6\144\21\0"+
    "\11\144\1\u0199\4\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\21\0\16\144\4\0\1\144\1\0"+
    "\7\144\1\u019a\11\144\6\0\2\144\2\0\6\144\21\0"+
    "\4\144\1\u019b\11\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\21\0\16\144\4\0\1\144\1\0"+
    "\11\144\1\u019c\5\144\1\u0115\1\144\6\0\2\144\2\0"+
    "\6\144\21\0\16\144\4\0\1\144\1\0\14\144\1\u019d"+
    "\4\144\6\0\2\144\2\0\6\144\36\0\1\u019e\57\0"+
    "\10\260\1\u0187\16\260\2\u019e\1\u0187\27\260\1\u019f\1\260"+
    "\1\u0187\22\260\11\0\15\176\1\u01a0\4\0\23\176\6\0"+
    "\2\176\2\0\6\176\2\0\1\176\16\0\16\176\4\0"+
    "\22\176\1\u01a1\6\0\2\176\2\0\6\176\2\0\1\176"+
    "\16\0\12\176\1\u01a2\3\176\4\0\23\176\6\0\2\176"+
    "\2\0\6\176\2\0\1\176\16\0\11\176\1\u01a3\4\176"+
    "\4\0\23\176\6\0\2\176\2\0\6\176\2\0\1\176"+
    "\16\0\4\176\1\u01a4\11\176\4\0\23\176\6\0\2\176"+
    "\2\0\6\176\2\0\1\176\16\0\16\176\4\0\13\176"+
    "\1\u01a5\5\176\1\u0125\1\176\6\0\2\176\2\0\6\176"+
    "\2\0\1\176\16\0\16\176\4\0\16\176\1\u01a6\4\176"+
    "\6\0\2\176\2\0\6\176\2\0\1\176\16\0\1\144"+
    "\1\u01a7\14\144\4\0\1\144\1\0\21\144\6\0\2\144"+
    "\2\0\6\144\21\0\11\144\1\u01a8\4\144\4\0\1\144"+
    "\1\0\21\144\6\0\2\144\2\0\6\144\21\0\1\144"+
    "\1\u0155\14\144\4\0\1\144\1\0\21\144\6\0\2\144"+
    "\2\0\6\144\21\0\15\144\1\u0133\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\4\144\1\317"+
    "\11\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\20\0\1\u0194\16\0\3\u0194\27\0\1\u01a9\1\0"+
    "\1\u0194\33\0\16\144\4\0\1\144\1\0\7\144\1\u01aa"+
    "\11\144\6\0\2\144\2\0\6\144\21\0\14\144\1\336"+
    "\1\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\13\144\1\u01ab\2\144\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\14\144\1\u01ac"+
    "\1\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\15\144\1\u0181\4\0\1\144\1\0\21\144"+
    "\6\0\2\144\2\0\6\144\21\0\1\144\1\336\14\144"+
    "\4\0\1\144\1\0\21\144\6\0\2\144\2\0\6\144"+
    "\21\0\16\144\4\0\1\144\1\0\1\u01ad\20\144\6\0"+
    "\2\144\2\0\6\144\21\0\1\144\1\u01ae\14\144\4\0"+
    "\1\144\1\0\21\144\6\0\2\144\2\0\6\144\20\0"+
    "\1\u019e\16\0\3\u019e\27\0\1\u01af\1\0\1\u019e\22\0"+
    "\10\260\1\u019f\16\260\2\u01af\1\u019f\12\260\1\u01b0\16\260"+
    "\1\u019f\22\260\11\0\16\176\4\0\11\176\1\u01b1\11\176"+
    "\6\0\2\176\2\0\6\176\2\0\1\176\16\0\14\176"+
    "\1\362\1\176\4\0\23\176\6\0\2\176\2\0\6\176"+
    "\2\0\1\176\16\0\13\176\1\u01b2\2\176\4\0\23\176"+
    "\6\0\2\176\2\0\6\176\2\0\1\176\16\0\14\176"+
    "\1\u01b3\1\176\4\0\23\176\6\0\2\176\2\0\6\176"+
    "\2\0\1\176\16\0\1\176\1\362\14\176\4\0\23\176"+
    "\6\0\2\176\2\0\6\176\2\0\1\176\16\0\16\176"+
    "\4\0\2\176\1\u01b4\20\176\6\0\2\176\2\0\6\176"+
    "\2\0\1\176\16\0\1\176\1\u01b5\14\176\4\0\23\176"+
    "\6\0\2\176\2\0\6\176\2\0\1\176\16\0\5\144"+
    "\1\u01b6\10\144\4\0\1\144\1\0\21\144\6\0\2\144"+
    "\2\0\6\144\21\0\3\144\1\u01b7\12\144\4\0\1\144"+
    "\1\0\21\144\6\0\2\144\2\0\6\144\20\0\1\u01a9"+
    "\16\0\3\u01a9\12\0\1\u01b8\16\0\1\u01a9\33\0\4\144"+
    "\1\u01b9\11\144\4\0\1\144\1\0\21\144\6\0\2\144"+
    "\2\0\6\144\21\0\14\144\1\u01ba\1\144\4\0\1\144"+
    "\1\0\21\144\6\0\2\144\2\0\6\144\21\0\10\144"+
    "\1\u01bb\5\144\4\0\1\144\1\0\21\144\6\0\2\144"+
    "\2\0\6\144\21\0\10\144\1\u01bc\5\144\4\0\1\144"+
    "\1\0\21\144\6\0\2\144\2\0\6\144\21\0\4\144"+
    "\1\u01bd\11\144\4\0\1\144\1\0\21\144\6\0\2\144"+
    "\2\0\6\144\20\0\1\u01af\16\0\3\u01af\12\0\1\u01be"+
    "\16\0\1\u01af\22\0\20\260\1\u01bf\6\260\2\0\55\260"+
    "\11\0\4\176\1\u01c0\11\176\4\0\23\176\6\0\2\176"+
    "\2\0\6\176\2\0\1\176\16\0\14\176\1\u01c1\1\176"+
    "\4\0\23\176\6\0\2\176\2\0\6\176\2\0\1\176"+
    "\16\0\10\176\1\u01c2\5\176\4\0\23\176\6\0\2\176"+
    "\2\0\6\176\2\0\1\176\16\0\10\176\1\u01c3\5\176"+
    "\4\0\23\176\6\0\2\176\2\0\6\176\2\0\1\176"+
    "\16\0\4\176\1\u01c4\11\176\4\0\23\176\6\0\2\176"+
    "\2\0\6\176\2\0\1\176\16\0\16\144\4\0\1\144"+
    "\1\0\20\144\1\u01c5\6\0\2\144\2\0\6\144\21\0"+
    "\16\144\4\0\1\144\1\0\7\144\1\u01c6\11\144\6\0"+
    "\2\144\2\0\6\144\25\0\1\u01c7\101\0\16\144\4\0"+
    "\1\144\1\0\14\144\1\u01c8\4\144\6\0\2\144\2\0"+
    "\6\144\21\0\15\144\1\u01c9\4\0\1\144\1\0\21\144"+
    "\6\0\2\144\2\0\6\144\21\0\16\144\4\0\1\144"+
    "\1\0\5\144\1\u01ca\13\144\6\0\2\144\2\0\6\144"+
    "\21\0\16\144\4\0\1\144\1\0\1\144\1\u01cb\17\144"+
    "\6\0\2\144\2\0\6\144\21\0\11\144\1\u01cc\4\144"+
    "\4\0\1\144\1\0\21\144\6\0\2\144\2\0\6\144"+
    "\30\0\1\u01cd\65\0\20\260\1\u01ce\6\260\2\0\55\260"+
    "\11\0\16\176\4\0\16\176\1\u01cf\4\176\6\0\2\176"+
    "\2\0\6\176\2\0\1\176\16\0\15\176\1\u01d0\4\0"+
    "\23\176\6\0\2\176\2\0\6\176\2\0\1\176\16\0"+
    "\16\176\4\0\7\176\1\u01d1\13\176\6\0\2\176\2\0"+
    "\6\176\2\0\1\176\16\0\16\176\4\0\3\176\1\u01d2"+
    "\17\176\6\0\2\176\2\0\6\176\2\0\1\176\16\0"+
    "\11\176\1\u01d3\4\176\4\0\23\176\6\0\2\176\2\0"+
    "\6\176\2\0\1\176\16\0\15\144\1\u0191\4\0\1\144"+
    "\1\0\21\144\6\0\2\144\2\0\6\144\21\0\4\144"+
    "\1\u0155\11\144\4\0\1\144\1\0\21\144\6\0\2\144"+
    "\2\0\6\144\10\0\27\u01c7\2\0\55\u01c7\11\0\1\144"+
    "\1\u01d4\14\144\4\0\1\144\1\0\21\144\6\0\2\144"+
    "\2\0\6\144\10\0\11\u01d5\16\144\4\0\1\144\1\u01d5"+
    "\21\144\6\u01d5\2\144\2\u01d5\6\144\10\u01d5\11\0\4\144"+
    "\1\u01d6\11\144\4\0\1\144\1\0\21\144\6\0\2\144"+
    "\2\0\6\144\21\0\16\144\4\0\1\144\1\0\2\144"+
    "\1\u01d7\16\144\6\0\2\144\2\0\6\144\21\0\16\144"+
    "\4\0\1\144\1\0\1\u01d8\20\144\6\0\2\144\2\0"+
    "\6\144\30\0\1\u01ce\65\0\27\u01ce\2\0\55\u01ce\11\0"+
    "\1\176\1\u01d9\14\176\4\0\23\176\6\0\2\176\2\0"+
    "\6\176\2\0\1\176\5\0\11\u01d5\16\176\4\0\23\176"+
    "\6\u01d5\2\176\2\u01d5\6\176\2\u01d5\1\176\5\u01d5\11\0"+
    "\4\176\1\u01da\2\176\1\u01db\6\176\4\0\23\176\6\0"+
    "\2\176\2\0\6\176\2\0\1\176\16\0\16\176\4\0"+
    "\4\176\1\u01dc\16\176\6\0\2\176\2\0\6\176\2\0"+
    "\1\176\16\0\16\176\4\0\2\176\1\u01dd\20\176\6\0"+
    "\2\176\2\0\6\176\2\0\1\176\16\0\4\144\1\u01de"+
    "\11\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\16\144\4\0\1\144\1\0\6\144\1\u01df"+
    "\12\144\6\0\2\144\2\0\6\144\21\0\4\144\1\u01e0"+
    "\11\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\4\176\1\u01e1\11\176\4\0\23\176\6\0"+
    "\2\176\2\0\6\176\2\0\1\176\16\0\7\176\1\u01e2"+
    "\6\176\4\0\23\176\6\0\2\176\2\0\6\176\2\0"+
    "\1\176\16\0\16\176\4\0\10\176\1\u01e3\12\176\6\0"+
    "\2\176\2\0\6\176\2\0\1\176\16\0\4\176\1\u01e4"+
    "\11\176\4\0\23\176\6\0\2\176\2\0\6\176\2\0"+
    "\1\176\16\0\11\144\1\u01e5\4\144\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\14\144\1\u01e6"+
    "\1\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\16\144\4\0\1\144\1\0\10\144\1\u01e7"+
    "\10\144\6\0\2\144\2\0\6\144\21\0\11\176\1\u01e8"+
    "\4\176\4\0\23\176\6\0\2\176\2\0\6\176\2\0"+
    "\1\176\16\0\14\176\1\u01e9\1\176\4\0\23\176\6\0"+
    "\2\176\2\0\6\176\2\0\1\176\16\0\16\176\4\0"+
    "\12\176\1\u01ea\10\176\6\0\2\176\2\0\6\176\2\0"+
    "\1\176\16\0\12\144\1\u01eb\3\144\4\0\1\144\1\0"+
    "\21\144\6\0\2\144\2\0\6\144\21\0\3\144\1\u01ec"+
    "\12\144\4\0\1\144\1\0\21\144\6\0\2\144\2\0"+
    "\6\144\21\0\12\176\1\u01ed\3\176\4\0\23\176\6\0"+
    "\2\176\2\0\6\176\2\0\1\176\16\0\3\176\1\u01ee"+
    "\12\176\4\0\23\176\6\0\2\176\2\0\6\176\2\0"+
    "\1\176\16\0\16\144\4\0\1\144\1\0\12\144\1\u01ef"+
    "\6\144\6\0\2\144\2\0\6\144\21\0\15\144\1\u01f0"+
    "\4\0\1\144\1\0\21\144\6\0\2\144\2\0\6\144"+
    "\21\0\16\176\4\0\14\176\1\u01f1\6\176\6\0\2\176"+
    "\2\0\6\176\2\0\1\176\16\0\15\176\1\u01f2\4\0"+
    "\23\176\6\0\2\176\2\0\6\176\2\0\1\176\16\0"+
    "\14\144\1\u01f3\1\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\21\0\16\144\4\0\1\144\1\0"+
    "\7\144\1\u01f4\11\144\6\0\2\144\2\0\6\144\21\0"+
    "\14\176\1\u01f5\1\176\4\0\23\176\6\0\2\176\2\0"+
    "\6\176\2\0\1\176\16\0\16\176\4\0\11\176\1\u01f6"+
    "\11\176\6\0\2\176\2\0\6\176\2\0\1\176\16\0"+
    "\2\144\1\u01f7\13\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\21\0\4\144\1\u01f8\11\144\4\0"+
    "\1\144\1\0\21\144\6\0\2\144\2\0\6\144\21\0"+
    "\2\176\1\u01f9\13\176\4\0\23\176\6\0\2\176\2\0"+
    "\6\176\2\0\1\176\16\0\4\176\1\u01fa\11\176\4\0"+
    "\23\176\6\0\2\176\2\0\6\176\2\0\1\176\16\0"+
    "\1\144\1\u01d6\14\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\21\0\16\144\4\0\1\144\1\0"+
    "\14\144\1\u01fb\4\144\6\0\2\144\2\0\6\144\21\0"+
    "\1\176\1\u01da\14\176\4\0\23\176\6\0\2\176\2\0"+
    "\6\176\2\0\1\176\16\0\16\176\4\0\16\176\1\u01fc"+
    "\4\176\6\0\2\176\2\0\6\176\2\0\1\176\16\0"+
    "\1\144\1\u01fd\14\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\21\0\1\176\1\u01fe\14\176\4\0"+
    "\23\176\6\0\2\176\2\0\6\176\2\0\1\176\16\0"+
    "\4\144\1\u01ff\11\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\21\0\4\176\1\u0200\11\176\4\0"+
    "\23\176\6\0\2\176\2\0\6\176\2\0\1\176\16\0"+
    "\11\144\1\u0201\4\144\4\0\1\144\1\0\21\144\6\0"+
    "\2\144\2\0\6\144\21\0\11\176\1\u0202\4\176\4\0"+
    "\23\176\6\0\2\176\2\0\6\176\2\0\1\176\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[30590];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\34\0\2\1\6\11\1\1\1\11\3\1\2\11\1\1"+
    "\1\11\1\1\4\11\1\1\1\11\3\1\2\11\1\1"+
    "\4\11\1\1\6\11\1\1\11\11\1\1\5\11\1\1"+
    "\2\11\2\1\1\11\3\1\3\11\21\1\1\11\2\0"+
    "\4\1\1\11\1\1\2\11\17\1\2\0\11\1\2\0"+
    "\24\1\1\0\1\11\1\1\1\0\24\1\2\0\13\1"+
    "\2\0\21\1\2\0\21\1\1\0\1\11\12\1\2\0"+
    "\21\1\1\0\16\1\1\0\15\1\2\0\14\1\1\11"+
    "\2\1\1\0\12\1\1\11\12\1\1\0\15\1\1\0"+
    "\20\1\1\0\12\1\1\0\15\1\1\0\11\1\1\0"+
    "\12\1\1\0\5\1\1\0\10\1\1\0\5\1\1\0"+
    "\16\1\1\0\7\1\1\11\55\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[514];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Deque<Integer> stack = new ArrayDeque<>();


  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }


  public LatexLexer() {
    this((java.io.Reader)null);
  }

  /**
   * In order to avoid a parsing error for new environment definitions, this keeps track of the number of braces in the \newenvironment
   * parameters, so as to know when the parameters are exited.
   */
  private int newEnvironmentBracesNesting = 0;

  /**
   * Also keep track of brackets of verbatim environment optional arguments.
   */
  private int verbatimOptionalArgumentBracketsCount = 0;

  /**
   * Keep track of braces in the PARTIAL_DEFINITION state.
   * We need to count braces in order to avoid exiting the state too early, especially in case of entering this state incorrectly
   * (for example because someone has >{ in their text for whatever reason).
   */
  private int preambleOptionBracesCount = 0;

  /**
   * Remember the delimiter that inline verbatim started with, to check when to end it.
   */
  private String verbatim_delimiter = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 85: break;
          case 2: 
            { return BACKSLASH;
            } 
            // fall through
          case 86: break;
          case 3: 
            { return OPEN_PAREN;
            } 
            // fall through
          case 87: break;
          case 4: 
            { return CLOSE_PAREN;
            } 
            // fall through
          case 88: break;
          case 5: 
            { return OPEN_BRACKET;
            } 
            // fall through
          case 89: break;
          case 6: 
            { return CLOSE_BRACKET;
            } 
            // fall through
          case 90: break;
          case 7: 
            { return OPEN_BRACE;
            } 
            // fall through
          case 91: break;
          case 8: 
            { return CLOSE_BRACE;
            } 
            // fall through
          case 92: break;
          case 9: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 93: break;
          case 10: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 94: break;
          case 11: 
            { return STAR;
            } 
            // fall through
          case 95: break;
          case 12: 
            { return OPEN_ANGLE_BRACKET;
            } 
            // fall through
          case 96: break;
          case 13: 
            { return CLOSE_ANGLE_BRACKET;
            } 
            // fall through
          case 97: break;
          case 14: 
            { return EQUALS;
            } 
            // fall through
          case 98: break;
          case 15: 
            { return EXCLAMATION_MARK;
            } 
            // fall through
          case 99: break;
          case 16: 
            { return COMMENT_TOKEN;
            } 
            // fall through
          case 100: break;
          case 17: 
            { yypushState(INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 101: break;
          case 18: 
            { return DASH;
            } 
            // fall through
          case 102: break;
          case 19: 
            { return AMPERSAND;
            } 
            // fall through
          case 103: break;
          case 20: 
            { return COMMA;
            } 
            // fall through
          case 104: break;
          case 21: 
            { return QUOTATION_MARK;
            } 
            // fall through
          case 105: break;
          case 22: 
            { return PIPE;
            } 
            // fall through
          case 106: break;
          case 23: 
            { yypopState(); return INLINE_MATH_END;
            } 
            // fall through
          case 107: break;
          case 24: 
            { yypopState(); return CLOSE_BRACE;
            } 
            // fall through
          case 108: break;
          case 25: 
            { yypushState(NESTED_INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 109: break;
          case 26: 
            { preambleOptionBracesCount++; return OPEN_BRACE;
            } 
            // fall through
          case 110: break;
          case 27: 
            { if (preambleOptionBracesCount == 0) {
          yypopState();
        }
        else {
            preambleOptionBracesCount--;
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 111: break;
          case 28: 
            { yypopState();
          newEnvironmentBracesNesting = 0;
          yypushState(NEW_ENVIRONMENT_DEFINITION);
          return CLOSE_BRACE;
            } 
            // fall through
          case 112: break;
          case 29: 
            { newEnvironmentBracesNesting++; return OPEN_BRACE;
            } 
            // fall through
          case 113: break;
          case 30: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState(); yypushState(NEW_ENVIRONMENT_SKIP_BRACE);
            // We could have returned normal text, but in this way the braces still match
            return OPEN_BRACE;
        } else {
            return CLOSE_BRACE;
        }
            } 
            // fall through
          case 114: break;
          case 31: 
            { yypopState(); newEnvironmentBracesNesting = 1; yypushState(NEW_ENVIRONMENT_DEFINITION_END); return CLOSE_BRACE;
            } 
            // fall through
          case 115: break;
          case 32: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState();
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 116: break;
          case 33: 
            { yypopState(); yypushState(NEW_DOCUMENT_ENV_DEFINITION_ARGS_SPEC); newEnvironmentBracesNesting = 0; return CLOSE_BRACE;
            } 
            // fall through
          case 117: break;
          case 34: 
            { newEnvironmentBracesNesting--;
        if (newEnvironmentBracesNesting <= 0) {
            yypopState();
            yypushState(NEW_ENVIRONMENT_DEFINITION);
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 118: break;
          case 35: 
            { yypopState(); verbatim_delimiter = yytext().toString(); yypushState(INLINE_VERBATIM); return OPEN_BRACE;
            } 
            // fall through
          case 119: break;
          case 36: 
            { yypopState(); return BACKSLASH;
            } 
            // fall through
          case 120: break;
          case 37: 
            { yypopState(); return OPEN_PAREN;
            } 
            // fall through
          case 121: break;
          case 38: 
            { yypopState(); return OPEN_BRACKET;
            } 
            // fall through
          case 122: break;
          case 39: 
            { yypopState(); return CLOSE_BRACKET;
            } 
            // fall through
          case 123: break;
          case 40: 
            { yypopState(); return OPEN_BRACE;
            } 
            // fall through
          case 124: break;
          case 41: 
            { if(yytext().toString().equals(verbatim_delimiter)) { yypopState(); return CLOSE_BRACE; } else { return RAW_TEXT_TOKEN; }
            } 
            // fall through
          case 125: break;
          case 42: 
            { yypopState(); yypushState(INLINE_VERBATIM_OPTIONAL_ARG); verbatimOptionalArgumentBracketsCount = 1; return OPEN_BRACKET;
            } 
            // fall through
          case 126: break;
          case 43: 
            { yypopState(); verbatim_delimiter = "}"; yypushState(INLINE_VERBATIM); return OPEN_BRACE;
            } 
            // fall through
          case 127: break;
          case 44: 
            { yypopState();
            // toString to fix comparisons of charsequence subsequences with string
            if (EnvironmentMagic.verbatim.contains(yytext().toString())) {
                yypushState(VERBATIM_START);
            }
            else if (yytext().toString().equals("algorithmic")) {
                yypushState(PSEUDOCODE);
            }
            return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 128: break;
          case 45: 
            { verbatimOptionalArgumentBracketsCount++; return OPEN_BRACKET;
            } 
            // fall through
          case 129: break;
          case 46: 
            { verbatimOptionalArgumentBracketsCount--;
        if (verbatimOptionalArgumentBracketsCount == 0) { yypopState(); yypushState(VERBATIM); }
        return CLOSE_BRACKET;
            } 
            // fall through
          case 130: break;
          case 47: 
            { yypopState(); yypushState(POSSIBLE_VERBATIM_OPTIONAL_ARG); return CLOSE_BRACE;
            } 
            // fall through
          case 131: break;
          case 48: 
            { verbatimOptionalArgumentBracketsCount--;
            if (verbatimOptionalArgumentBracketsCount == 0) { yypopState(); yypushState(INLINE_VERBATIM_NORMAL_START); }
            return CLOSE_BRACKET;
            } 
            // fall through
          case 132: break;
          case 49: 
            { return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 133: break;
          case 50: 
            { yypopState(); yypushState(VERBATIM); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 134: break;
          case 51: 
            { verbatimOptionalArgumentBracketsCount = 1; yypopState(); yypushState(VERBATIM_OPTIONAL_ARG); return OPEN_BRACKET;
            } 
            // fall through
          case 135: break;
          case 52: 
            { yypopState(); yypushState(VERBATIM); return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 136: break;
          case 53: 
            { // Pop current state
        yypopState();
        if (EnvironmentMagic.verbatim.contains(yytext().toString())) {
            // Pop verbatim state
            yypopState();
            return NORMAL_TEXT_WORD;
        }
        return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 137: break;
          case 54: 
            { yypopState(); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 138: break;
          case 55: 
            { yypopState();
        if (yytext().toString().equals("algorithmic")) {
            // Pop pseudocode state
            yypopState();
        }
        return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 139: break;
          case 56: 
            { return COMMAND_TOKEN;
            } 
            // fall through
          case 140: break;
          case 57: 
            { yypushState(INLINE_MATH_LATEX); return INLINE_MATH_START;
            } 
            // fall through
          case 141: break;
          case 58: 
            { yypushState(DISPLAY_MATH); return DISPLAY_MATH_START;
            } 
            // fall through
          case 142: break;
          case 59: 
            { yypushState(PARTIAL_DEFINITION); preambleOptionBracesCount = 0; return OPEN_BRACE;
            } 
            // fall through
          case 143: break;
          case 60: 
            { return MAGIC_COMMENT_TOKEN;
            } 
            // fall through
          case 144: break;
          case 61: 
            { yypopState(); return DISPLAY_MATH_END;
            } 
            // fall through
          case 145: break;
          case 62: 
            { return DISPLAY_MATH_START;
            } 
            // fall through
          case 146: break;
          case 63: 
            { return DISPLAY_MATH_END;
            } 
            // fall through
          case 147: break;
          case 64: 
            { yypushState(INLINE_VERBATIM_NORMAL_START); return COMMAND_TOKEN;
            } 
            // fall through
          case 148: break;
          case 65: 
            { return ANGLE_PARAM;
            } 
            // fall through
          case 149: break;
          case 66: 
            { return BEGIN_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 150: break;
          case 67: 
            { return END_TOKEN;
            } 
            // fall through
          case 151: break;
          case 68: 
            { yypushState(POSSIBLE_VERBATIM_END); return END_TOKEN;
            } 
            // fall through
          case 152: break;
          case 69: 
            { yypushState(POSSIBLE_PSEUDOCODE_END); return END_TOKEN;
            } 
            // fall through
          case 153: break;
          case 70: 
            { yypushState(INLINE_VERBATIM_PLAIN_START); return COMMAND_TOKEN;
            } 
            // fall through
          case 154: break;
          case 71: 
            { yypushState(OFF); return COMMENT_TOKEN;
            } 
            // fall through
          case 155: break;
          case 72: 
            { yypushState(TEXT_INSIDE_INLINE_MATH); return COMMAND_TOKEN;
            } 
            // fall through
          case 156: break;
          case 73: 
            { return MIDDLE_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 157: break;
          case 74: 
            { yypushState(POSSIBLE_VERBATIM_BEGIN); return BEGIN_TOKEN;
            } 
            // fall through
          case 158: break;
          case 75: 
            { return BEGIN_TOKEN;
            } 
            // fall through
          case 159: break;
          case 76: 
            { return END_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 160: break;
          case 77: 
            { yypushState(PARTIAL_DEFINITION); preambleOptionBracesCount = -1; return COMMAND_TOKEN;
            } 
            // fall through
          case 161: break;
          case 78: 
            { yypushState(OFF); return COMMAND_TOKEN;
            } 
            // fall through
          case 162: break;
          case 79: 
            { yypopState(); return COMMENT_TOKEN;
            } 
            // fall through
          case 163: break;
          case 80: 
            { return COMMAND_IFNEXTCHAR;
            } 
            // fall through
          case 164: break;
          case 81: 
            { yypushState(LATEX3); return COMMAND_TOKEN;
            } 
            // fall through
          case 165: break;
          case 82: 
            { yypopState(); return COMMAND_TOKEN;
            } 
            // fall through
          case 166: break;
          case 83: 
            { yypushState(NEW_ENVIRONMENT_DEFINITION_NAME); return COMMAND_TOKEN;
            } 
            // fall through
          case 167: break;
          case 84: 
            { yypushState(NEW_DOCUMENT_ENV_DEFINITION_NAME); return COMMAND_TOKEN;
            } 
            // fall through
          case 168: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
