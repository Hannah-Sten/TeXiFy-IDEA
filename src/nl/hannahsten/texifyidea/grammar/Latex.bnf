{
    parserClass="nl.hannahsten.texifyidea.parser.LatexParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Latex"
    psiImplClassSuffix="Impl"
    psiPackage="nl.hannahsten.texifyidea.psi"
    psiImplPackage="nl.hannahsten.texifyidea.psi.impl"
    psiImplUtilClass="nl.hannahsten.texifyidea.psi.LatexPsiImplUtil"

    elementTypeHolderClass="nl.hannahsten.texifyidea.psi.LatexTypes"
    elementTypeClass="nl.hannahsten.texifyidea.psi.LatexElementType"
    tokenTypeClass="nl.hannahsten.texifyidea.psi.LatexTokenType"

    extends("commands")="com.intellij.extapi.psi.StubBasedPsiElementBase<nl.hannahsten.texifyidea.index.stub.LatexCommandsStub>"
    implements("commands")="com.intellij.psi.PsiNameIdentifierOwner"

    extends("environment")="com.intellij.extapi.psi.StubBasedPsiElementBase<nl.hannahsten.texifyidea.index.stub.LatexEnvironmentStub>"
    implements("environment")="com.intellij.psi.PsiLanguageInjectionHost"

    tokens=[
        WHITE_SPACE='regexp:\s+'
        DISPLAY_MATH_START='\['
        DISPLAY_MATH_END='\]'
        INLINE_MATH_START='regexp:($|\\\()'
        INLINE_MATH_END='regexp:($|\\\))'
        BEGIN_TOKEN='\begin'
        END_TOKEN='\end'
        COMMAND_TOKEN='regexp:\\([a-zA-Z@]+|.|\n|\r)'
        COMMENT_TOKEN='regexp:%[^\r\n]*'
        STAR='*'
        NORMAL_TEXT_WORD='regexp:[^\s\\{}%\[\]$\(\)]+'
    ]
}



latexFile ::= content*

content ::= no_math_content

no_math_content ::= comment | environment | math_environment | commands | group | open_group | OPEN_PAREN | CLOSE_PAREN | M_OPEN_BRACKET | M_CLOSE_BRACKET | normal_text

normal_text ::= (NORMAL_TEXT_WORD | STAR)+

environment ::= begin_command environment_content? end_command {
    pin=1
    elementTypeClass="nl.hannahsten.texifyidea.index.stub.LatexEnvironmentStubElementType"
    stubClass="nl.hannahsten.texifyidea.index.stub.LatexEnvironmentStub"
    methods=[getEnvironmentName getLabel isValidHost updateText createLiteralTextEscaper]
 }

environment_content ::= content+

commands ::= COMMAND_TOKEN STAR? parameter* {
    pin=1
    elementTypeClass="nl.hannahsten.texifyidea.index.stub.LatexCommandsStubElementType"
    stubClass="nl.hannahsten.texifyidea.index.stub.LatexCommandsStub"
    mixin="nl.hannahsten.texifyidea.psi.LatexCommandsImplMixin"
    methods=[getReferences getReference getOptionalParameters getRequiredParameters hasLabel getTextOffset getName]
}

begin_command ::= BEGIN_TOKEN STAR? parameter* {
    pin=1
    methods=[getOptionalParameters getRequiredParameters]
}

end_command ::= END_TOKEN STAR? parameter* { pin=1 }

parameter ::= optional_param | required_param

optional_param ::= open_group

required_param ::= group

group ::= OPEN_BRACE content* CLOSE_BRACE { pin=1 }

open_group ::= OPEN_BRACKET content* CLOSE_BRACKET { pin=1 }

comment ::= COMMENT_TOKEN

math_environment ::= inline_math | display_math

inline_math ::= INLINE_MATH_START math_content? INLINE_MATH_END { pin=1 }

display_math ::= DISPLAY_MATH_START math_content? DISPLAY_MATH_END { pin=1 }

math_content ::= no_math_content+
