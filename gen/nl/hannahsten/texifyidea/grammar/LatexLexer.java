/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package nl.hannahsten.texifyidea.grammar;

import java.util.*;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import nl.hannahsten.texifyidea.util.magic.EnvironmentMagic;

import static nl.hannahsten.texifyidea.psi.LatexTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LatexLexer.flex</tt>
 */
public class LatexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INLINE_MATH = 2;
  public static final int INLINE_MATH_LATEX = 4;
  public static final int DISPLAY_MATH = 6;
  public static final int TEXT_INSIDE_INLINE_MATH = 8;
  public static final int NESTED_INLINE_MATH = 10;
  public static final int PARTIAL_DEFINITION = 12;
  public static final int NEW_ENVIRONMENT_DEFINITION_NAME = 14;
  public static final int NEW_ENVIRONMENT_DEFINITION = 16;
  public static final int NEW_ENVIRONMENT_SKIP_BRACE = 18;
  public static final int NEW_ENVIRONMENT_DEFINITION_END = 20;
  public static final int NEW_DOCUMENT_ENV_DEFINITION_NAME = 22;
  public static final int NEW_DOCUMENT_ENV_DEFINITION_ARGS_SPEC = 24;
  public static final int LATEX3 = 26;
  public static final int INLINE_VERBATIM_START = 28;
  public static final int INLINE_VERBATIM = 30;
  public static final int POSSIBLE_VERBATIM_BEGIN = 32;
  public static final int VERBATIM_OPTIONAL_ARG = 34;
  public static final int VERBATIM_START = 36;
  public static final int VERBATIM_END = 38;
  public static final int INLINE_VERBATIM_OPTIONAL_ARG = 40;
  public static final int VERBATIM = 42;
  public static final int POSSIBLE_VERBATIM_OPTIONAL_ARG = 44;
  public static final int POSSIBLE_VERBATIM_END = 46;
  public static final int PSEUDOCODE = 48;
  public static final int POSSIBLE_PSEUDOCODE_END = 50;
  public static final int OFF = 52;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\10\1\27\2\31\1\30\22\0\1\60\1\57\1\101\1\0\1\74\1\63\1\77\1\0\1\2"+
    "\1\3\1\56\1\0\1\100\1\103\2\0\13\34\1\0\1\75\1\64\1\76\1\0\1\17\1\67\2\33"+
    "\1\54\1\35\1\66\2\33\1\70\2\33\1\72\1\33\1\52\1\42\1\43\1\33\1\53\1\40\1\61"+
    "\1\73\1\33\1\71\1\62\2\33\1\4\1\1\1\5\1\0\1\34\1\0\1\25\1\11\1\23\1\16\1\12"+
    "\1\20\1\13\1\24\1\14\1\33\1\47\1\37\1\51\1\15\1\44\1\36\1\33\1\26\1\46\1\22"+
    "\1\55\1\45\1\50\1\21\1\41\1\33\1\6\1\102\1\7\7\0\1\32\32\0\1\65\337\0\1\65"+
    "\177\0\13\65\35\0\2\32\5\0\1\65\57\0\1\65\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\2"+
    "\1\27\3\2\1\30\1\31\1\2\1\32\1\33\1\1"+
    "\1\34\1\2\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\2\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\2\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\2\1\64\1\56\1\65\1\66\1\67"+
    "\21\65\1\15\1\70\1\15\1\71\1\65\1\72\1\73"+
    "\1\74\17\65\2\0\11\65\2\0\12\65\1\75\11\65"+
    "\1\70\1\0\1\70\1\15\10\65\1\75\10\65\2\0"+
    "\7\65\1\76\3\65\2\0\1\65\1\77\7\65\1\75"+
    "\7\65\1\0\1\70\1\15\7\65\1\75\6\65\1\0"+
    "\1\100\1\101\4\65\1\76\4\65\2\0\13\65\1\75"+
    "\2\65\1\0\1\70\1\15\1\102\7\65\1\75\2\65"+
    "\1\0\5\65\1\103\7\65\2\0\1\104\12\65\1\75"+
    "\2\65\1\0\1\70\11\65\1\105\3\65\1\106\6\65"+
    "\1\0\14\65\1\0\1\70\17\65\1\0\4\65\1\107"+
    "\4\65\1\0\1\70\14\65\1\0\10\65\1\0\1\70"+
    "\11\65\1\0\5\65\1\0\1\70\7\65\1\0\5\65"+
    "\1\0\1\70\7\65\1\110\5\65\1\0\1\111\6\65"+
    "\1\112\1\113\3\65\1\113\7\65\1\114\2\65\1\115"+
    "\2\65\1\115\30\65\2\116";

  private static int [] zzUnpackAction() {
    int [] result = new int[494];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07b4\0\u07b4"+
    "\0\u07b4\0\u07b4\0\u07b4\0\u07f8\0\u07b4\0\u072c\0\u07b4\0\u083c"+
    "\0\u07b4\0\u07b4\0\u0880\0\u0880\0\u07b4\0\u07b4\0\u07b4\0\u07b4"+
    "\0\u08c4\0\u0908\0\u07b4\0\u094c\0\u0990\0\u09d4\0\u07b4\0\u07b4"+
    "\0\u0a18\0\u07b4\0\u07b4\0\u07b4\0\u07b4\0\u0a5c\0\u07b4\0\u07b4"+
    "\0\u07b4\0\u07b4\0\u07b4\0\u07b4\0\u0aa0\0\u07b4\0\u07b4\0\u07b4"+
    "\0\u07b4\0\u07b4\0\u07b4\0\u0ae4\0\u07b4\0\u07b4\0\u07b4\0\u07b4"+
    "\0\u07b4\0\u0b28\0\u07b4\0\u07b4\0\u0b6c\0\u0bb0\0\u07b4\0\u0bf4"+
    "\0\u0c38\0\u0c7c\0\u07b4\0\u07b4\0\u07b4\0\u0cc0\0\u0d04\0\u0d48"+
    "\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68"+
    "\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188"+
    "\0\u11cc\0\u07b4\0\u1210\0\u07b4\0\u07b4\0\u07b4\0\u1254\0\u1298"+
    "\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8"+
    "\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8"+
    "\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8"+
    "\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18"+
    "\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38"+
    "\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58"+
    "\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178"+
    "\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398"+
    "\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8"+
    "\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u0d48\0\u270c\0\u2750\0\u2794"+
    "\0\u27d8\0\u281c\0\u2860\0\u0d48\0\u28a4\0\u28e8\0\u292c\0\u2970"+
    "\0\u29b4\0\u29f8\0\u2a3c\0\u0d48\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c"+
    "\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c"+
    "\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u1254\0\u2f04\0\u2f48"+
    "\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u07b4\0\u0d48\0\u30e0"+
    "\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u3300"+
    "\0\u3344\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc\0\u3520"+
    "\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc\0\u3740"+
    "\0\u3784\0\u37c8\0\u380c\0\u0d48\0\u3850\0\u3894\0\u38d8\0\u391c"+
    "\0\u3960\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c"+
    "\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c\0\u0d48\0\u3c90\0\u3cd4\0\u3d18"+
    "\0\u3d5c\0\u3da0\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0\0\u0d48\0\u3ef4"+
    "\0\u3f38\0\u3f7c\0\u3fc0\0\u4004\0\u4048\0\u408c\0\u40d0\0\u4114"+
    "\0\u4158\0\u07b4\0\u419c\0\u41e0\0\u4224\0\u4268\0\u42ac\0\u42f0"+
    "\0\u4334\0\u4378\0\u43bc\0\u4400\0\u4444\0\u4488\0\u44cc\0\u07b4"+
    "\0\u4510\0\u4554\0\u4598\0\u0d48\0\u45dc\0\u4620\0\u4664\0\u46a8"+
    "\0\u46ec\0\u4730\0\u4774\0\u47b8\0\u47fc\0\u4840\0\u4884\0\u48c8"+
    "\0\u490c\0\u4950\0\u4994\0\u49d8\0\u4a1c\0\u4a60\0\u4aa4\0\u4ae8"+
    "\0\u4b2c\0\u4b70\0\u4bb4\0\u4bf8\0\u4c3c\0\u4c80\0\u4cc4\0\u4d08"+
    "\0\u4d4c\0\u4d90\0\u4dd4\0\u4e18\0\u4e5c\0\u4ea0\0\u4ee4\0\u4f28"+
    "\0\u4f6c\0\u4fb0\0\u4ff4\0\u5038\0\u507c\0\u0d48\0\u50c0\0\u5104"+
    "\0\u5148\0\u518c\0\u51d0\0\u5214\0\u5258\0\u529c\0\u52e0\0\u5324"+
    "\0\u5368\0\u53ac\0\u53f0\0\u5434\0\u5478\0\u54bc\0\u5500\0\u5544"+
    "\0\u5588\0\u55cc\0\u5610\0\u5654\0\u5698\0\u56dc\0\u5720\0\u5764"+
    "\0\u57a8\0\u57ec\0\u5830\0\u5874\0\u58b8\0\u58fc\0\u5940\0\u5984"+
    "\0\u59c8\0\u5a0c\0\u5a50\0\u5a94\0\u5ad8\0\u5b1c\0\u5b60\0\u5ba4"+
    "\0\u5be8\0\u5c2c\0\u5c70\0\u5cb4\0\u5cf8\0\u5d3c\0\u5d80\0\u5dc4"+
    "\0\u5e08\0\u5e4c\0\u5e90\0\u5ed4\0\u5f18\0\u5f5c\0\u5fa0\0\u5fe4"+
    "\0\u6028\0\u606c\0\u60b0\0\u60f4\0\u6138\0\u617c\0\u61c0\0\u6204"+
    "\0\u6248\0\u628c\0\u62d0\0\u6314\0\u6358\0\u639c\0\u63e0\0\u6424"+
    "\0\u6468\0\u64ac\0\u64f0\0\u6534\0\u6578\0\u65bc\0\u6600\0\u6644"+
    "\0\u07b4\0\u0d48\0\u6688\0\u66cc\0\u6710\0\u1254\0\u6754\0\u6798"+
    "\0\u67dc\0\u6820\0\u6864\0\u68a8\0\u68ec\0\u1254\0\u6930\0\u6974"+
    "\0\u0d48\0\u69b8\0\u69fc\0\u1254\0\u6a40\0\u6a84\0\u6ac8\0\u6b0c"+
    "\0\u6b50\0\u6b94\0\u6bd8\0\u6c1c\0\u6c60\0\u6ca4\0\u6ce8\0\u6d2c"+
    "\0\u6d70\0\u6db4\0\u6df8\0\u6e3c\0\u6e80\0\u6ec4\0\u6f08\0\u6f4c"+
    "\0\u6f90\0\u6fd4\0\u7018\0\u705c\0\u0d48\0\u1254";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[494];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\16\34\3\44\1\45\23\34\1\46\1\47\1\44"+
    "\2\34\1\50\1\51\1\45\6\34\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\34\1\62\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\16\34\3\44"+
    "\1\45\23\34\1\46\1\47\1\44\2\34\1\50\1\51"+
    "\1\45\6\34\1\63\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\34\1\64\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\16\34\3\44\1\45\23\34\1\46"+
    "\1\47\1\44\2\34\1\50\1\51\1\45\6\34\1\45"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\34"+
    "\1\65\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\16\34\3\44\1\45\23\34\1\46\1\47\1\44\2\34"+
    "\1\50\1\51\1\45\6\34\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\34\1\66\1\36\1\37"+
    "\1\40\1\41\1\42\1\67\1\44\16\34\3\44\1\45"+
    "\23\34\1\46\1\47\1\44\2\34\1\50\1\51\1\45"+
    "\6\34\1\70\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\34\1\66\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\16\34\3\44\1\45\23\34\1\46\1\47"+
    "\1\44\2\34\1\50\1\51\1\45\6\34\1\63\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\34\1\71"+
    "\1\36\1\37\1\40\1\41\1\72\1\73\1\44\16\34"+
    "\3\44\1\45\23\34\1\46\1\47\1\44\2\34\1\50"+
    "\1\51\1\45\6\34\1\74\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\34\1\66\1\36\1\37\1\40"+
    "\1\41\1\42\1\75\1\44\16\34\3\44\1\45\23\34"+
    "\1\46\1\47\1\44\2\34\1\50\1\51\1\45\6\34"+
    "\1\45\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\34\1\76\1\36\1\37\1\40\1\41\1\77\1\100"+
    "\1\44\16\34\3\44\1\45\23\34\1\46\1\47\1\44"+
    "\2\34\1\50\1\51\1\45\6\34\1\74\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\34\1\66\1\36"+
    "\1\37\1\40\1\41\1\101\1\43\1\44\16\34\3\44"+
    "\1\45\23\34\1\46\1\47\1\44\2\34\1\50\1\51"+
    "\1\45\6\34\1\45\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\34\1\76\1\36\1\37\1\40\1\41"+
    "\1\77\1\102\1\44\16\34\3\44\1\45\23\34\1\46"+
    "\1\47\1\44\2\34\1\50\1\51\1\45\6\34\1\74"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\34"+
    "\1\66\1\36\1\37\1\40\1\41\1\42\1\103\1\44"+
    "\16\34\3\44\1\45\23\34\1\46\1\47\1\44\2\34"+
    "\1\50\1\51\1\45\6\34\1\45\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\34\1\66\1\36\1\37"+
    "\1\40\1\41\1\77\1\104\1\44\16\34\3\44\1\45"+
    "\23\34\1\46\1\47\1\44\2\34\1\50\1\51\1\45"+
    "\6\34\1\45\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\34\1\105\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\16\34\3\44\1\45\23\34\1\46\1\47"+
    "\1\44\2\34\1\50\1\51\1\45\6\34\1\45\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\106\1\107"+
    "\2\106\1\110\1\111\1\112\1\67\74\106\104\113\1\114"+
    "\1\76\1\36\1\37\1\40\1\41\1\77\1\67\1\44"+
    "\16\114\3\44\1\45\24\114\1\47\1\44\2\114\1\50"+
    "\1\51\1\45\6\114\1\74\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\34\1\66\1\36\1\37\1\115"+
    "\1\116\1\42\1\43\1\44\16\34\3\44\1\45\23\34"+
    "\1\46\1\47\1\44\2\34\1\50\1\51\1\45\6\34"+
    "\1\45\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\34\1\66\1\36\1\37\1\40\1\41\1\42\1\117"+
    "\1\44\16\34\3\44\1\45\23\34\1\46\1\47\1\44"+
    "\2\34\1\50\1\51\1\45\6\34\1\45\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\34\1\66\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\16\34\3\44"+
    "\1\45\23\34\1\46\1\47\1\44\2\34\1\50\1\51"+
    "\1\45\6\34\1\45\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\34\1\66\1\36\1\37\1\115\1\120"+
    "\1\42\1\43\1\44\16\34\3\44\1\45\23\34\1\46"+
    "\1\47\1\44\2\34\1\50\1\51\1\45\6\34\1\45"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\121"+
    "\1\122\6\121\1\44\16\121\3\44\26\121\1\44\23\121"+
    "\4\123\1\124\3\123\1\125\16\123\3\125\26\123\1\125"+
    "\23\123\1\126\5\127\1\42\2\127\16\126\4\127\24\126"+
    "\2\127\2\126\3\127\6\126\10\127\1\34\1\130\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\16\34\3\44"+
    "\1\45\23\34\1\46\1\47\1\44\2\34\1\50\1\51"+
    "\1\45\6\34\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\131\1\66\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\16\131\3\44\1\45\24\131\1\47"+
    "\1\44\2\131\1\50\1\51\1\45\6\131\1\45\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\63\121\1\132"+
    "\20\121\1\34\10\0\16\34\4\0\24\34\2\0\2\34"+
    "\3\0\6\34\10\0\2\133\1\134\1\133\1\135\4\133"+
    "\1\136\1\137\2\140\1\141\1\142\1\143\4\140\1\144"+
    "\1\140\1\145\1\0\1\133\2\0\1\140\1\133\1\146"+
    "\1\147\1\150\3\140\1\151\1\140\1\152\4\140\1\153"+
    "\1\154\1\155\1\156\3\133\2\140\3\133\6\140\10\133"+
    "\114\0\1\44\16\0\3\44\26\0\1\44\23\0\27\157"+
    "\2\0\26\157\1\160\1\161\23\157\6\0\1\162\200\0"+
    "\1\61\4\133\1\135\4\133\1\136\1\137\2\140\1\141"+
    "\1\142\1\143\2\140\1\163\1\140\1\144\1\140\1\145"+
    "\1\0\1\133\2\0\1\140\1\133\1\146\1\147\1\150"+
    "\3\140\1\151\1\140\1\152\4\140\1\153\1\154\1\155"+
    "\1\156\3\133\2\140\3\133\6\140\13\133\1\63\1\135"+
    "\4\133\1\136\1\137\2\140\1\141\1\142\1\143\4\140"+
    "\1\144\1\140\1\145\1\0\1\133\2\0\1\140\1\133"+
    "\1\146\1\147\1\150\3\140\1\151\1\140\1\152\4\140"+
    "\1\153\1\154\1\155\1\156\3\133\2\140\3\133\6\140"+
    "\12\133\1\134\1\133\1\135\1\164\3\133\1\136\1\137"+
    "\2\140\1\141\1\142\1\143\4\140\1\144\1\140\1\145"+
    "\1\0\1\133\2\0\1\140\1\133\1\146\1\147\1\150"+
    "\3\140\1\151\1\140\1\152\4\140\1\153\1\154\1\155"+
    "\1\156\3\133\2\140\3\133\6\140\14\133\1\135\4\133"+
    "\1\136\1\137\2\140\1\141\1\142\1\143\4\140\1\144"+
    "\1\140\1\145\1\0\1\133\2\0\1\140\1\133\1\146"+
    "\1\147\1\150\3\140\1\151\1\140\1\152\4\140\1\153"+
    "\1\154\1\155\1\156\3\133\2\140\3\133\6\140\14\133"+
    "\1\135\4\133\4\140\1\141\1\142\1\143\4\140\1\144"+
    "\1\140\1\145\1\0\1\133\2\0\1\140\1\133\1\146"+
    "\1\147\1\150\3\140\1\151\1\140\1\152\4\140\1\153"+
    "\1\154\1\155\1\156\3\133\2\140\3\133\6\140\14\133"+
    "\1\165\1\166\3\133\1\136\1\137\2\140\1\141\1\142"+
    "\1\143\4\140\1\144\1\140\1\145\1\0\1\133\2\0"+
    "\1\140\1\133\1\146\1\147\1\150\3\140\1\151\1\140"+
    "\1\152\4\140\1\153\1\154\1\155\1\156\3\133\2\140"+
    "\3\133\6\140\14\133\1\135\4\133\4\167\1\170\1\171"+
    "\1\172\4\167\1\173\1\167\1\174\1\0\1\133\2\0"+
    "\2\167\1\175\1\176\1\177\3\167\1\200\1\167\1\201"+
    "\4\167\1\202\1\203\1\204\1\205\3\133\2\167\3\133"+
    "\6\167\10\133\1\114\10\0\16\114\4\0\24\114\2\0"+
    "\2\114\3\0\6\114\21\0\1\206\1\207\101\0\1\125"+
    "\16\0\3\125\26\0\1\125\23\0\1\126\10\0\16\126"+
    "\4\0\24\126\2\0\2\126\3\0\6\126\10\0\2\133"+
    "\1\134\1\133\1\135\4\133\1\136\1\210\2\140\1\141"+
    "\1\142\1\143\4\140\1\144\1\140\1\145\1\0\1\133"+
    "\2\0\1\140\1\133\1\211\1\147\1\150\3\140\1\212"+
    "\1\140\1\152\4\140\1\153\1\213\1\155\1\156\3\133"+
    "\2\140\3\133\1\214\1\140\1\215\1\216\1\217\1\220"+
    "\10\133\1\131\10\0\16\131\4\0\24\131\2\0\2\131"+
    "\3\0\6\131\67\0\1\221\1\222\34\0\1\140\1\223"+
    "\14\140\4\0\1\140\1\0\21\140\3\0\2\140\3\0"+
    "\6\140\21\0\4\140\1\224\11\140\4\0\1\140\1\0"+
    "\21\140\3\0\2\140\3\0\6\140\21\0\16\140\4\0"+
    "\1\140\1\0\21\140\3\0\2\140\3\0\6\140\21\0"+
    "\1\140\1\225\14\140\4\0\1\140\1\0\21\140\3\0"+
    "\2\140\3\0\6\140\21\0\3\140\1\226\12\140\4\0"+
    "\1\140\1\0\21\140\3\0\2\140\3\0\6\140\21\0"+
    "\3\140\1\227\12\140\4\0\1\140\1\0\21\140\3\0"+
    "\2\140\3\0\6\140\21\0\15\140\1\230\4\0\1\140"+
    "\1\0\21\140\3\0\2\140\3\0\6\140\21\0\1\140"+
    "\1\231\14\140\4\0\1\140\1\0\21\140\3\0\2\140"+
    "\3\0\6\140\21\0\10\140\1\232\5\140\4\0\1\140"+
    "\1\0\21\140\3\0\2\140\3\0\6\140\21\0\14\140"+
    "\1\233\1\234\4\0\1\140\1\0\4\140\1\235\2\140"+
    "\1\236\11\140\3\0\2\140\3\0\6\140\21\0\16\140"+
    "\4\0\1\140\1\0\11\140\1\237\6\140\1\240\3\0"+
    "\2\140\3\0\6\140\21\0\15\140\1\241\4\0\1\140"+
    "\1\0\21\140\3\0\2\140\3\0\6\140\21\0\1\140"+
    "\1\242\14\140\4\0\1\140\1\0\21\140\3\0\2\140"+
    "\3\0\6\140\21\0\1\140\1\243\14\140\4\0\1\140"+
    "\1\0\21\140\3\0\2\140\3\0\6\140\21\0\1\140"+
    "\1\244\14\140\4\0\1\140\1\0\21\140\3\0\2\140"+
    "\3\0\6\140\21\0\1\140\1\245\14\140\4\0\1\140"+
    "\1\0\21\140\3\0\2\140\3\0\6\140\21\0\15\140"+
    "\1\246\4\0\1\140\1\0\21\140\3\0\2\140\3\0"+
    "\6\140\10\0\27\157\2\0\53\157\10\247\1\160\16\247"+
    "\2\250\1\160\4\247\1\251\21\247\1\160\23\247\27\157"+
    "\2\0\26\157\1\252\24\157\11\0\1\140\1\253\14\140"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\21\0\16\167\4\0\23\167\3\0\2\167\3\0\6\167"+
    "\21\0\1\167\1\254\14\167\4\0\23\167\3\0\2\167"+
    "\3\0\6\167\21\0\3\167\1\255\12\167\4\0\23\167"+
    "\3\0\2\167\3\0\6\167\21\0\3\167\1\256\12\167"+
    "\4\0\23\167\3\0\2\167\3\0\6\167\21\0\15\167"+
    "\1\257\4\0\23\167\3\0\2\167\3\0\6\167\21\0"+
    "\1\167\1\260\14\167\4\0\23\167\3\0\2\167\3\0"+
    "\6\167\21\0\10\167\1\261\5\167\4\0\23\167\3\0"+
    "\2\167\3\0\6\167\21\0\14\167\1\262\1\167\4\0"+
    "\6\167\1\263\14\167\3\0\2\167\3\0\6\167\21\0"+
    "\16\167\4\0\13\167\1\264\6\167\1\265\3\0\2\167"+
    "\3\0\6\167\21\0\15\167\1\266\4\0\23\167\3\0"+
    "\2\167\3\0\6\167\21\0\1\167\1\267\14\167\4\0"+
    "\23\167\3\0\2\167\3\0\6\167\21\0\1\167\1\270"+
    "\14\167\4\0\23\167\3\0\2\167\3\0\6\167\21\0"+
    "\1\167\1\271\14\167\4\0\23\167\3\0\2\167\3\0"+
    "\6\167\21\0\1\167\1\272\14\167\4\0\23\167\3\0"+
    "\2\167\3\0\6\167\21\0\15\167\1\273\4\0\23\167"+
    "\3\0\2\167\3\0\6\167\22\0\1\274\106\0\1\275"+
    "\77\0\4\140\1\276\11\140\4\0\1\140\1\0\21\140"+
    "\3\0\2\140\3\0\6\140\21\0\4\140\1\277\3\140"+
    "\1\232\5\140\4\0\1\140\1\0\2\140\1\300\16\140"+
    "\3\0\2\140\3\0\6\140\21\0\15\140\1\301\4\0"+
    "\1\140\1\0\21\140\3\0\2\140\3\0\6\140\21\0"+
    "\1\140\1\302\14\140\4\0\1\140\1\0\21\140\3\0"+
    "\2\140\3\0\6\140\21\0\16\140\4\0\1\140\1\0"+
    "\7\140\1\303\10\140\1\304\3\0\2\140\3\0\6\140"+
    "\21\0\7\140\1\305\6\140\4\0\1\140\1\0\21\140"+
    "\3\0\2\140\3\0\6\140\21\0\13\140\1\306\2\140"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\21\0\16\140\4\0\1\140\1\0\7\140\1\307\11\140"+
    "\3\0\2\140\3\0\6\140\21\0\4\140\1\310\11\140"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\20\0\1\221\16\0\3\221\4\0\1\311\21\0\1\221"+
    "\102\0\1\312\35\0\2\140\1\313\13\140\4\0\1\140"+
    "\1\0\21\140\3\0\2\140\3\0\6\140\21\0\5\140"+
    "\1\314\10\140\4\0\1\140\1\0\21\140\3\0\2\140"+
    "\3\0\6\140\21\0\16\140\4\0\1\140\1\0\13\140"+
    "\1\315\5\140\3\0\2\140\3\0\6\140\21\0\15\140"+
    "\1\316\4\0\1\140\1\0\21\140\3\0\2\140\3\0"+
    "\6\140\21\0\7\140\1\317\6\140\4\0\1\140\1\0"+
    "\21\140\3\0\2\140\3\0\6\140\21\0\1\140\1\320"+
    "\14\140\4\0\1\140\1\0\21\140\3\0\2\140\3\0"+
    "\6\140\21\0\4\140\1\141\11\140\4\0\1\140\1\0"+
    "\21\140\3\0\2\140\3\0\6\140\21\0\16\140\4\0"+
    "\1\140\1\0\1\140\1\321\17\140\3\0\2\140\3\0"+
    "\6\140\21\0\11\140\1\322\4\140\4\0\1\140\1\0"+
    "\21\140\3\0\2\140\3\0\6\140\21\0\1\140\1\323"+
    "\14\140\4\0\1\140\1\0\21\140\3\0\2\140\3\0"+
    "\6\140\21\0\1\324\11\140\1\324\3\140\4\0\1\140"+
    "\1\0\10\140\2\324\7\140\3\0\2\140\3\0\6\140"+
    "\21\0\16\140\4\0\1\140\1\0\11\140\1\325\7\140"+
    "\3\0\2\140\3\0\6\140\21\0\11\140\1\326\4\140"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\21\0\14\140\1\327\1\140\4\0\1\140\1\0\21\140"+
    "\3\0\2\140\3\0\6\140\21\0\16\140\4\0\1\140"+
    "\1\0\7\140\1\330\11\140\3\0\2\140\3\0\6\140"+
    "\21\0\15\140\1\331\4\0\1\140\1\0\21\140\3\0"+
    "\2\140\3\0\6\140\21\0\16\140\4\0\1\140\1\0"+
    "\13\140\1\332\5\140\3\0\2\140\3\0\6\140\21\0"+
    "\4\140\1\153\11\140\4\0\1\140\1\0\21\140\3\0"+
    "\2\140\3\0\6\140\21\0\12\140\1\333\3\140\4\0"+
    "\1\140\1\0\21\140\3\0\2\140\3\0\6\140\21\0"+
    "\16\140\4\0\1\140\1\0\2\140\1\324\16\140\3\0"+
    "\2\140\3\0\6\140\10\0\27\247\2\0\53\247\10\0"+
    "\1\250\16\0\3\250\4\0\1\334\21\0\1\250\23\0"+
    "\25\247\1\335\1\247\2\0\53\247\22\157\1\336\4\157"+
    "\2\0\30\157\1\336\22\157\11\0\10\140\1\337\5\140"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\21\0\16\167\4\0\15\167\1\340\5\167\3\0\2\167"+
    "\3\0\6\167\21\0\15\167\1\341\4\0\23\167\3\0"+
    "\2\167\3\0\6\167\21\0\7\167\1\342\6\167\4\0"+
    "\23\167\3\0\2\167\3\0\6\167\21\0\1\167\1\343"+
    "\14\167\4\0\23\167\3\0\2\167\3\0\6\167\21\0"+
    "\4\167\1\170\11\167\4\0\23\167\3\0\2\167\3\0"+
    "\6\167\21\0\16\167\4\0\3\167\1\344\17\167\3\0"+
    "\2\167\3\0\6\167\21\0\11\167\1\345\4\167\4\0"+
    "\23\167\3\0\2\167\3\0\6\167\21\0\1\346\11\167"+
    "\1\346\3\167\4\0\12\167\2\346\7\167\3\0\2\167"+
    "\3\0\6\167\21\0\11\167\1\347\4\167\4\0\23\167"+
    "\3\0\2\167\3\0\6\167\21\0\14\167\1\350\1\167"+
    "\4\0\23\167\3\0\2\167\3\0\6\167\21\0\16\167"+
    "\4\0\11\167\1\351\11\167\3\0\2\167\3\0\6\167"+
    "\21\0\15\167\1\352\4\0\23\167\3\0\2\167\3\0"+
    "\6\167\21\0\16\167\4\0\15\167\1\353\5\167\3\0"+
    "\2\167\3\0\6\167\21\0\4\167\1\202\11\167\4\0"+
    "\23\167\3\0\2\167\3\0\6\167\21\0\12\167\1\354"+
    "\3\167\4\0\23\167\3\0\2\167\3\0\6\167\21\0"+
    "\16\167\4\0\4\167\1\346\16\167\3\0\2\167\3\0"+
    "\6\167\23\0\1\355\106\0\1\356\76\0\5\140\1\357"+
    "\10\140\4\0\1\140\1\0\21\140\3\0\2\140\3\0"+
    "\6\140\21\0\5\140\1\360\10\140\4\0\1\140\1\0"+
    "\21\140\3\0\2\140\3\0\6\140\21\0\16\140\4\0"+
    "\1\140\1\0\11\140\1\361\7\140\3\0\2\140\3\0"+
    "\6\140\21\0\16\140\4\0\1\140\1\0\7\140\1\362"+
    "\11\140\3\0\2\140\3\0\6\140\21\0\4\140\1\153"+
    "\11\140\4\0\1\140\1\0\1\140\1\363\17\140\3\0"+
    "\2\140\3\0\6\140\21\0\15\140\1\364\4\0\1\140"+
    "\1\0\21\140\3\0\2\140\3\0\6\140\21\0\4\140"+
    "\1\365\11\140\4\0\1\140\1\0\21\140\3\0\2\140"+
    "\3\0\6\140\21\0\3\140\1\366\12\140\4\0\1\140"+
    "\1\0\21\140\3\0\2\140\3\0\6\140\21\0\16\140"+
    "\4\0\1\140\1\0\7\140\1\367\11\140\3\0\2\140"+
    "\3\0\6\140\21\0\11\140\1\370\4\140\4\0\1\140"+
    "\1\0\21\140\3\0\2\140\3\0\6\140\35\0\1\371"+
    "\100\0\1\372\36\0\1\372\33\0\3\140\1\373\12\140"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\21\0\1\140\1\374\14\140\4\0\1\140\1\0\21\140"+
    "\3\0\2\140\3\0\6\140\21\0\1\140\1\375\14\140"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\21\0\4\140\1\376\11\140\4\0\1\140\1\0\21\140"+
    "\3\0\2\140\3\0\6\140\21\0\7\140\1\324\6\140"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\21\0\16\140\4\0\1\140\1\0\2\140\1\377\16\140"+
    "\3\0\2\140\3\0\6\140\21\0\13\140\1\324\2\140"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\21\0\5\140\1\u0100\3\140\1\u0101\2\140\1\u0102\1\140"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\21\0\11\140\1\323\4\140\4\0\1\140\1\0\21\140"+
    "\3\0\2\140\3\0\6\140\21\0\3\140\1\u0103\12\140"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\21\0\1\140\1\u0104\14\140\4\0\1\140\1\0\21\140"+
    "\3\0\2\140\3\0\6\140\21\0\16\140\4\0\1\140"+
    "\1\0\10\140\1\u0105\10\140\3\0\2\140\3\0\6\140"+
    "\21\0\1\u0106\15\140\4\0\1\140\1\0\21\140\3\0"+
    "\2\140\3\0\6\140\21\0\16\140\4\0\1\140\1\0"+
    "\17\140\1\u0107\1\140\3\0\2\140\3\0\6\140\21\0"+
    "\16\140\4\0\1\140\1\0\2\140\1\u0108\16\140\3\0"+
    "\2\140\3\0\6\140\35\0\1\u0109\56\0\26\247\1\u010a"+
    "\2\0\53\247\12\157\1\u010b\14\157\2\0\4\157\1\u010b"+
    "\46\157\11\0\11\140\1\u010c\4\140\4\0\1\140\1\0"+
    "\21\140\3\0\2\140\3\0\6\140\21\0\1\167\1\u010d"+
    "\14\167\4\0\23\167\3\0\2\167\3\0\6\167\21\0"+
    "\1\167\1\u010e\14\167\4\0\23\167\3\0\2\167\3\0"+
    "\6\167\21\0\4\167\1\u010f\11\167\4\0\23\167\3\0"+
    "\2\167\3\0\6\167\21\0\7\167\1\346\6\167\4\0"+
    "\23\167\3\0\2\167\3\0\6\167\21\0\16\167\4\0"+
    "\4\167\1\u0110\16\167\3\0\2\167\3\0\6\167\21\0"+
    "\13\167\1\346\2\167\4\0\23\167\3\0\2\167\3\0"+
    "\6\167\21\0\3\167\1\u0111\12\167\4\0\23\167\3\0"+
    "\2\167\3\0\6\167\21\0\1\167\1\u0112\14\167\4\0"+
    "\23\167\3\0\2\167\3\0\6\167\21\0\16\167\4\0"+
    "\12\167\1\u0113\10\167\3\0\2\167\3\0\6\167\21\0"+
    "\1\u0114\15\167\4\0\23\167\3\0\2\167\3\0\6\167"+
    "\21\0\16\167\4\0\21\167\1\u0115\1\167\3\0\2\167"+
    "\3\0\6\167\21\0\16\167\4\0\4\167\1\u0116\16\167"+
    "\3\0\2\167\3\0\6\167\24\0\1\u0117\100\0\16\140"+
    "\4\0\1\140\1\0\6\140\1\u0118\12\140\3\0\2\140"+
    "\3\0\1\u0119\1\140\1\u011a\1\u011b\1\u011c\1\140\21\0"+
    "\1\140\1\u011d\14\140\4\0\1\140\1\0\21\140\3\0"+
    "\2\140\3\0\2\140\1\u011e\3\140\21\0\12\140\1\u011f"+
    "\3\140\4\0\1\140\1\0\10\140\1\u0105\10\140\3\0"+
    "\2\140\3\0\6\140\21\0\1\140\1\u0120\14\140\4\0"+
    "\1\140\1\0\21\140\3\0\2\140\3\0\6\140\21\0"+
    "\16\140\4\0\1\140\1\0\21\140\3\0\2\140\3\0"+
    "\1\140\1\u0121\4\140\21\0\12\140\1\u0122\3\140\4\0"+
    "\1\140\1\0\21\140\3\0\2\140\3\0\6\140\21\0"+
    "\16\140\4\0\1\140\1\0\2\140\1\u0123\16\140\3\0"+
    "\2\140\3\0\6\140\21\0\16\140\4\0\1\140\1\0"+
    "\1\140\1\305\17\140\3\0\2\140\3\0\6\140\21\0"+
    "\3\140\1\u0124\12\140\4\0\1\140\1\0\21\140\3\0"+
    "\2\140\3\0\6\140\36\0\1\u0125\67\0\1\u0126\22\0"+
    "\1\u0126\57\0\4\140\1\u0127\11\140\4\0\1\140\1\0"+
    "\21\140\3\0\2\140\3\0\6\140\21\0\4\140\1\u0128"+
    "\11\140\4\0\1\140\1\0\21\140\3\0\2\140\3\0"+
    "\6\140\21\0\12\140\1\u0129\3\140\4\0\1\140\1\0"+
    "\21\140\3\0\2\140\3\0\6\140\21\0\1\140\1\u012a"+
    "\14\140\4\0\1\140\1\0\21\140\3\0\2\140\3\0"+
    "\6\140\21\0\16\140\4\0\1\140\1\0\3\140\1\u012b"+
    "\15\140\3\0\2\140\3\0\6\140\21\0\14\140\1\u012c"+
    "\1\140\4\0\1\140\1\0\21\140\3\0\2\140\3\0"+
    "\6\140\21\0\3\140\1\u012d\12\140\4\0\1\140\1\0"+
    "\21\140\3\0\2\140\3\0\6\140\21\0\16\140\4\0"+
    "\1\140\1\0\20\140\1\u012e\3\0\2\140\3\0\6\140"+
    "\21\0\4\140\1\u012f\11\140\4\0\1\140\1\0\21\140"+
    "\3\0\2\140\3\0\6\140\21\0\10\140\1\u0130\5\140"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\21\0\3\140\1\u0131\12\140\4\0\1\140\1\0\21\140"+
    "\3\0\2\140\3\0\6\140\21\0\16\140\4\0\1\140"+
    "\1\0\21\140\1\u0132\2\0\2\140\3\0\6\140\21\0"+
    "\16\140\4\0\1\140\1\0\7\140\1\u0133\11\140\3\0"+
    "\2\140\3\0\6\140\21\0\14\140\1\u0134\1\140\4\0"+
    "\1\140\1\0\21\140\3\0\2\140\3\0\6\140\36\0"+
    "\1\u0135\55\0\27\247\2\0\15\247\1\u0136\35\247\21\157"+
    "\1\160\5\157\2\0\31\157\1\160\21\157\11\0\4\167"+
    "\1\u0137\11\167\4\0\23\167\3\0\2\167\3\0\6\167"+
    "\21\0\12\167\1\u0138\3\167\4\0\23\167\3\0\2\167"+
    "\3\0\6\167\21\0\1\167\1\u0139\14\167\4\0\23\167"+
    "\3\0\2\167\3\0\6\167\21\0\16\167\4\0\5\167"+
    "\1\u013a\15\167\3\0\2\167\3\0\6\167\21\0\4\167"+
    "\1\u013b\11\167\4\0\23\167\3\0\2\167\3\0\6\167"+
    "\21\0\10\167\1\u013c\5\167\4\0\23\167\3\0\2\167"+
    "\3\0\6\167\21\0\3\167\1\u013d\12\167\4\0\23\167"+
    "\3\0\2\167\3\0\6\167\21\0\16\167\4\0\23\167"+
    "\1\u0132\2\0\2\167\3\0\6\167\21\0\16\167\4\0"+
    "\11\167\1\u013e\11\167\3\0\2\167\3\0\6\167\21\0"+
    "\14\167\1\u013f\1\167\4\0\23\167\3\0\2\167\3\0"+
    "\6\167\25\0\1\u0140\77\0\15\140\1\u0141\4\0\1\140"+
    "\1\0\21\140\3\0\2\140\3\0\6\140\21\0\16\140"+
    "\4\0\1\140\1\0\7\140\1\u0142\10\140\1\u0143\3\0"+
    "\2\140\3\0\6\140\21\0\7\140\1\u0144\6\140\4\0"+
    "\1\140\1\0\21\140\3\0\2\140\3\0\6\140\21\0"+
    "\13\140\1\u0145\2\140\4\0\1\140\1\0\21\140\3\0"+
    "\2\140\3\0\6\140\21\0\16\140\4\0\1\140\1\0"+
    "\7\140\1\u0146\11\140\3\0\2\140\3\0\6\140\21\0"+
    "\7\140\1\u011d\6\140\4\0\1\140\1\0\21\140\3\0"+
    "\2\140\3\0\6\140\21\0\1\140\1\u0147\14\140\4\0"+
    "\1\140\1\0\21\140\3\0\2\140\3\0\6\140\21\0"+
    "\14\140\1\u0148\1\140\4\0\1\140\1\0\21\140\3\0"+
    "\2\140\3\0\6\140\21\0\16\140\4\0\1\140\1\0"+
    "\2\140\1\u0149\16\140\3\0\2\140\3\0\6\140\21\0"+
    "\11\140\1\u014a\4\140\4\0\1\140\1\0\21\140\3\0"+
    "\2\140\3\0\6\140\21\0\1\140\1\305\14\140\4\0"+
    "\1\140\1\0\21\140\3\0\2\140\3\0\6\140\21\0"+
    "\16\140\4\0\1\140\1\0\2\140\1\u0144\16\140\3\0"+
    "\2\140\3\0\6\140\56\0\1\u014b\56\0\1\221\40\0"+
    "\1\221\32\0\16\140\4\0\1\140\1\0\10\140\1\u014c"+
    "\10\140\3\0\2\140\3\0\6\140\21\0\11\140\1\u014d"+
    "\4\140\4\0\1\140\1\0\21\140\3\0\2\140\3\0"+
    "\6\140\21\0\10\140\1\u014e\5\140\4\0\1\140\1\0"+
    "\21\140\3\0\2\140\3\0\6\140\21\0\16\140\4\0"+
    "\1\140\1\0\4\140\1\u014f\14\140\3\0\2\140\3\0"+
    "\6\140\21\0\11\140\1\u0150\4\140\4\0\1\140\1\0"+
    "\21\140\3\0\2\140\3\0\6\140\21\0\11\140\1\u0151"+
    "\4\140\4\0\1\140\1\0\21\140\3\0\2\140\3\0"+
    "\6\140\21\0\11\140\1\u0152\4\140\4\0\1\140\1\0"+
    "\21\140\3\0\2\140\3\0\6\140\21\0\16\140\4\0"+
    "\1\140\1\0\2\140\1\u0153\16\140\3\0\2\140\3\0"+
    "\6\140\21\0\1\140\1\u0154\14\140\4\0\1\140\1\0"+
    "\21\140\3\0\2\140\3\0\6\140\21\0\5\140\1\u0155"+
    "\10\140\4\0\1\140\1\0\21\140\3\0\2\140\3\0"+
    "\6\140\21\0\12\140\1\u0156\3\140\4\0\1\140\1\0"+
    "\21\140\3\0\2\140\3\0\6\140\21\0\15\140\1\u0157"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\56\0\1\u0158\35\0\12\247\1\u0159\14\247\2\0\53\247"+
    "\11\0\16\167\4\0\12\167\1\u015a\10\167\3\0\2\167"+
    "\3\0\6\167\21\0\11\167\1\u015b\4\167\4\0\23\167"+
    "\3\0\2\167\3\0\6\167\21\0\10\167\1\u015c\5\167"+
    "\4\0\23\167\3\0\2\167\3\0\6\167\21\0\16\167"+
    "\4\0\6\167\1\u015d\14\167\3\0\2\167\3\0\6\167"+
    "\21\0\16\167\4\0\4\167\1\u015e\16\167\3\0\2\167"+
    "\3\0\6\167\21\0\1\167\1\u015f\14\167\4\0\23\167"+
    "\3\0\2\167\3\0\6\167\21\0\5\167\1\u0160\10\167"+
    "\4\0\23\167\3\0\2\167\3\0\6\167\21\0\12\167"+
    "\1\u0161\3\167\4\0\23\167\3\0\2\167\3\0\6\167"+
    "\21\0\15\167\1\u0162\4\0\23\167\3\0\2\167\3\0"+
    "\6\167\21\0\16\140\4\0\1\140\1\0\7\140\1\u0163"+
    "\11\140\3\0\2\140\3\0\6\140\21\0\15\140\1\u0144"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\21\0\4\140\1\u0164\11\140\4\0\1\140\1\0\21\140"+
    "\3\0\2\140\3\0\6\140\21\0\3\140\1\u0165\12\140"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\21\0\16\140\4\0\1\140\1\0\7\140\1\u0166\11\140"+
    "\3\0\2\140\3\0\6\140\21\0\5\140\1\u0167\10\140"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\21\0\11\140\1\305\4\140\4\0\1\140\1\0\21\140"+
    "\3\0\2\140\3\0\6\140\21\0\16\140\4\0\1\140"+
    "\1\0\2\140\1\305\16\140\3\0\2\140\3\0\6\140"+
    "\21\0\3\140\1\u0168\12\140\4\0\1\140\1\0\21\140"+
    "\3\0\2\140\3\0\6\140\22\0\1\u0169\102\0\3\140"+
    "\1\u016a\12\140\4\0\1\140\1\0\21\140\3\0\2\140"+
    "\3\0\6\140\21\0\16\140\4\0\1\140\1\0\2\140"+
    "\1\u016b\16\140\3\0\2\140\3\0\6\140\21\0\11\140"+
    "\1\u016c\4\140\4\0\1\140\1\0\21\140\3\0\2\140"+
    "\3\0\6\140\21\0\4\140\1\u016d\11\140\4\0\1\140"+
    "\1\0\21\140\3\0\2\140\3\0\6\140\21\0\1\140"+
    "\1\u016e\14\140\4\0\1\140\1\0\21\140\3\0\2\140"+
    "\3\0\6\140\21\0\16\140\4\0\1\140\1\0\2\140"+
    "\1\u0150\16\140\3\0\2\140\3\0\6\140\21\0\13\140"+
    "\1\u016f\2\140\4\0\1\140\1\0\21\140\3\0\2\140"+
    "\3\0\6\140\21\0\3\140\1\u0170\12\140\4\0\1\140"+
    "\1\0\21\140\3\0\2\140\3\0\6\140\21\0\12\140"+
    "\1\324\3\140\4\0\1\140\1\0\21\140\3\0\2\140"+
    "\3\0\6\140\21\0\1\140\1\u0171\14\140\4\0\1\140"+
    "\1\0\21\140\3\0\2\140\3\0\6\140\21\0\16\140"+
    "\4\0\1\140\1\0\20\140\1\u0172\3\0\2\140\3\0"+
    "\6\140\21\0\1\140\1\332\14\140\4\0\1\140\1\0"+
    "\21\140\3\0\2\140\3\0\6\140\22\0\1\u0173\71\0"+
    "\26\247\1\u0174\2\0\53\247\11\0\3\167\1\u0175\12\167"+
    "\4\0\23\167\3\0\2\167\3\0\6\167\21\0\16\167"+
    "\4\0\4\167\1\u0176\16\167\3\0\2\167\3\0\6\167"+
    "\21\0\11\167\1\u0177\4\167\4\0\23\167\3\0\2\167"+
    "\3\0\6\167\21\0\4\167\1\u0178\11\167\4\0\23\167"+
    "\3\0\2\167\3\0\6\167\21\0\3\167\1\u0179\12\167"+
    "\4\0\23\167\3\0\2\167\3\0\6\167\21\0\12\167"+
    "\1\346\3\167\4\0\23\167\3\0\2\167\3\0\6\167"+
    "\21\0\1\167\1\u017a\14\167\4\0\23\167\3\0\2\167"+
    "\3\0\6\167\21\0\16\167\4\0\22\167\1\u017b\3\0"+
    "\2\167\3\0\6\167\21\0\1\167\1\353\14\167\4\0"+
    "\23\167\3\0\2\167\3\0\6\167\21\0\12\140\1\u017c"+
    "\3\140\4\0\1\140\1\0\21\140\3\0\2\140\3\0"+
    "\6\140\21\0\12\140\1\u017d\3\140\4\0\1\140\1\0"+
    "\21\140\3\0\2\140\3\0\6\140\21\0\16\140\4\0"+
    "\1\140\1\0\2\140\1\u017e\16\140\3\0\2\140\3\0"+
    "\6\140\21\0\16\140\4\0\1\140\1\0\1\140\1\u0144"+
    "\17\140\3\0\2\140\3\0\6\140\21\0\16\140\4\0"+
    "\1\140\1\0\20\140\1\u017f\3\0\2\140\3\0\6\140"+
    "\21\0\16\140\4\0\1\140\1\0\7\140\1\u0180\11\140"+
    "\3\0\2\140\3\0\6\140\36\0\1\u0181\66\0\15\140"+
    "\1\u0182\4\0\1\140\1\0\21\140\3\0\2\140\3\0"+
    "\6\140\21\0\16\140\4\0\1\140\1\0\20\140\1\u0183"+
    "\3\0\2\140\3\0\6\140\21\0\12\140\1\u0184\3\140"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\21\0\11\140\1\u0185\4\140\4\0\1\140\1\0\21\140"+
    "\3\0\2\140\3\0\6\140\21\0\16\140\4\0\1\140"+
    "\1\0\7\140\1\u0186\11\140\3\0\2\140\3\0\6\140"+
    "\21\0\4\140\1\u0187\11\140\4\0\1\140\1\0\21\140"+
    "\3\0\2\140\3\0\6\140\21\0\16\140\4\0\1\140"+
    "\1\0\11\140\1\u0188\5\140\1\u0107\1\140\3\0\2\140"+
    "\3\0\6\140\21\0\16\140\4\0\1\140\1\0\14\140"+
    "\1\u0189\4\140\3\0\2\140\3\0\6\140\36\0\1\u018a"+
    "\55\0\10\247\1\u0174\16\247\2\u018a\1\u0174\26\247\1\u0174"+
    "\3\247\1\u018b\17\247\11\0\15\167\1\u018c\4\0\23\167"+
    "\3\0\2\167\3\0\6\167\21\0\16\167\4\0\22\167"+
    "\1\u018d\3\0\2\167\3\0\6\167\21\0\12\167\1\u018e"+
    "\3\167\4\0\23\167\3\0\2\167\3\0\6\167\21\0"+
    "\11\167\1\u018f\4\167\4\0\23\167\3\0\2\167\3\0"+
    "\6\167\21\0\4\167\1\u0190\11\167\4\0\23\167\3\0"+
    "\2\167\3\0\6\167\21\0\16\167\4\0\13\167\1\u0191"+
    "\5\167\1\u0115\1\167\3\0\2\167\3\0\6\167\21\0"+
    "\16\167\4\0\16\167\1\u0192\4\167\3\0\2\167\3\0"+
    "\6\167\21\0\1\140\1\u0193\14\140\4\0\1\140\1\0"+
    "\21\140\3\0\2\140\3\0\6\140\21\0\11\140\1\u0194"+
    "\4\140\4\0\1\140\1\0\21\140\3\0\2\140\3\0"+
    "\6\140\21\0\1\140\1\u0144\14\140\4\0\1\140\1\0"+
    "\21\140\3\0\2\140\3\0\6\140\21\0\15\140\1\u0123"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\21\0\4\140\1\305\11\140\4\0\1\140\1\0\21\140"+
    "\3\0\2\140\3\0\6\140\20\0\1\u0181\16\0\3\u0181"+
    "\26\0\1\u0181\3\0\1\u0195\30\0\16\140\4\0\1\140"+
    "\1\0\7\140\1\u0196\11\140\3\0\2\140\3\0\6\140"+
    "\21\0\14\140\1\324\1\140\4\0\1\140\1\0\21\140"+
    "\3\0\2\140\3\0\6\140\21\0\13\140\1\u0197\2\140"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\21\0\14\140\1\u0198\1\140\4\0\1\140\1\0\21\140"+
    "\3\0\2\140\3\0\6\140\21\0\15\140\1\u016e\4\0"+
    "\1\140\1\0\21\140\3\0\2\140\3\0\6\140\21\0"+
    "\1\140\1\324\14\140\4\0\1\140\1\0\21\140\3\0"+
    "\2\140\3\0\6\140\21\0\16\140\4\0\1\140\1\0"+
    "\1\u0199\20\140\3\0\2\140\3\0\6\140\21\0\1\140"+
    "\1\u019a\14\140\4\0\1\140\1\0\21\140\3\0\2\140"+
    "\3\0\6\140\20\0\1\u018a\16\0\3\u018a\26\0\1\u018a"+
    "\3\0\1\u019b\17\0\10\247\1\u018b\16\247\2\u019b\1\u018b"+
    "\12\247\1\u019c\13\247\1\u018b\23\247\11\0\16\167\4\0"+
    "\11\167\1\u019d\11\167\3\0\2\167\3\0\6\167\21\0"+
    "\14\167\1\346\1\167\4\0\23\167\3\0\2\167\3\0"+
    "\6\167\21\0\13\167\1\u019e\2\167\4\0\23\167\3\0"+
    "\2\167\3\0\6\167\21\0\14\167\1\u019f\1\167\4\0"+
    "\23\167\3\0\2\167\3\0\6\167\21\0\1\167\1\346"+
    "\14\167\4\0\23\167\3\0\2\167\3\0\6\167\21\0"+
    "\16\167\4\0\2\167\1\u01a0\20\167\3\0\2\167\3\0"+
    "\6\167\21\0\1\167\1\u01a1\14\167\4\0\23\167\3\0"+
    "\2\167\3\0\6\167\21\0\5\140\1\u01a2\10\140\4\0"+
    "\1\140\1\0\21\140\3\0\2\140\3\0\6\140\21\0"+
    "\3\140\1\u01a3\12\140\4\0\1\140\1\0\21\140\3\0"+
    "\2\140\3\0\6\140\20\0\1\u0195\16\0\3\u0195\12\0"+
    "\1\u01a4\13\0\1\u0195\34\0\4\140\1\u01a5\11\140\4\0"+
    "\1\140\1\0\21\140\3\0\2\140\3\0\6\140\21\0"+
    "\14\140\1\u01a6\1\140\4\0\1\140\1\0\21\140\3\0"+
    "\2\140\3\0\6\140\21\0\10\140\1\u01a7\5\140\4\0"+
    "\1\140\1\0\21\140\3\0\2\140\3\0\6\140\21\0"+
    "\10\140\1\u01a8\5\140\4\0\1\140\1\0\21\140\3\0"+
    "\2\140\3\0\6\140\21\0\4\140\1\u01a9\11\140\4\0"+
    "\1\140\1\0\21\140\3\0\2\140\3\0\6\140\20\0"+
    "\1\u019b\16\0\3\u019b\12\0\1\u01aa\13\0\1\u019b\23\0"+
    "\20\247\1\u01ab\6\247\2\0\53\247\11\0\4\167\1\u01ac"+
    "\11\167\4\0\23\167\3\0\2\167\3\0\6\167\21\0"+
    "\14\167\1\u01ad\1\167\4\0\23\167\3\0\2\167\3\0"+
    "\6\167\21\0\10\167\1\u01ae\5\167\4\0\23\167\3\0"+
    "\2\167\3\0\6\167\21\0\10\167\1\u01af\5\167\4\0"+
    "\23\167\3\0\2\167\3\0\6\167\21\0\4\167\1\u01b0"+
    "\11\167\4\0\23\167\3\0\2\167\3\0\6\167\21\0"+
    "\16\140\4\0\1\140\1\0\20\140\1\u01b1\3\0\2\140"+
    "\3\0\6\140\21\0\16\140\4\0\1\140\1\0\7\140"+
    "\1\u01b2\11\140\3\0\2\140\3\0\6\140\25\0\1\u01b3"+
    "\77\0\16\140\4\0\1\140\1\0\14\140\1\u01b4\4\140"+
    "\3\0\2\140\3\0\6\140\21\0\15\140\1\u01b5\4\0"+
    "\1\140\1\0\21\140\3\0\2\140\3\0\6\140\21\0"+
    "\16\140\4\0\1\140\1\0\5\140\1\u01b6\13\140\3\0"+
    "\2\140\3\0\6\140\21\0\16\140\4\0\1\140\1\0"+
    "\1\140\1\u01b7\17\140\3\0\2\140\3\0\6\140\21\0"+
    "\11\140\1\u01b8\4\140\4\0\1\140\1\0\21\140\3\0"+
    "\2\140\3\0\6\140\30\0\1\u01b9\63\0\20\247\1\u01ba"+
    "\6\247\2\0\53\247\11\0\16\167\4\0\16\167\1\u01bb"+
    "\4\167\3\0\2\167\3\0\6\167\21\0\15\167\1\u01bc"+
    "\4\0\23\167\3\0\2\167\3\0\6\167\21\0\16\167"+
    "\4\0\7\167\1\u01bd\13\167\3\0\2\167\3\0\6\167"+
    "\21\0\16\167\4\0\3\167\1\u01be\17\167\3\0\2\167"+
    "\3\0\6\167\21\0\11\167\1\u01bf\4\167\4\0\23\167"+
    "\3\0\2\167\3\0\6\167\21\0\15\140\1\u017e\4\0"+
    "\1\140\1\0\21\140\3\0\2\140\3\0\6\140\21\0"+
    "\4\140\1\u0144\11\140\4\0\1\140\1\0\21\140\3\0"+
    "\2\140\3\0\6\140\10\0\27\u01b3\2\0\53\u01b3\11\0"+
    "\1\140\1\u01c0\14\140\4\0\1\140\1\0\21\140\3\0"+
    "\2\140\3\0\6\140\10\0\11\u01c1\16\140\4\0\1\140"+
    "\1\u01c1\21\140\3\u01c1\2\140\3\u01c1\6\140\10\u01c1\11\0"+
    "\4\140\1\u01c2\11\140\4\0\1\140\1\0\21\140\3\0"+
    "\2\140\3\0\6\140\21\0\16\140\4\0\1\140\1\0"+
    "\2\140\1\u01c3\16\140\3\0\2\140\3\0\6\140\21\0"+
    "\16\140\4\0\1\140\1\0\1\u01c4\20\140\3\0\2\140"+
    "\3\0\6\140\30\0\1\u01ba\63\0\27\u01ba\2\0\53\u01ba"+
    "\11\0\1\167\1\u01c5\14\167\4\0\23\167\3\0\2\167"+
    "\3\0\6\167\10\0\11\u01c1\16\167\4\0\23\167\3\u01c1"+
    "\2\167\3\u01c1\6\167\10\u01c1\11\0\4\167\1\u01c6\2\167"+
    "\1\u01c7\6\167\4\0\23\167\3\0\2\167\3\0\6\167"+
    "\21\0\16\167\4\0\4\167\1\u01c8\16\167\3\0\2\167"+
    "\3\0\6\167\21\0\16\167\4\0\2\167\1\u01c9\20\167"+
    "\3\0\2\167\3\0\6\167\21\0\4\140\1\u01ca\11\140"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\21\0\16\140\4\0\1\140\1\0\6\140\1\u01cb\12\140"+
    "\3\0\2\140\3\0\6\140\21\0\4\140\1\u01cc\11\140"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\21\0\4\167\1\u01cd\11\167\4\0\23\167\3\0\2\167"+
    "\3\0\6\167\21\0\7\167\1\u01ce\6\167\4\0\23\167"+
    "\3\0\2\167\3\0\6\167\21\0\16\167\4\0\10\167"+
    "\1\u01cf\12\167\3\0\2\167\3\0\6\167\21\0\4\167"+
    "\1\u01d0\11\167\4\0\23\167\3\0\2\167\3\0\6\167"+
    "\21\0\11\140\1\u01d1\4\140\4\0\1\140\1\0\21\140"+
    "\3\0\2\140\3\0\6\140\21\0\14\140\1\u01d2\1\140"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\21\0\16\140\4\0\1\140\1\0\10\140\1\u01d3\10\140"+
    "\3\0\2\140\3\0\6\140\21\0\11\167\1\u01d4\4\167"+
    "\4\0\23\167\3\0\2\167\3\0\6\167\21\0\14\167"+
    "\1\u01d5\1\167\4\0\23\167\3\0\2\167\3\0\6\167"+
    "\21\0\16\167\4\0\12\167\1\u01d6\10\167\3\0\2\167"+
    "\3\0\6\167\21\0\12\140\1\u01d7\3\140\4\0\1\140"+
    "\1\0\21\140\3\0\2\140\3\0\6\140\21\0\3\140"+
    "\1\u01d8\12\140\4\0\1\140\1\0\21\140\3\0\2\140"+
    "\3\0\6\140\21\0\12\167\1\u01d9\3\167\4\0\23\167"+
    "\3\0\2\167\3\0\6\167\21\0\3\167\1\u01da\12\167"+
    "\4\0\23\167\3\0\2\167\3\0\6\167\21\0\16\140"+
    "\4\0\1\140\1\0\12\140\1\u01db\6\140\3\0\2\140"+
    "\3\0\6\140\21\0\15\140\1\u01dc\4\0\1\140\1\0"+
    "\21\140\3\0\2\140\3\0\6\140\21\0\16\167\4\0"+
    "\14\167\1\u01dd\6\167\3\0\2\167\3\0\6\167\21\0"+
    "\15\167\1\u01de\4\0\23\167\3\0\2\167\3\0\6\167"+
    "\21\0\14\140\1\u01df\1\140\4\0\1\140\1\0\21\140"+
    "\3\0\2\140\3\0\6\140\21\0\16\140\4\0\1\140"+
    "\1\0\7\140\1\u01e0\11\140\3\0\2\140\3\0\6\140"+
    "\21\0\14\167\1\u01e1\1\167\4\0\23\167\3\0\2\167"+
    "\3\0\6\167\21\0\16\167\4\0\11\167\1\u01e2\11\167"+
    "\3\0\2\167\3\0\6\167\21\0\2\140\1\u01e3\13\140"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\21\0\4\140\1\u01e4\11\140\4\0\1\140\1\0\21\140"+
    "\3\0\2\140\3\0\6\140\21\0\2\167\1\u01e5\13\167"+
    "\4\0\23\167\3\0\2\167\3\0\6\167\21\0\4\167"+
    "\1\u01e6\11\167\4\0\23\167\3\0\2\167\3\0\6\167"+
    "\21\0\1\140\1\u01c2\14\140\4\0\1\140\1\0\21\140"+
    "\3\0\2\140\3\0\6\140\21\0\16\140\4\0\1\140"+
    "\1\0\14\140\1\u01e7\4\140\3\0\2\140\3\0\6\140"+
    "\21\0\1\167\1\u01c6\14\167\4\0\23\167\3\0\2\167"+
    "\3\0\6\167\21\0\16\167\4\0\16\167\1\u01e8\4\167"+
    "\3\0\2\167\3\0\6\167\21\0\1\140\1\u01e9\14\140"+
    "\4\0\1\140\1\0\21\140\3\0\2\140\3\0\6\140"+
    "\21\0\1\167\1\u01ea\14\167\4\0\23\167\3\0\2\167"+
    "\3\0\6\167\21\0\4\140\1\u01eb\11\140\4\0\1\140"+
    "\1\0\21\140\3\0\2\140\3\0\6\140\21\0\4\167"+
    "\1\u01ec\11\167\4\0\23\167\3\0\2\167\3\0\6\167"+
    "\21\0\11\140\1\u01ed\4\140\4\0\1\140\1\0\21\140"+
    "\3\0\2\140\3\0\6\140\21\0\11\167\1\u01ee\4\167"+
    "\4\0\23\167\3\0\2\167\3\0\6\167\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28832];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\33\0\2\1\6\11\1\1\1\11\1\1\1\11\1\1"+
    "\2\11\2\1\4\11\2\1\1\11\3\1\2\11\1\1"+
    "\4\11\1\1\6\11\1\1\6\11\1\1\5\11\1\1"+
    "\2\11\2\1\1\11\3\1\3\11\24\1\1\11\1\1"+
    "\3\11\17\1\2\0\11\1\2\0\25\1\1\0\23\1"+
    "\2\0\13\1\2\0\21\1\1\0\20\1\1\0\1\11"+
    "\12\1\2\0\16\1\1\0\15\1\1\0\15\1\2\0"+
    "\13\1\1\11\2\1\1\0\12\1\1\11\12\1\1\0"+
    "\14\1\1\0\20\1\1\0\11\1\1\0\15\1\1\0"+
    "\10\1\1\0\12\1\1\0\5\1\1\0\10\1\1\0"+
    "\5\1\1\0\16\1\1\0\7\1\1\11\55\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[494];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Deque<Integer> stack = new ArrayDeque<>();


  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }


  public LatexLexer() {
    this((java.io.Reader)null);
  }

  /**
   * In order to avoid a parsing error for new environment definitions, this keeps track of the number of braces in the \newenvironment
   * parameters, so as to know when the parameters are exited.
   */
  private int newEnvironmentBracesNesting = 0;

  /**
   * Also keep track of brackets of verbatim environment optional arguments.
   */
  private int verbatimOptionalArgumentBracketsCount = 0;

  /**
   * Keep track of braces in the PARTIAL_DEFINITION state.
   * We need to count braces in order to avoid exiting the state too early, especially in case of entering this state incorrectly
   * (for example because someone has >{ in their text for whatever reason).
   */
  private int preambleOptionBracesCount = 0;

  /**
   * Remember the delimiter that inline verbatim started with, to check when to end it.
   */
  private String verbatim_delimiter = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 79: break;
          case 2: 
            { return BACKSLASH;
            } 
            // fall through
          case 80: break;
          case 3: 
            { return OPEN_PAREN;
            } 
            // fall through
          case 81: break;
          case 4: 
            { return CLOSE_PAREN;
            } 
            // fall through
          case 82: break;
          case 5: 
            { return OPEN_BRACKET;
            } 
            // fall through
          case 83: break;
          case 6: 
            { return CLOSE_BRACKET;
            } 
            // fall through
          case 84: break;
          case 7: 
            { return OPEN_BRACE;
            } 
            // fall through
          case 85: break;
          case 8: 
            { return CLOSE_BRACE;
            } 
            // fall through
          case 86: break;
          case 9: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 87: break;
          case 10: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 88: break;
          case 11: 
            { return STAR;
            } 
            // fall through
          case 89: break;
          case 12: 
            { return EXCLAMATION_MARK;
            } 
            // fall through
          case 90: break;
          case 13: 
            { return COMMENT_TOKEN;
            } 
            // fall through
          case 91: break;
          case 14: 
            { return EQUALS;
            } 
            // fall through
          case 92: break;
          case 15: 
            { yypushState(INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 93: break;
          case 16: 
            { return OPEN_ANGLE_BRACKET;
            } 
            // fall through
          case 94: break;
          case 17: 
            { return CLOSE_ANGLE_BRACKET;
            } 
            // fall through
          case 95: break;
          case 18: 
            { return AMPERSAND;
            } 
            // fall through
          case 96: break;
          case 19: 
            { return COMMA;
            } 
            // fall through
          case 97: break;
          case 20: 
            { return QUOTATION_MARK;
            } 
            // fall through
          case 98: break;
          case 21: 
            { return PIPE;
            } 
            // fall through
          case 99: break;
          case 22: 
            { return DASH;
            } 
            // fall through
          case 100: break;
          case 23: 
            { yypopState(); return INLINE_MATH_END;
            } 
            // fall through
          case 101: break;
          case 24: 
            { yypopState(); return CLOSE_BRACE;
            } 
            // fall through
          case 102: break;
          case 25: 
            { yypushState(NESTED_INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 103: break;
          case 26: 
            { preambleOptionBracesCount++; return OPEN_BRACE;
            } 
            // fall through
          case 104: break;
          case 27: 
            { if (preambleOptionBracesCount == 0) {
          yypopState();
        }
        else {
            preambleOptionBracesCount--;
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 105: break;
          case 28: 
            { yypopState();
          newEnvironmentBracesNesting = 0;
          yypushState(NEW_ENVIRONMENT_DEFINITION);
          return CLOSE_BRACE;
            } 
            // fall through
          case 106: break;
          case 29: 
            { newEnvironmentBracesNesting++; return OPEN_BRACE;
            } 
            // fall through
          case 107: break;
          case 30: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState(); yypushState(NEW_ENVIRONMENT_SKIP_BRACE);
            // We could have returned normal text, but in this way the braces still match
            return OPEN_BRACE;
        } else {
            return CLOSE_BRACE;
        }
            } 
            // fall through
          case 108: break;
          case 31: 
            { yypopState(); newEnvironmentBracesNesting = 1; yypushState(NEW_ENVIRONMENT_DEFINITION_END); return CLOSE_BRACE;
            } 
            // fall through
          case 109: break;
          case 32: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState();
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 110: break;
          case 33: 
            { yypopState(); yypushState(NEW_DOCUMENT_ENV_DEFINITION_ARGS_SPEC); newEnvironmentBracesNesting = 0; return CLOSE_BRACE;
            } 
            // fall through
          case 111: break;
          case 34: 
            { newEnvironmentBracesNesting--;
        if (newEnvironmentBracesNesting <= 0) {
            yypopState();
            yypushState(NEW_ENVIRONMENT_DEFINITION);
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 112: break;
          case 35: 
            { yypopState(); verbatim_delimiter = yytext().toString(); yypushState(INLINE_VERBATIM); return OPEN_BRACE;
            } 
            // fall through
          case 113: break;
          case 36: 
            { yypopState(); return BACKSLASH;
            } 
            // fall through
          case 114: break;
          case 37: 
            { yypopState(); yypushState(INLINE_VERBATIM_OPTIONAL_ARG); verbatimOptionalArgumentBracketsCount = 1; return OPEN_BRACKET;
            } 
            // fall through
          case 115: break;
          case 38: 
            { yypopState(); return CLOSE_BRACKET;
            } 
            // fall through
          case 116: break;
          case 39: 
            { yypopState(); verbatim_delimiter = "}"; yypushState(INLINE_VERBATIM); return OPEN_BRACE;
            } 
            // fall through
          case 117: break;
          case 40: 
            { if(yytext().toString().equals(verbatim_delimiter)) { yypopState(); return CLOSE_BRACE; } else { return RAW_TEXT_TOKEN; }
            } 
            // fall through
          case 118: break;
          case 41: 
            { yypopState();
            // toString to fix comparisons of charsequence subsequences with string
            if (EnvironmentMagic.verbatim.contains(yytext().toString())) {
                yypushState(VERBATIM_START);
            }
            else if (yytext().toString().equals("algorithmic")) {
                yypushState(PSEUDOCODE);
            }
            return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 119: break;
          case 42: 
            { verbatimOptionalArgumentBracketsCount++; return OPEN_BRACKET;
            } 
            // fall through
          case 120: break;
          case 43: 
            { verbatimOptionalArgumentBracketsCount--;
        if (verbatimOptionalArgumentBracketsCount == 0) { yypopState(); yypushState(VERBATIM); }
        return CLOSE_BRACKET;
            } 
            // fall through
          case 121: break;
          case 44: 
            { yypopState(); yypushState(POSSIBLE_VERBATIM_OPTIONAL_ARG); return CLOSE_BRACE;
            } 
            // fall through
          case 122: break;
          case 45: 
            { verbatimOptionalArgumentBracketsCount--;
        if (verbatimOptionalArgumentBracketsCount == 0) { yypopState(); yypushState(INLINE_VERBATIM_START); }
        return CLOSE_BRACKET;
            } 
            // fall through
          case 123: break;
          case 46: 
            { return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 124: break;
          case 47: 
            { yypopState(); yypushState(VERBATIM); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 125: break;
          case 48: 
            { verbatimOptionalArgumentBracketsCount = 1; yypopState(); yypushState(VERBATIM_OPTIONAL_ARG); return OPEN_BRACKET;
            } 
            // fall through
          case 126: break;
          case 49: 
            { yypopState(); yypushState(VERBATIM); return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 127: break;
          case 50: 
            { // Pop current state
        yypopState();
        if (EnvironmentMagic.verbatim.contains(yytext().toString())) {
            // Pop verbatim state
            yypopState();
            return NORMAL_TEXT_WORD;
        }
        return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 128: break;
          case 51: 
            { yypopState(); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 129: break;
          case 52: 
            { yypopState();
        if (yytext().toString().equals("algorithmic")) {
            // Pop pseudocode state
            yypopState();
        }
        return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 130: break;
          case 53: 
            { return COMMAND_TOKEN;
            } 
            // fall through
          case 131: break;
          case 54: 
            { yypushState(INLINE_MATH_LATEX); return INLINE_MATH_START;
            } 
            // fall through
          case 132: break;
          case 55: 
            { yypushState(DISPLAY_MATH); return DISPLAY_MATH_START;
            } 
            // fall through
          case 133: break;
          case 56: 
            { return MAGIC_COMMENT_TOKEN;
            } 
            // fall through
          case 134: break;
          case 57: 
            { yypushState(PARTIAL_DEFINITION); preambleOptionBracesCount = 0; return OPEN_BRACE;
            } 
            // fall through
          case 135: break;
          case 58: 
            { yypopState(); return DISPLAY_MATH_END;
            } 
            // fall through
          case 136: break;
          case 59: 
            { return DISPLAY_MATH_START;
            } 
            // fall through
          case 137: break;
          case 60: 
            { return DISPLAY_MATH_END;
            } 
            // fall through
          case 138: break;
          case 61: 
            { yypushState(INLINE_VERBATIM_START); return COMMAND_TOKEN;
            } 
            // fall through
          case 139: break;
          case 62: 
            { return BEGIN_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 140: break;
          case 63: 
            { return END_TOKEN;
            } 
            // fall through
          case 141: break;
          case 64: 
            { yypushState(POSSIBLE_VERBATIM_END); return END_TOKEN;
            } 
            // fall through
          case 142: break;
          case 65: 
            { yypushState(POSSIBLE_PSEUDOCODE_END); return END_TOKEN;
            } 
            // fall through
          case 143: break;
          case 66: 
            { yypushState(TEXT_INSIDE_INLINE_MATH); return COMMAND_TOKEN;
            } 
            // fall through
          case 144: break;
          case 67: 
            { return MIDDLE_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 145: break;
          case 68: 
            { yypushState(POSSIBLE_VERBATIM_BEGIN); return BEGIN_TOKEN;
            } 
            // fall through
          case 146: break;
          case 69: 
            { return BEGIN_TOKEN;
            } 
            // fall through
          case 147: break;
          case 70: 
            { return END_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 148: break;
          case 71: 
            { yypushState(PARTIAL_DEFINITION); preambleOptionBracesCount = -1; return COMMAND_TOKEN;
            } 
            // fall through
          case 149: break;
          case 72: 
            { yypopState(); return COMMENT_TOKEN;
            } 
            // fall through
          case 150: break;
          case 73: 
            { yypushState(OFF); return COMMENT_TOKEN;
            } 
            // fall through
          case 151: break;
          case 74: 
            { return COMMAND_IFNEXTCHAR;
            } 
            // fall through
          case 152: break;
          case 75: 
            { yypushState(LATEX3); return COMMAND_TOKEN;
            } 
            // fall through
          case 153: break;
          case 76: 
            { yypopState(); return COMMAND_TOKEN;
            } 
            // fall through
          case 154: break;
          case 77: 
            { yypushState(NEW_ENVIRONMENT_DEFINITION_NAME); return COMMAND_TOKEN;
            } 
            // fall through
          case 155: break;
          case 78: 
            { yypushState(NEW_DOCUMENT_ENV_DEFINITION_NAME); return COMMAND_TOKEN;
            } 
            // fall through
          case 156: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
