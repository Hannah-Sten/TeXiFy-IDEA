@inproceedings{Evans2015,
    abstract = {—Memory corruption attacks have been known for decades, but they are still a major vector of attack for compro-mising modern systems. Numerous defenses have been proposed against memory corruption attacks, but they all have their limitations and weaknesses. Stronger defenses such as complete memory safety incur a large overhead, while weaker ones such as practical control flow integrity have been shown to be ineffective. A recent technique called code pointer integrity (CPI) promises to balance security and performance by focusing memory safety on code pointers thus preventing most control-hijacking attacks while maintaining low overhead. CPI protects access to code pointers by storing them in a safe region that is protected by instruction level isolation. On x86-32, this isolation is enforced by hardware; on x86-64 and ARM, isolation is enforced by information hiding. We show that, for architectures that rely on information hiding, CPI's safe region can be leaked and then maliciously modified by using data pointer overwrites. We implement a proof-of-concept exploit against Nginx and successfully bypass CPI in 6 seconds with 13 observed crashes. We also present an attack that generates no crashes and is able to bypass CPI in 98 hours. Our attack demonstrates the importance of adequately protecting secrets in security mechanisms and the dangers of relying on difficulty of guessing without guaranteeing the absence of memory leaks},
    annote = {defeats: Code-Pointer Integrity},
    author = {Evans, Isaac and Fingeret, Sam and Gonzalez, Julian and Otgonbaatar, Ulziibayar and Tang, Tiffany and Shrobe, Howard and Sidiroglou-Douskos, Stelios and Rinard, Martin and Okhravi, Hamed},
    booktitle = {2015 IEEE Symposium on Security and Privacy},
    doi = {10.1109/EuroSP.2016.24},
    file = {:C$\backslash$:/Users/felixl/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Evans et al. - 2015 - Missing the point(er) On the effectiveness of code pointer integrity.pdf:pdf},
    isbn = {978-1-4673-6949-7},
    issn = {10816011},
    language = {en},
    month = {may},
    pages = {781--796},
    publisher = {IEEE},
    shorttitle = {Missing the Point(er)},
    title = {{Missing the Point(er): On the Effectiveness of Code Pointer Integrity}},
    url = {http://ieeexplore.ieee.org/document/7163060/ https://ieeexplore.ieee.org/document/7163060/},
    volume = {2015-July},
    year = {2015}
}

@book{Muchnick1997,
    author = {Muchnick, Steven},
    isbn = {978-1558603202},
    publisher = {Morgan Kaufmann},
    title = {{Advanced Compiler Design and Implementation}},
    year = {1997}
}

@article{Burow2016,
    abstract = {Memory corruption errors in C/C ++ programs remain the most common source of security vulnerabilities in today's systems. Control-flow hijacking attacks exploit memory corruption vulnerabilities to divert program execution away from the intended control flow. Researchers have spent more than a decade studying and refining defenses based on Control-Flow Integrity (CFI), and this technique is now integrated into several production compilers. However, so far no study has systematically compared the various proposed CFI mechanisms, nor is there any protocol on how to compare such mechanisms. We compare a broad range of CFI mechanisms using a unified nomenclature based on (i) a qualitative discussion of the conceptual security guarantees, (ii) a quantitative security evaluation, and (iii) an empirical evaluation of their performance in the same test environment. For each mechanism, we evaluate (i) protected types of control-flow transfers, (ii) the precision of the protection for forward and backward edges. For open-source compiler-based implementations, we additionally evaluate (iii) the generated equivalence classes and target sets, and (iv) the runtime performance.},
    author = {Burow, Nathan and Carr, Scott A and Nash, Joseph and Larsen, Per and Franz, Michael and Brunthaler, Stefan and Payer, Mathias},
    doi = {10.1145/3054924},
    file = {:C$\backslash$:/Users/felixl/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Burow et al. - 2016 - Control-Flow Integrity Precision, Security, and Performance.pdf:pdf},
    issn = {03600300},
    journal = {ACM Computing Surveys},
    keywords = {Additional Key Words and Phrases: control-flow int,CCS Concepts: •Security and privacy → Systems secu,Information flow control,Software and application security,control-flow hijacking,return oriented programming,shadow stack ACM Reference Format:,•General and reference → Surveys and overviews},
    month = {apr},
    number = {1},
    pages = {1--33},
    title = {{Control-Flow Integrity}},
    url = {http://dx.doi.org/10.1145/0000000.0000000 http://dl.acm.org/citation.cfm?doid=3058791.3054924},
    volume = {50},
    year = {2017}
}