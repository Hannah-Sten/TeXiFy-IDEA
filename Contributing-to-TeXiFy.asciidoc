:experimental:

See https://github.com/Ruben-Sten/TeXiFy-IDEA/blob/master/CONTRIBUTING.md for the general contributing guide.
Note that we keep track of 'internal' tasks at a YouTrack instance: https://texify-idea.myjetbrains.com/youtrack/issues

== Debugging performance issues

If you do not have a favourite profiler yet, you can use VisualVM. Install it using your package manager or go to https://visualvm.github.io/.

* First, just run TeXiFy like usual.
* Start VisualVM.
* In the Applications panel on the left, identify the instance of IntelliJ where TeXiFy is running, probably it is named Idea. Right-click on it and open.
* Go to the Sampler tab.
* Click Settings, and click Profile only packages. Specify `nl.hannahsten.**` or a specific class you want to filter on. Note that if you want to filter for a Kotlin class you have to append `Kt` to the class name, e.g. `nl.hannahsten.texifyidea.editor.UpDownAutoBracketKt`. However, not all classes will appear in the view.
* Click CPU to start profiling, you can take a Snapshot to view and save results. Note that you may have to click a few more levels open to see the actual methods.
* To clear the profiling view, close and reopen the tab.

== Don't edit generated files directly

So, the files in `gen`. Do edit the files in `src`.
If needed, use method injection or mixin classes.

=== Editing a lexer

For some documentation, see https://jflex.de/manual.html
When you edit a `.flex` file, regenerate the lexer with Run JFlex Generator from the context menu, as described at https://www.jetbrains.org/intellij/sdk/docs/tutorials/custom_language_support/lexer_and_parser_definition.html#generate-a-lexer-class

=== Editing a parser

When you edit a `.bnf` file, regenerate the parser with Grammar-Kit from the context menu or using kbd:[Ctrl + Shift + G].


Note that we have the generated files committed to git because of https://github.com/JetBrains/gradle-grammar-kit-plugin/issues/3

== Building from source

=== I know what I'm doing

* This project uses gradle. Make a new project from existing sources and import the project. Done.

=== I never did this before

We assume that git, IntelliJ, java and LaTeX are installed. If not, try the normal https://github.com/Hannah-Sten/TeXiFy-IDEA/wiki/Installation[installation instructions] first.

* Make a new project from version control if you don't have it yet downloaded, or from existing sources if you have.
* On the GitHub https://github.com/Hannah-Sten/TeXiFy-IDEA[home page] of TeXiFy click 'clone or download' and copy the url to Git Repository Url.
* If the project opens and you get a popup 'Import Gradle project', click that.
* If you are prompted to open the `build.gradle` file, do so.
* Select 'Use auto-import'.
* Thank Gradle that you're done now!
* Check that in menu:Settings[Build, Execution, Deployment > Compiler > Kotlin Compiler] the Target JVM version is set correctly, currently it should be 1.8. If you encounter an error like `Kotlin: Cannot inline bytecode built with JVM target 1.8 into bytecode that is being built with JVM target 1.6.` when building, you need to look here.
* Check that in menu:Settings[Build, Execution, Deployment > Build Tools > Gradle > Gradle JVM] it is set to at least Java 11 (as the IntelliJ SDK requires Java 11 since september 2020).
* Test it worked by executing the 'build' task in menu:Tasks[build > build].
* You can ignore deprecation warnings in the build output.
* If something doesn't work, try looking at the https://github.com/Hannah-Sten/TeXiFy-IDEA/wiki/Troubleshooting[FAQ] first.

==== To run directly from source
* Click the Gradle button on the right, the gradle task is located in menu:Tasks[intellj > runIde]. Double-click to run.
* If at some time you cannot use this and you need to run from command line, use `gradlew runIde`.
* Note how IntelliJ adds this task as a run configuration in the normal location if you have run it once, so you can use that one the next time.
* The first time it will look like you are installing a new IntelliJ - don't worry, just click through it.
* You can also debug against other IDEs. At the moment only PyCharm is set up, but it is easy to add others. You can use it by specifying the argument `-PusePycharm=true` in your runIde run configuration.
* To make a new project but also to open existing `.tex` files, use menu:New Project[LaTeX].
* Compile a `.tex` file by clicking on the gutter icon next to `\begin{document}` or create a custom run configuration using the drop-down menu.

==== To build a zip which contains the plugin
* Click the Gradle button on the right, the gradle task is located in menu:Tasks[intellij > buildPlugin]. Right-click and run. The zip will be in build/distributions.
* Install the zip in IntelliJ using menu:Settings[Plugins > Install plugin from disk].

==== To run tests
* Click the Gradle button on the right, the gradle task is located in menu:Tasks[verification > check]. Right-click and run. Note that check includes test so it will run the tests as well as ktlint.


== LatexCommands.commandToken.text vs LatexCommands.name

Throughout the code, you may see either `LatexCommands.commandToken.text` or `LatexCommands.name` being used to get the command name (e.g. `\section`).
Since the (generated) implementation of `getName()` is

[source,java]
----
default String getName() {
    return getCommandToken().getText();
}
----

you would think that these are the same.
But there is an important difference! The `name` is _indexed_ (see `LatexCommandsIndex`).
This means that probably using `name` is recommended, as it would use the index, but it may be completely wrong if the index is not updated correctly.
This can lead to strange behaviour (see e.g. https://github.com/Hannah-Sten/TeXiFy-IDEA/issues/1097[#1097]), which can be fixed by updating the index correctly.

== Helpful tools

* menu:Tools[View PSI Structure]
* menu:Tools[Internal Actions > UI > UI Inspector] to view information about any UI element

== Debugging plugin unload fail

See https://plugins.jetbrains.com/docs/intellij/dynamic-plugins.html?from=jetbrains.org#troubleshooting
* Make sure the runIde run config has Allow parallel run selected
* Run runIde
* Set registry key `ide.plugins.snapshot.on.unload.fail` (if not already set)
* Change something in the code
* runIde again
* Install YourKit (I have also tried with Eclips MAT, IntelliJ and visualvm but none worked)
* Open the generated hprof file
* Go to Class loader, find the class loader which references TeXiFy things and click Paths from GC Roots.
* The classes that are mentioned there, were not unloaded successfully for whatever reason.

== Troubleshooting

=== bad class file: class file has wrong version 55.0, should be 52.0

The IntelliJ SDK https://blog.jetbrains.com/platform/2020/09/intellij-project-migrates-to-java-11/[requires Java 11], see https://stackoverflow.com/a/59783851/4126843.

=== Execution failed for task ':runIde'.	Process 'command java.exe' finished with non-zero exit value 1

If you get the error `Caused by: org.gradle.process.internal.ExecException: Process 'command 'C:\Users\username\.gradle\caches\modules-2\files-2.1\com.jetbrains\jbre\jbr-11_0_6-windows-x64-b765.25\jbr\bin\java.exe'' finished with non-zero exit value 1` then delete the `jbre` folder in that path.

=== `Gtk-WARNING **: Unable to locate theme engine in module_path: "murrine"`

If you get this warning, it is not critical so you could ignore it but to solve it you can install the mentioned gtk engine, in this case Murrine.
For example on Arch Linux, install the `gtk-engine-murrine` package. Arch Linux sets the default theme to Adwaita, so install that with the `gnome-themes-extra` package.
For more information see https://wiki.archlinux.org/index.php/GTK+[wiki.archlinux.org].

=== `Unable to find method 'sun.misc.Unsafe.defineClass'` or `Please provide the path to the Android SDK` when syncing Gradle

This probably means your Gradle cache is corrupt, delete (on Windows) `C:\Users\username\.gradle\caches` and `C:\Users\username\.gradle\wrapper\dists` or (on Linux) `~/.gradle/caches` and `~/.gradle/wrapper/dists`, then reboot your system.

=== `Error: java: package com.google.common.base does not exist`

* Update IntelliJ (help - check for updates).
* Update your IntelliJ SDK: go to Project Structure - SDKs.
* Hit the plus in the middle column and select IntelliJ Platform Plugin SDK.
* Select your IntelliJ installation directory (e.g. `C:\Program Files (x86)\JetBrains\IntelliJ IDEA xxxx.x`).
* Remove your old SDK. It is called 'IntelliJ IDEA IU-xxx' where `xxx` is anything but the highest number.
* Go to Project Structure - Project and select the new SDK.

== Updating the MiKTeX Docker image

Because the official https://hub.docker.com/r/miktex/miktex[miktex/miktex] is at the moment rather out of date, we provide an updated version.
It can be updated as follows.
* Clone the source repo https://github.com/MiKTeX/docker-miktex
* Create a Docker run config with image tag `docker.pkg.github.com/hannah-sten/texify-idea/miktex:latest` and run it.
* Make sure that there is a valid Docker Registry for GitHub in Settings > Build, ..., > Docker > Registry, point it to `docker.pkg.github.com` and as a password provide a PAT (see https://docs.github.com/en/packages/guides/pushing-and-pulling-docker-images#authenticating-to-github-container-registry).
* Right-click the image and click Push, provide as repository `hannah-sten/texify-idea/miktex` and tag `latest`.