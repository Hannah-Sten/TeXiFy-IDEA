{
    parserClass="nl.hannahsten.texifyidea.parser.BibtexParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Bibtex"
    psiImplClassSuffix="Impl"
    psiPackage="nl.hannahsten.texifyidea.psi"
    psiImplPackage="nl.hannahsten.texifyidea.psi.impl"
    psiImplUtilClass="nl.hannahsten.texifyidea.psi.BibtexPsiImplUtil"

    elementTypeHolderClass="nl.hannahsten.texifyidea.psi.BibtexTypes"
    elementTypeClass="nl.hannahsten.texifyidea.psi.BibtexElementType"
    tokenTypeClass="nl.hannahsten.texifyidea.psi.BibtexTokenType"

    extends("entry")="com.intellij.extapi.psi.StubBasedPsiElementBase<nl.hannahsten.texifyidea.index.stub.BibtexEntryStub>"
    implements("entry")="com.intellij.psi.PsiNameIdentifierOwner"
    implements("id")="com.intellij.psi.PsiNameIdentifierOwner"

    tokens = [
        RAW_TEXT_TOKEN='RAW_TEXT'
    ]

}

bibtexFile ::= (entry | comment)*

entry ::= type (OPEN_BRACE | OPEN_PARENTHESIS) ((id SEPARATOR)? entry_content | preamble) comment* endtry comment* SEPARATOR? {
    elementTypeClass="nl.hannahsten.texifyidea.index.stub.BibtexEntryStubElementType"
    stubClass="nl.hannahsten.texifyidea.index.stub.BibtexEntryStub"
    methods=[getReferences getTitle getAuthors getYear getIdentifier getNameIdentifier getAbstract getTagContent getName setName toString]
}

entry_content ::= tag (SEPARATOR tag)* SEPARATOR? { pin=1 }

endtry ::= SEPARATOR? comment* (CLOSE_BRACE | CLOSE_PARENTHESIS)

type ::= TYPE_TOKEN

preamble ::= (quoted_string (CONCATENATE quoted_string)*) | NUMBER | key

id ::= comment* key comment* {
    methods=[getNameIdentifier getName setName delete]
}

tag ::= comment* key comment* ASSIGNMENT comment* content comment* {
    pin=2
    methods=[getReferences]
}

key ::= VERBATIM_IDENTIFIER | IDENTIFIER

content ::= (string (CONCATENATE string)+) | string | NUMBER | key

string ::= defined_string | quoted_verbatim | braced_verbatim | quoted_string | braced_string

defined_string ::= key {
    methods=[getReference]
}

quoted_string ::= QUOTES normal_text? END_QUOTES { pin=1 }

// pin=3 because it would get in the way of the quoted string otherwise.
quoted_verbatim ::= QUOTES raw_text* END_QUOTES { pin=3 }

braced_string ::= OPEN_BRACE normal_text* CLOSE_BRACE { pin=1 }

// pin=3 because it would get in the way of the braced string otherwise.
braced_verbatim ::= OPEN_BRACE raw_text* CLOSE_BRACE { pin=3 }

comment ::= COMMENT_TOKEN

normal_text ::= NORMAL_TEXT_WORD+

raw_text ::= RAW_TEXT_TOKEN+