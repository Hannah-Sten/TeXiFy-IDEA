/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package nl.hannahsten.texifyidea.grammar;

import com.intellij.lexer.FlexLexer;
import java.util.*;

import com.intellij.psi.tree.IElementType;
import nl.hannahsten.texifyidea.util.magic.EnvironmentMagic;

import static nl.hannahsten.texifyidea.psi.LatexTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LatexLexer.flex</tt>
 */
public class LatexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INLINE_MATH = 2;
  public static final int INLINE_MATH_LATEX = 4;
  public static final int DISPLAY_MATH = 6;
  public static final int TEXT_INSIDE_INLINE_MATH = 8;
  public static final int NESTED_INLINE_MATH = 10;
  public static final int PARTIAL_DEFINITION = 12;
  public static final int NEW_ENVIRONMENT_DEFINITION_NAME = 14;
  public static final int NEW_ENVIRONMENT_DEFINITION = 16;
  public static final int NEW_ENVIRONMENT_SKIP_BRACE = 18;
  public static final int NEW_ENVIRONMENT_DEFINITION_END = 20;
  public static final int NEW_DOCUMENT_ENV_DEFINITION_NAME = 22;
  public static final int NEW_DOCUMENT_ENV_DEFINITION_ARGS_SPEC = 24;
  public static final int LATEX3 = 26;
  public static final int INLINE_VERBATIM_PLAIN_START = 28;
  public static final int INLINE_VERBATIM = 30;
  public static final int INLINE_VERBATIM_NORMAL_START = 32;
  public static final int POSSIBLE_VERBATIM_BEGIN = 34;
  public static final int VERBATIM_OPTIONAL_ARG = 36;
  public static final int VERBATIM_START = 38;
  public static final int VERBATIM_END = 40;
  public static final int INLINE_VERBATIM_OPTIONAL_ARG = 42;
  public static final int VERBATIM = 44;
  public static final int POSSIBLE_VERBATIM_OPTIONAL_ARG = 46;
  public static final int POSSIBLE_VERBATIM_END = 48;
  public static final int PSEUDOCODE = 50;
  public static final int POSSIBLE_PSEUDOCODE_END = 52;
  public static final int OFF = 54;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4224 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\2\5\1\17\u01e2\5");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\55\6\1\7\3\6\1\10\6\6\1\7\14\6\1\11\3\6\1\11\3\6"+
    "\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\2\6\1"+
    "\10\3\6\1\10\2\6\1\7\10\6\1\7\1\6\1\10\57\6\1\5\12\6\1\7\1\10\11\6\1\11\3"+
    "\6\1\10\5\6\1\12\5\6\1\10\2\6\1\10\4\6\1\12\35\6\1\13\1\14\1\15\175\6\1\5"+
    "\160\6\1\7\24\6\1\10\1\6\1\7\5\6\2\10\2\6\1\10\14\6\1\10\130\6\1\10\54\6\1"+
    "\7\35\6\1\11\3\6\1\10\1\6\1\16\4\6\1\10\10\6\1\10\12\6\1\10\3\6\1\10\13\6"+
    "\1\10\3\6\1\7\2\6\1\10\15\6\1\7\32\6\1\10\60\6\1\7\6\6\1\10\143\6\1\17\1\20"+
    "\12\6\1\10\65\6");

  /* The ZZ_CMAP_A table has 544 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\10\1\27\2\31\1\30\22\0\1\60\1\57\1\103\1\0\1\74\1\63\1\102\1\0\1\2"+
    "\1\3\1\56\1\77\1\101\1\77\2\0\12\100\1\34\1\0\1\75\1\64\1\76\1\0\1\17\1\67"+
    "\2\33\1\54\1\35\1\66\2\33\1\70\2\33\1\72\1\33\1\52\1\42\1\43\1\33\1\53\1\40"+
    "\1\61\1\73\1\33\1\71\1\62\2\33\1\4\1\1\1\5\1\0\1\34\1\0\1\25\1\11\1\23\1\16"+
    "\1\12\1\20\1\13\1\24\1\14\1\33\1\47\1\37\1\51\1\15\1\44\1\36\1\33\1\26\1\46"+
    "\1\22\1\55\1\45\1\50\1\21\1\41\1\33\1\6\1\104\1\7\7\0\1\32\32\0\1\65\77\0"+
    "\12\77\46\0\12\77\14\0\12\77\20\0\12\77\6\0\12\77\6\0\13\65\35\0\2\32\5\0"+
    "\1\65\57\0\1\65\26\0\12\77\16\0\62\77");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\2\1\26"+
    "\3\2\1\27\1\30\1\2\1\31\1\32\1\1\1\33"+
    "\1\2\1\34\1\35\1\36\1\37\1\40\1\41\1\2"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\2\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\2\1\66\1\60\1\67"+
    "\1\70\1\71\21\67\1\15\1\72\1\15\1\73\1\0"+
    "\1\67\1\74\1\67\1\75\1\76\17\67\2\0\11\67"+
    "\2\0\12\67\1\77\11\67\1\72\1\0\1\72\1\15"+
    "\1\100\11\67\1\77\10\67\2\0\7\67\1\101\3\67"+
    "\2\0\1\67\1\102\7\67\1\77\7\67\1\0\1\72"+
    "\1\15\10\67\1\77\6\67\1\0\1\103\1\104\4\67"+
    "\1\101\4\67\2\0\6\67\1\105\6\67\1\105\2\67"+
    "\1\0\1\72\1\15\1\106\4\67\1\105\3\67\1\105"+
    "\2\67\1\0\5\67\1\107\7\67\2\0\1\110\13\67"+
    "\1\105\2\67\1\0\1\72\11\67\1\111\3\67\1\112"+
    "\6\67\1\0\15\67\1\0\1\72\17\67\1\0\5\67"+
    "\1\113\4\67\1\0\1\72\14\67\1\0\1\114\10\67"+
    "\1\0\1\72\11\67\1\0\5\67\1\0\1\72\7\67"+
    "\1\0\5\67\1\0\1\72\7\67\1\115\5\67\1\0"+
    "\1\116\6\67\1\117\1\120\3\67\1\120\7\67\1\121"+
    "\2\67\1\122\2\67\1\122\30\67\2\123";

  private static int [] zzUnpackAction() {
    int [] result = new int[509];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633"+
    "\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816\0\u0816"+
    "\0\u0816\0\u0816\0\u0816\0\u0816\0\u085b\0\u0816\0\u078c\0\u0816"+
    "\0\u08a0\0\u0816\0\u0816\0\u08e5\0\u092a\0\u0816\0\u0816\0\u0816"+
    "\0\u0816\0\u096f\0\u0816\0\u09b4\0\u09f9\0\u0a3e\0\u0816\0\u0816"+
    "\0\u0a83\0\u0816\0\u0816\0\u0816\0\u0816\0\u0ac8\0\u0816\0\u0816"+
    "\0\u0816\0\u0816\0\u0816\0\u0816\0\u0b0d\0\u0816\0\u0816\0\u0816"+
    "\0\u0816\0\u0816\0\u0816\0\u0816\0\u0816\0\u0816\0\u0b52\0\u0816"+
    "\0\u0816\0\u0816\0\u0816\0\u0816\0\u0b97\0\u0816\0\u0816\0\u0bdc"+
    "\0\u0c21\0\u0816\0\u0c66\0\u0cab\0\u0cf0\0\u0816\0\u0816\0\u0816"+
    "\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18"+
    "\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140"+
    "\0\u1185\0\u11ca\0\u120f\0\u1254\0\u0816\0\u1299\0\u12de\0\u0816"+
    "\0\u1323\0\u0816\0\u0816\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c"+
    "\0\u14c1\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4"+
    "\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc"+
    "\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4"+
    "\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c"+
    "\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44"+
    "\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2\0\u2127\0\u0816"+
    "\0\u216c\0\u21b1\0\u21f6\0\u223b\0\u2280\0\u22c5\0\u230a\0\u234f"+
    "\0\u2394\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577"+
    "\0\u25bc\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f"+
    "\0\u27e4\0\u2829\0\u286e\0\u0dbf\0\u28b3\0\u28f8\0\u293d\0\u2982"+
    "\0\u29c7\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa"+
    "\0\u2bef\0\u2c34\0\u0dbf\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d"+
    "\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b\0\u2a51\0\u2f70"+
    "\0\u2fb5\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\u1368\0\u310e\0\u3153"+
    "\0\u3198\0\u31dd\0\u3222\0\u3267\0\u32ac\0\u0816\0\u2a51\0\u32f1"+
    "\0\u3336\0\u337b\0\u33c0\0\u3405\0\u344a\0\u348f\0\u34d4\0\u3519"+
    "\0\u355e\0\u35a3\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u36fc\0\u3741"+
    "\0\u0dbf\0\u3786\0\u37cb\0\u3810\0\u3855\0\u389a\0\u38df\0\u3924"+
    "\0\u3969\0\u39ae\0\u39f3\0\u3a38\0\u3a7d\0\u0dbf\0\u3ac2\0\u3b07"+
    "\0\u3b4c\0\u3b91\0\u1368\0\u3bd6\0\u3c1b\0\u3c60\0\u3ca5\0\u3cea"+
    "\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe\0\u3e43\0\u3e88\0\u3ecd\0\u0dbf"+
    "\0\u3f12\0\u3f57\0\u3f9c\0\u3fe1\0\u4026\0\u406b\0\u40b0\0\u40f5"+
    "\0\u413a\0\u0dbf\0\u417f\0\u41c4\0\u4209\0\u424e\0\u4293\0\u42d8"+
    "\0\u431d\0\u4362\0\u43a7\0\u43ec\0\u4431\0\u0816\0\u4476\0\u44bb"+
    "\0\u4500\0\u4545\0\u458a\0\u45cf\0\u4614\0\u4659\0\u469e\0\u46e3"+
    "\0\u4728\0\u476d\0\u47b2\0\u0816\0\u47f7\0\u483c\0\u4881\0\u0dbf"+
    "\0\u48c6\0\u490b\0\u4950\0\u4995\0\u49da\0\u4a1f\0\u4a64\0\u4aa9"+
    "\0\u4aee\0\u4b33\0\u4b78\0\u4bbd\0\u4c02\0\u4c47\0\u4c8c\0\u4cd1"+
    "\0\u4d16\0\u4d5b\0\u4da0\0\u4de5\0\u4e2a\0\u4e6f\0\u4eb4\0\u4ef9"+
    "\0\u4f3e\0\u4f83\0\u4fc8\0\u500d\0\u5052\0\u5097\0\u50dc\0\u5121"+
    "\0\u5166\0\u51ab\0\u51f0\0\u5235\0\u527a\0\u52bf\0\u5304\0\u5349"+
    "\0\u538e\0\u53d3\0\u5418\0\u0dbf\0\u545d\0\u54a2\0\u54e7\0\u552c"+
    "\0\u5571\0\u55b6\0\u55fb\0\u5640\0\u5685\0\u56ca\0\u570f\0\u5754"+
    "\0\u5799\0\u57de\0\u5823\0\u5868\0\u58ad\0\u58f2\0\u5937\0\u0dbf"+
    "\0\u597c\0\u59c1\0\u5a06\0\u5a4b\0\u5a90\0\u5ad5\0\u5b1a\0\u5b5f"+
    "\0\u5ba4\0\u5be9\0\u5c2e\0\u5c73\0\u5cb8\0\u5cfd\0\u5d42\0\u5d87"+
    "\0\u5dcc\0\u5e11\0\u5e56\0\u5e9b\0\u5ee0\0\u5f25\0\u5f6a\0\u5faf"+
    "\0\u5ff4\0\u6039\0\u607e\0\u60c3\0\u6108\0\u614d\0\u6192\0\u61d7"+
    "\0\u621c\0\u6261\0\u62a6\0\u62eb\0\u6330\0\u6375\0\u63ba\0\u63ff"+
    "\0\u6444\0\u6489\0\u64ce\0\u6513\0\u6558\0\u659d\0\u65e2\0\u6627"+
    "\0\u666c\0\u66b1\0\u66f6\0\u673b\0\u6780\0\u67c5\0\u680a\0\u684f"+
    "\0\u6894\0\u68d9\0\u691e\0\u6963\0\u69a8\0\u69ed\0\u6a32\0\u0816"+
    "\0\u0dbf\0\u6a77\0\u6abc\0\u6b01\0\u1368\0\u6b46\0\u6b8b\0\u6bd0"+
    "\0\u6c15\0\u6c5a\0\u6c9f\0\u6ce4\0\u1368\0\u6d29\0\u6d6e\0\u0dbf"+
    "\0\u6db3\0\u6df8\0\u1368\0\u6e3d\0\u6e82\0\u6ec7\0\u6f0c\0\u6f51"+
    "\0\u6f96\0\u6fdb\0\u7020\0\u7065\0\u70aa\0\u70ef\0\u7134\0\u7179"+
    "\0\u71be\0\u7203\0\u7248\0\u728d\0\u72d2\0\u7317\0\u735c\0\u73a1"+
    "\0\u73e6\0\u742b\0\u7470\0\u0dbf\0\u1368";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[509];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\16\35\3\45\1\46\23\35\1\47\1\50\1\45"+
    "\2\35\1\51\1\52\1\46\6\35\1\53\1\54\1\55"+
    "\2\35\1\56\1\57\1\60\1\61\1\35\1\62\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\16\35\3\45"+
    "\1\46\23\35\1\47\1\50\1\45\2\35\1\51\1\52"+
    "\1\46\6\35\1\63\1\54\1\55\2\35\1\56\1\57"+
    "\1\60\1\61\1\35\1\64\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\16\35\3\45\1\46\23\35\1\47"+
    "\1\50\1\45\2\35\1\51\1\52\1\46\6\35\1\46"+
    "\1\54\1\55\2\35\1\56\1\57\1\60\1\61\1\35"+
    "\1\65\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\16\35\3\45\1\46\23\35\1\47\1\50\1\45\2\35"+
    "\1\51\1\52\1\46\6\35\1\53\1\54\1\55\2\35"+
    "\1\56\1\57\1\60\1\61\1\35\1\66\1\37\1\40"+
    "\1\41\1\42\1\43\1\67\1\45\16\35\3\45\1\46"+
    "\23\35\1\47\1\50\1\45\2\35\1\51\1\52\1\46"+
    "\6\35\1\70\1\54\1\55\2\35\1\56\1\57\1\60"+
    "\1\61\1\35\1\66\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\16\35\3\45\1\46\23\35\1\47\1\50"+
    "\1\45\2\35\1\51\1\52\1\46\6\35\1\63\1\54"+
    "\1\55\2\35\1\56\1\57\1\60\1\61\1\35\1\71"+
    "\1\37\1\40\1\41\1\42\1\72\1\73\1\45\16\35"+
    "\3\45\1\46\23\35\1\47\1\50\1\45\2\35\1\51"+
    "\1\52\1\46\6\35\1\74\1\54\1\55\2\35\1\56"+
    "\1\57\1\60\1\61\1\35\1\66\1\37\1\40\1\41"+
    "\1\42\1\43\1\75\1\45\16\35\3\45\1\46\23\35"+
    "\1\47\1\50\1\45\2\35\1\51\1\52\1\46\6\35"+
    "\1\46\1\54\1\55\2\35\1\56\1\57\1\60\1\61"+
    "\1\35\1\76\1\37\1\40\1\41\1\42\1\77\1\100"+
    "\1\45\16\35\3\45\1\46\23\35\1\47\1\50\1\45"+
    "\2\35\1\51\1\52\1\46\6\35\1\74\1\54\1\55"+
    "\2\35\1\56\1\57\1\60\1\61\1\35\1\66\1\37"+
    "\1\40\1\41\1\42\1\101\1\44\1\45\16\35\3\45"+
    "\1\46\23\35\1\47\1\50\1\45\2\35\1\51\1\52"+
    "\1\46\6\35\1\46\1\54\1\55\2\35\1\56\1\57"+
    "\1\60\1\61\1\35\1\76\1\37\1\40\1\41\1\42"+
    "\1\77\1\102\1\45\16\35\3\45\1\46\23\35\1\47"+
    "\1\50\1\45\2\35\1\51\1\52\1\46\6\35\1\74"+
    "\1\54\1\55\2\35\1\56\1\57\1\60\1\61\1\35"+
    "\1\66\1\37\1\40\1\41\1\42\1\43\1\103\1\45"+
    "\16\35\3\45\1\46\23\35\1\47\1\50\1\45\2\35"+
    "\1\51\1\52\1\46\6\35\1\46\1\54\1\55\2\35"+
    "\1\56\1\57\1\60\1\61\1\35\1\66\1\37\1\40"+
    "\1\41\1\42\1\77\1\104\1\45\16\35\3\45\1\46"+
    "\23\35\1\47\1\50\1\45\2\35\1\51\1\52\1\46"+
    "\6\35\1\46\1\54\1\55\2\35\1\56\1\57\1\60"+
    "\1\61\1\35\1\105\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\16\35\3\45\1\46\23\35\1\47\1\50"+
    "\1\45\2\35\1\51\1\52\1\46\6\35\1\46\1\54"+
    "\1\55\2\35\1\56\1\57\1\60\1\61\1\106\1\107"+
    "\1\110\1\106\1\111\1\112\1\113\1\67\75\106\105\114"+
    "\1\106\1\107\1\110\1\106\1\115\1\112\1\116\1\67"+
    "\75\106\1\117\1\76\1\37\1\40\1\41\1\42\1\77"+
    "\1\67\1\45\16\117\3\45\1\46\24\117\1\50\1\45"+
    "\2\117\1\51\1\52\1\46\6\117\1\74\1\54\1\55"+
    "\2\117\1\56\1\57\1\60\1\61\1\35\1\66\1\37"+
    "\1\40\1\120\1\121\1\43\1\44\1\45\16\35\3\45"+
    "\1\46\23\35\1\47\1\50\1\45\2\35\1\51\1\52"+
    "\1\46\6\35\1\46\1\54\1\55\2\35\1\56\1\57"+
    "\1\60\1\61\1\35\1\66\1\37\1\40\1\41\1\42"+
    "\1\43\1\122\1\45\16\35\3\45\1\46\23\35\1\47"+
    "\1\50\1\45\2\35\1\51\1\52\1\46\6\35\1\46"+
    "\1\54\1\55\2\35\1\56\1\57\1\60\1\61\1\35"+
    "\1\66\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\16\35\3\45\1\46\23\35\1\47\1\50\1\45\2\35"+
    "\1\51\1\52\1\46\6\35\1\46\1\54\1\55\2\35"+
    "\1\56\1\57\1\60\1\61\1\35\1\66\1\37\1\40"+
    "\1\120\1\123\1\43\1\44\1\45\16\35\3\45\1\46"+
    "\23\35\1\47\1\50\1\45\2\35\1\51\1\52\1\46"+
    "\6\35\1\46\1\54\1\55\2\35\1\56\1\57\1\60"+
    "\1\61\1\124\1\125\6\124\1\45\16\124\3\45\26\124"+
    "\1\45\24\124\4\126\1\127\3\126\1\130\16\126\3\130"+
    "\26\126\1\130\24\126\1\131\5\132\1\43\2\132\16\131"+
    "\4\132\24\131\2\132\2\131\3\132\6\131\3\132\2\131"+
    "\4\132\1\35\1\133\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\16\35\3\45\1\46\23\35\1\47\1\50"+
    "\1\45\2\35\1\51\1\52\1\46\6\35\1\53\1\54"+
    "\1\55\2\35\1\56\1\57\1\60\1\61\1\134\1\66"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\16\134"+
    "\3\45\1\46\24\134\1\50\1\45\2\134\1\51\1\52"+
    "\1\46\6\134\1\46\1\54\1\55\2\134\1\56\1\57"+
    "\1\60\1\61\63\124\1\135\21\124\1\35\10\0\16\35"+
    "\4\0\24\35\2\0\2\35\3\0\6\35\3\0\2\35"+
    "\4\0\2\136\1\137\1\136\1\140\4\136\1\141\1\142"+
    "\2\143\1\144\1\145\1\146\4\143\1\147\1\143\1\150"+
    "\1\0\1\136\2\0\1\143\1\136\1\151\1\152\1\153"+
    "\3\143\1\154\1\143\1\155\4\143\1\156\1\157\1\160"+
    "\1\161\3\136\2\143\3\136\6\143\11\136\115\0\1\45"+
    "\16\0\3\45\26\0\1\45\24\0\27\162\2\0\26\162"+
    "\1\163\1\164\24\162\6\0\1\165\70\0\3\166\11\0"+
    "\1\165\76\0\4\136\1\140\4\136\1\141\1\142\2\143"+
    "\1\144\1\145\1\146\2\143\1\167\1\143\1\147\1\143"+
    "\1\150\1\0\1\136\2\0\1\143\1\136\1\151\1\152"+
    "\1\153\3\143\1\154\1\143\1\155\4\143\1\156\1\157"+
    "\1\160\1\161\3\136\2\143\3\136\6\143\14\136\1\63"+
    "\1\140\4\136\1\141\1\142\2\143\1\144\1\145\1\146"+
    "\4\143\1\147\1\143\1\150\1\0\1\136\2\0\1\143"+
    "\1\136\1\151\1\152\1\153\3\143\1\154\1\143\1\155"+
    "\4\143\1\156\1\157\1\160\1\161\3\136\2\143\3\136"+
    "\6\143\13\136\1\137\1\136\1\140\1\170\3\136\1\141"+
    "\1\142\2\143\1\144\1\145\1\146\4\143\1\147\1\143"+
    "\1\150\1\0\1\136\2\0\1\143\1\136\1\151\1\152"+
    "\1\153\3\143\1\154\1\143\1\155\4\143\1\156\1\157"+
    "\1\160\1\161\3\136\2\143\3\136\6\143\15\136\1\140"+
    "\4\136\1\141\1\142\2\143\1\144\1\145\1\146\4\143"+
    "\1\147\1\143\1\150\1\0\1\136\2\0\1\143\1\136"+
    "\1\151\1\152\1\153\3\143\1\154\1\143\1\155\4\143"+
    "\1\156\1\157\1\160\1\161\3\136\2\143\3\136\6\143"+
    "\15\136\1\140\4\136\1\143\1\171\2\143\1\144\1\145"+
    "\1\146\4\143\1\147\1\143\1\150\1\0\1\136\2\0"+
    "\1\143\1\136\1\151\1\152\1\153\3\143\1\154\1\143"+
    "\1\155\4\143\1\156\1\157\1\160\1\161\3\136\2\143"+
    "\3\136\6\143\15\136\1\172\1\173\3\136\1\141\1\142"+
    "\2\143\1\144\1\145\1\146\4\143\1\147\1\143\1\150"+
    "\1\0\1\136\2\0\1\143\1\136\1\151\1\152\1\153"+
    "\3\143\1\154\1\143\1\155\4\143\1\156\1\157\1\160"+
    "\1\161\3\136\2\143\3\136\6\143\15\136\1\140\4\136"+
    "\4\174\1\175\1\176\1\177\4\174\1\200\1\174\1\201"+
    "\1\0\1\136\2\0\2\174\1\202\1\203\1\204\3\174"+
    "\1\205\1\174\1\206\4\174\1\207\1\210\1\211\1\212"+
    "\3\136\2\174\3\136\6\174\4\136\1\174\4\136\1\117"+
    "\10\0\16\117\4\0\24\117\2\0\2\117\3\0\6\117"+
    "\3\0\2\117\15\0\1\213\1\214\102\0\1\130\16\0"+
    "\3\130\26\0\1\130\24\0\1\131\10\0\16\131\4\0"+
    "\24\131\2\0\2\131\3\0\6\131\3\0\2\131\4\0"+
    "\2\136\1\137\1\136\1\140\4\136\1\141\1\215\2\143"+
    "\1\144\1\145\1\146\4\143\1\147\1\143\1\150\1\0"+
    "\1\136\2\0\1\143\1\136\1\216\1\152\1\153\3\143"+
    "\1\217\1\143\1\155\4\143\1\156\1\220\1\160\1\161"+
    "\3\136\2\143\3\136\1\221\1\143\1\222\1\223\1\224"+
    "\1\225\11\136\1\134\10\0\16\134\4\0\24\134\2\0"+
    "\2\134\3\0\6\134\3\0\2\134\63\0\1\226\1\227"+
    "\35\0\1\143\1\230\14\143\4\0\1\143\1\0\21\143"+
    "\3\0\2\143\3\0\6\143\22\0\4\143\1\231\11\143"+
    "\4\0\1\143\1\0\21\143\3\0\2\143\3\0\6\143"+
    "\22\0\16\143\4\0\1\143\1\0\21\143\3\0\2\143"+
    "\3\0\6\143\22\0\1\143\1\232\14\143\4\0\1\143"+
    "\1\0\21\143\3\0\2\143\3\0\6\143\22\0\3\143"+
    "\1\233\12\143\4\0\1\143\1\0\21\143\3\0\2\143"+
    "\3\0\6\143\22\0\3\143\1\234\12\143\4\0\1\143"+
    "\1\0\21\143\3\0\2\143\3\0\6\143\22\0\15\143"+
    "\1\235\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\22\0\1\143\1\236\14\143\4\0\1\143\1\0"+
    "\21\143\3\0\2\143\3\0\6\143\22\0\10\143\1\237"+
    "\5\143\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\22\0\14\143\1\240\1\241\4\0\1\143\1\0"+
    "\4\143\1\242\2\143\1\243\11\143\3\0\2\143\3\0"+
    "\6\143\22\0\16\143\4\0\1\143\1\0\11\143\1\244"+
    "\6\143\1\245\3\0\2\143\3\0\6\143\22\0\15\143"+
    "\1\246\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\22\0\1\143\1\247\14\143\4\0\1\143\1\0"+
    "\21\143\3\0\2\143\3\0\6\143\22\0\1\143\1\250"+
    "\14\143\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\22\0\1\143\1\251\14\143\4\0\1\143\1\0"+
    "\21\143\3\0\2\143\3\0\6\143\22\0\1\143\1\252"+
    "\14\143\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\22\0\15\143\1\253\4\0\1\143\1\0\21\143"+
    "\3\0\2\143\3\0\6\143\11\0\27\162\2\0\54\162"+
    "\10\254\1\163\16\254\2\255\1\163\4\254\1\256\21\254"+
    "\1\163\24\254\27\162\2\0\26\162\1\257\25\162\76\0"+
    "\1\260\3\166\14\0\1\143\1\261\14\143\4\0\1\143"+
    "\1\0\21\143\3\0\2\143\3\0\6\143\22\0\4\143"+
    "\1\262\11\143\4\0\1\143\1\0\21\143\3\0\2\143"+
    "\3\0\6\143\22\0\16\174\4\0\23\174\3\0\2\174"+
    "\3\0\6\174\4\0\1\174\15\0\1\174\1\263\14\174"+
    "\4\0\23\174\3\0\2\174\3\0\6\174\4\0\1\174"+
    "\15\0\3\174\1\264\12\174\4\0\23\174\3\0\2\174"+
    "\3\0\6\174\4\0\1\174\15\0\3\174\1\265\12\174"+
    "\4\0\23\174\3\0\2\174\3\0\6\174\4\0\1\174"+
    "\15\0\15\174\1\266\4\0\23\174\3\0\2\174\3\0"+
    "\6\174\4\0\1\174\15\0\1\174\1\267\14\174\4\0"+
    "\23\174\3\0\2\174\3\0\6\174\4\0\1\174\15\0"+
    "\10\174\1\270\5\174\4\0\23\174\3\0\2\174\3\0"+
    "\6\174\4\0\1\174\15\0\14\174\1\271\1\174\4\0"+
    "\6\174\1\272\14\174\3\0\2\174\3\0\6\174\4\0"+
    "\1\174\15\0\16\174\4\0\13\174\1\273\6\174\1\274"+
    "\3\0\2\174\3\0\6\174\4\0\1\174\15\0\15\174"+
    "\1\275\4\0\23\174\3\0\2\174\3\0\6\174\4\0"+
    "\1\174\15\0\1\174\1\276\14\174\4\0\23\174\3\0"+
    "\2\174\3\0\6\174\4\0\1\174\15\0\1\174\1\277"+
    "\14\174\4\0\23\174\3\0\2\174\3\0\6\174\4\0"+
    "\1\174\15\0\1\174\1\300\14\174\4\0\23\174\3\0"+
    "\2\174\3\0\6\174\4\0\1\174\15\0\1\174\1\301"+
    "\14\174\4\0\23\174\3\0\2\174\3\0\6\174\4\0"+
    "\1\174\15\0\15\174\1\302\4\0\23\174\3\0\2\174"+
    "\3\0\6\174\4\0\1\174\16\0\1\303\107\0\1\304"+
    "\100\0\4\143\1\305\11\143\4\0\1\143\1\0\21\143"+
    "\3\0\2\143\3\0\6\143\22\0\4\143\1\306\3\143"+
    "\1\237\5\143\4\0\1\143\1\0\2\143\1\307\16\143"+
    "\3\0\2\143\3\0\6\143\22\0\15\143\1\310\4\0"+
    "\1\143\1\0\21\143\3\0\2\143\3\0\6\143\22\0"+
    "\1\143\1\311\14\143\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\6\143\22\0\16\143\4\0\1\143\1\0"+
    "\7\143\1\312\10\143\1\313\3\0\2\143\3\0\6\143"+
    "\22\0\7\143\1\314\6\143\4\0\1\143\1\0\21\143"+
    "\3\0\2\143\3\0\6\143\22\0\13\143\1\315\2\143"+
    "\4\0\1\143\1\0\21\143\3\0\2\143\3\0\6\143"+
    "\22\0\16\143\4\0\1\143\1\0\7\143\1\316\11\143"+
    "\3\0\2\143\3\0\6\143\22\0\4\143\1\317\11\143"+
    "\4\0\1\143\1\0\21\143\3\0\2\143\3\0\6\143"+
    "\21\0\1\226\16\0\3\226\4\0\1\320\21\0\1\226"+
    "\103\0\1\321\36\0\2\143\1\322\13\143\4\0\1\143"+
    "\1\0\21\143\3\0\2\143\3\0\6\143\22\0\5\143"+
    "\1\323\10\143\4\0\1\143\1\0\21\143\3\0\2\143"+
    "\3\0\6\143\22\0\16\143\4\0\1\143\1\0\13\143"+
    "\1\324\5\143\3\0\2\143\3\0\6\143\22\0\15\143"+
    "\1\325\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\22\0\7\143\1\326\6\143\4\0\1\143\1\0"+
    "\21\143\3\0\2\143\3\0\6\143\22\0\1\143\1\327"+
    "\14\143\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\22\0\4\143\1\144\11\143\4\0\1\143\1\0"+
    "\21\143\3\0\2\143\3\0\6\143\22\0\16\143\4\0"+
    "\1\143\1\0\1\143\1\330\17\143\3\0\2\143\3\0"+
    "\6\143\22\0\11\143\1\331\4\143\4\0\1\143\1\0"+
    "\21\143\3\0\2\143\3\0\6\143\22\0\1\143\1\332"+
    "\14\143\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\22\0\1\333\11\143\1\333\3\143\4\0\1\143"+
    "\1\0\10\143\2\333\7\143\3\0\2\143\3\0\6\143"+
    "\22\0\16\143\4\0\1\143\1\0\11\143\1\334\7\143"+
    "\3\0\2\143\3\0\6\143\22\0\11\143\1\335\4\143"+
    "\4\0\1\143\1\0\21\143\3\0\2\143\3\0\6\143"+
    "\22\0\14\143\1\336\1\143\4\0\1\143\1\0\21\143"+
    "\3\0\2\143\3\0\6\143\22\0\16\143\4\0\1\143"+
    "\1\0\7\143\1\337\11\143\3\0\2\143\3\0\6\143"+
    "\22\0\15\143\1\340\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\6\143\22\0\16\143\4\0\1\143\1\0"+
    "\13\143\1\341\5\143\3\0\2\143\3\0\6\143\22\0"+
    "\4\143\1\156\11\143\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\6\143\22\0\12\143\1\342\3\143\4\0"+
    "\1\143\1\0\21\143\3\0\2\143\3\0\6\143\22\0"+
    "\16\143\4\0\1\143\1\0\2\143\1\333\16\143\3\0"+
    "\2\143\3\0\6\143\11\0\27\254\2\0\54\254\10\0"+
    "\1\255\16\0\3\255\4\0\1\343\21\0\1\255\24\0"+
    "\25\254\1\344\1\254\2\0\54\254\22\162\1\345\4\162"+
    "\2\0\30\162\1\345\23\162\11\0\10\143\1\346\5\143"+
    "\4\0\1\143\1\0\21\143\3\0\2\143\3\0\6\143"+
    "\22\0\5\143\1\347\10\143\4\0\1\143\1\0\21\143"+
    "\3\0\2\143\3\0\6\143\22\0\16\174\4\0\15\174"+
    "\1\350\5\174\3\0\2\174\3\0\6\174\4\0\1\174"+
    "\15\0\15\174\1\351\4\0\23\174\3\0\2\174\3\0"+
    "\6\174\4\0\1\174\15\0\7\174\1\352\6\174\4\0"+
    "\23\174\3\0\2\174\3\0\6\174\4\0\1\174\15\0"+
    "\1\174\1\353\14\174\4\0\23\174\3\0\2\174\3\0"+
    "\6\174\4\0\1\174\15\0\4\174\1\175\11\174\4\0"+
    "\23\174\3\0\2\174\3\0\6\174\4\0\1\174\15\0"+
    "\16\174\4\0\3\174\1\354\17\174\3\0\2\174\3\0"+
    "\6\174\4\0\1\174\15\0\11\174\1\355\4\174\4\0"+
    "\23\174\3\0\2\174\3\0\6\174\4\0\1\174\15\0"+
    "\1\356\11\174\1\356\3\174\4\0\12\174\2\356\7\174"+
    "\3\0\2\174\3\0\6\174\4\0\1\174\15\0\11\174"+
    "\1\357\4\174\4\0\23\174\3\0\2\174\3\0\6\174"+
    "\4\0\1\174\15\0\14\174\1\360\1\174\4\0\23\174"+
    "\3\0\2\174\3\0\6\174\4\0\1\174\15\0\16\174"+
    "\4\0\11\174\1\361\11\174\3\0\2\174\3\0\6\174"+
    "\4\0\1\174\15\0\15\174\1\362\4\0\23\174\3\0"+
    "\2\174\3\0\6\174\4\0\1\174\15\0\16\174\4\0"+
    "\15\174\1\363\5\174\3\0\2\174\3\0\6\174\4\0"+
    "\1\174\15\0\4\174\1\207\11\174\4\0\23\174\3\0"+
    "\2\174\3\0\6\174\4\0\1\174\15\0\12\174\1\364"+
    "\3\174\4\0\23\174\3\0\2\174\3\0\6\174\4\0"+
    "\1\174\15\0\16\174\4\0\4\174\1\356\16\174\3\0"+
    "\2\174\3\0\6\174\4\0\1\174\17\0\1\365\107\0"+
    "\1\366\77\0\5\143\1\367\10\143\4\0\1\143\1\0"+
    "\21\143\3\0\2\143\3\0\6\143\22\0\5\143\1\370"+
    "\10\143\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\22\0\16\143\4\0\1\143\1\0\11\143\1\371"+
    "\7\143\3\0\2\143\3\0\6\143\22\0\16\143\4\0"+
    "\1\143\1\0\7\143\1\372\11\143\3\0\2\143\3\0"+
    "\6\143\22\0\4\143\1\156\11\143\4\0\1\143\1\0"+
    "\1\143\1\373\17\143\3\0\2\143\3\0\6\143\22\0"+
    "\15\143\1\374\4\0\1\143\1\0\21\143\3\0\2\143"+
    "\3\0\6\143\22\0\4\143\1\375\11\143\4\0\1\143"+
    "\1\0\21\143\3\0\2\143\3\0\6\143\22\0\3\143"+
    "\1\376\12\143\4\0\1\143\1\0\21\143\3\0\2\143"+
    "\3\0\6\143\22\0\16\143\4\0\1\143\1\0\7\143"+
    "\1\377\11\143\3\0\2\143\3\0\6\143\22\0\11\143"+
    "\1\u0100\4\143\4\0\1\143\1\0\21\143\3\0\2\143"+
    "\3\0\6\143\36\0\1\u0101\101\0\1\u0102\36\0\1\u0102"+
    "\34\0\3\143\1\u0103\12\143\4\0\1\143\1\0\21\143"+
    "\3\0\2\143\3\0\6\143\22\0\3\143\1\u0104\12\143"+
    "\4\0\1\143\1\0\21\143\3\0\2\143\3\0\6\143"+
    "\22\0\1\143\1\u0105\14\143\4\0\1\143\1\0\21\143"+
    "\3\0\2\143\3\0\6\143\22\0\1\143\1\u0106\14\143"+
    "\4\0\1\143\1\0\21\143\3\0\2\143\3\0\6\143"+
    "\22\0\4\143\1\u0107\11\143\4\0\1\143\1\0\21\143"+
    "\3\0\2\143\3\0\6\143\22\0\7\143\1\333\6\143"+
    "\4\0\1\143\1\0\21\143\3\0\2\143\3\0\6\143"+
    "\22\0\16\143\4\0\1\143\1\0\2\143\1\u0108\16\143"+
    "\3\0\2\143\3\0\6\143\22\0\13\143\1\u0109\2\143"+
    "\4\0\1\143\1\0\21\143\3\0\2\143\3\0\6\143"+
    "\22\0\5\143\1\u010a\3\143\1\u010b\2\143\1\u010c\1\143"+
    "\4\0\1\143\1\0\21\143\3\0\2\143\3\0\6\143"+
    "\22\0\11\143\1\332\4\143\4\0\1\143\1\0\21\143"+
    "\3\0\2\143\3\0\6\143\22\0\3\143\1\u010d\12\143"+
    "\4\0\1\143\1\0\21\143\3\0\2\143\3\0\6\143"+
    "\22\0\1\143\1\u010e\14\143\4\0\1\143\1\0\21\143"+
    "\3\0\2\143\3\0\6\143\22\0\16\143\4\0\1\143"+
    "\1\0\10\143\1\u010f\10\143\3\0\2\143\3\0\6\143"+
    "\22\0\1\u0110\15\143\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\6\143\22\0\16\143\4\0\1\143\1\0"+
    "\17\143\1\u0111\1\143\3\0\2\143\3\0\6\143\22\0"+
    "\16\143\4\0\1\143\1\0\2\143\1\u0112\16\143\3\0"+
    "\2\143\3\0\6\143\36\0\1\u0113\57\0\26\254\1\u0114"+
    "\2\0\54\254\12\162\1\u0115\14\162\2\0\4\162\1\u0115"+
    "\47\162\11\0\11\143\1\u0116\4\143\4\0\1\143\1\0"+
    "\21\143\3\0\2\143\3\0\6\143\22\0\1\174\1\u0117"+
    "\14\174\4\0\23\174\3\0\2\174\3\0\6\174\4\0"+
    "\1\174\15\0\1\174\1\u0118\14\174\4\0\23\174\3\0"+
    "\2\174\3\0\6\174\4\0\1\174\15\0\4\174\1\u0119"+
    "\11\174\4\0\23\174\3\0\2\174\3\0\6\174\4\0"+
    "\1\174\15\0\7\174\1\356\6\174\4\0\23\174\3\0"+
    "\2\174\3\0\6\174\4\0\1\174\15\0\16\174\4\0"+
    "\4\174\1\u011a\16\174\3\0\2\174\3\0\6\174\4\0"+
    "\1\174\15\0\13\174\1\u011b\2\174\4\0\23\174\3\0"+
    "\2\174\3\0\6\174\4\0\1\174\15\0\3\174\1\u011c"+
    "\12\174\4\0\23\174\3\0\2\174\3\0\6\174\4\0"+
    "\1\174\15\0\1\174\1\u011d\14\174\4\0\23\174\3\0"+
    "\2\174\3\0\6\174\4\0\1\174\15\0\16\174\4\0"+
    "\12\174\1\u011e\10\174\3\0\2\174\3\0\6\174\4\0"+
    "\1\174\15\0\1\u011f\15\174\4\0\23\174\3\0\2\174"+
    "\3\0\6\174\4\0\1\174\15\0\16\174\4\0\21\174"+
    "\1\u0120\1\174\3\0\2\174\3\0\6\174\4\0\1\174"+
    "\15\0\16\174\4\0\4\174\1\u0121\16\174\3\0\2\174"+
    "\3\0\6\174\4\0\1\174\20\0\1\u0122\101\0\16\143"+
    "\4\0\1\143\1\0\6\143\1\u0123\12\143\3\0\2\143"+
    "\3\0\1\u0124\1\143\1\u0125\1\u0126\1\u0127\1\143\22\0"+
    "\1\143\1\u0128\14\143\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\2\143\1\u0129\3\143\22\0\12\143\1\u012a"+
    "\3\143\4\0\1\143\1\0\10\143\1\u010f\10\143\3\0"+
    "\2\143\3\0\6\143\22\0\1\143\1\u012b\14\143\4\0"+
    "\1\143\1\0\21\143\3\0\2\143\3\0\6\143\22\0"+
    "\16\143\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\1\143\1\u012c\4\143\22\0\12\143\1\u012d\3\143\4\0"+
    "\1\143\1\0\21\143\3\0\2\143\3\0\6\143\22\0"+
    "\16\143\4\0\1\143\1\0\2\143\1\u012e\16\143\3\0"+
    "\2\143\3\0\6\143\22\0\16\143\4\0\1\143\1\0"+
    "\1\143\1\314\17\143\3\0\2\143\3\0\6\143\22\0"+
    "\3\143\1\u012f\12\143\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\6\143\37\0\1\u0130\70\0\1\u0131\22\0"+
    "\1\u0131\60\0\4\143\1\u0132\11\143\4\0\1\143\1\0"+
    "\21\143\3\0\2\143\3\0\6\143\22\0\4\143\1\u0133"+
    "\11\143\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\22\0\4\143\1\u0134\11\143\4\0\1\143\1\0"+
    "\21\143\3\0\2\143\3\0\6\143\22\0\12\143\1\u0135"+
    "\3\143\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\22\0\1\143\1\u0136\14\143\4\0\1\143\1\0"+
    "\21\143\3\0\2\143\3\0\6\143\22\0\16\143\4\0"+
    "\1\143\1\0\3\143\1\u0137\15\143\3\0\2\143\3\0"+
    "\6\143\22\0\14\143\1\u0138\1\143\4\0\1\143\1\0"+
    "\21\143\3\0\2\143\3\0\6\143\22\0\3\143\1\u0139"+
    "\12\143\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\22\0\16\143\4\0\1\143\1\0\20\143\1\u013a"+
    "\3\0\2\143\3\0\6\143\22\0\4\143\1\u013b\11\143"+
    "\4\0\1\143\1\0\21\143\3\0\2\143\3\0\6\143"+
    "\22\0\10\143\1\u013c\5\143\4\0\1\143\1\0\21\143"+
    "\3\0\2\143\3\0\6\143\22\0\3\143\1\u013d\12\143"+
    "\4\0\1\143\1\0\21\143\3\0\2\143\3\0\6\143"+
    "\22\0\16\143\4\0\1\143\1\0\21\143\1\u013e\2\0"+
    "\2\143\3\0\6\143\22\0\16\143\4\0\1\143\1\0"+
    "\7\143\1\u013f\11\143\3\0\2\143\3\0\6\143\22\0"+
    "\14\143\1\u0140\1\143\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\6\143\37\0\1\u0141\56\0\27\254\2\0"+
    "\15\254\1\u0142\36\254\21\162\1\163\5\162\2\0\31\162"+
    "\1\163\22\162\11\0\4\174\1\u0143\11\174\4\0\23\174"+
    "\3\0\2\174\3\0\6\174\4\0\1\174\15\0\12\174"+
    "\1\u0144\3\174\4\0\23\174\3\0\2\174\3\0\6\174"+
    "\4\0\1\174\15\0\1\174\1\u0145\14\174\4\0\23\174"+
    "\3\0\2\174\3\0\6\174\4\0\1\174\15\0\16\174"+
    "\4\0\5\174\1\u0146\15\174\3\0\2\174\3\0\6\174"+
    "\4\0\1\174\15\0\4\174\1\u0147\11\174\4\0\23\174"+
    "\3\0\2\174\3\0\6\174\4\0\1\174\15\0\10\174"+
    "\1\u0148\5\174\4\0\23\174\3\0\2\174\3\0\6\174"+
    "\4\0\1\174\15\0\3\174\1\u0149\12\174\4\0\23\174"+
    "\3\0\2\174\3\0\6\174\4\0\1\174\15\0\16\174"+
    "\4\0\23\174\1\u013e\2\0\2\174\3\0\6\174\4\0"+
    "\1\174\15\0\16\174\4\0\11\174\1\u014a\11\174\3\0"+
    "\2\174\3\0\6\174\4\0\1\174\15\0\14\174\1\u014b"+
    "\1\174\4\0\23\174\3\0\2\174\3\0\6\174\4\0"+
    "\1\174\21\0\1\u014c\100\0\15\143\1\u014d\4\0\1\143"+
    "\1\0\21\143\3\0\2\143\3\0\6\143\22\0\16\143"+
    "\4\0\1\143\1\0\7\143\1\u014e\10\143\1\u014f\3\0"+
    "\2\143\3\0\6\143\22\0\7\143\1\u0150\6\143\4\0"+
    "\1\143\1\0\21\143\3\0\2\143\3\0\6\143\22\0"+
    "\13\143\1\u0151\2\143\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\6\143\22\0\16\143\4\0\1\143\1\0"+
    "\7\143\1\u0152\11\143\3\0\2\143\3\0\6\143\22\0"+
    "\7\143\1\u0128\6\143\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\6\143\22\0\1\143\1\u0153\14\143\4\0"+
    "\1\143\1\0\21\143\3\0\2\143\3\0\6\143\22\0"+
    "\14\143\1\u0154\1\143\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\6\143\22\0\16\143\4\0\1\143\1\0"+
    "\2\143\1\u0155\16\143\3\0\2\143\3\0\6\143\22\0"+
    "\11\143\1\u0156\4\143\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\6\143\22\0\1\143\1\314\14\143\4\0"+
    "\1\143\1\0\21\143\3\0\2\143\3\0\6\143\22\0"+
    "\16\143\4\0\1\143\1\0\2\143\1\u0150\16\143\3\0"+
    "\2\143\3\0\6\143\57\0\1\u0157\57\0\1\226\40\0"+
    "\1\226\33\0\16\143\4\0\1\143\1\0\1\143\1\u0158"+
    "\17\143\3\0\2\143\3\0\6\143\22\0\16\143\4\0"+
    "\1\143\1\0\10\143\1\u0159\10\143\3\0\2\143\3\0"+
    "\6\143\22\0\11\143\1\u015a\4\143\4\0\1\143\1\0"+
    "\21\143\3\0\2\143\3\0\6\143\22\0\10\143\1\u015b"+
    "\5\143\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\22\0\16\143\4\0\1\143\1\0\4\143\1\u015c"+
    "\14\143\3\0\2\143\3\0\6\143\22\0\11\143\1\u015d"+
    "\4\143\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\22\0\11\143\1\u015e\4\143\4\0\1\143\1\0"+
    "\21\143\3\0\2\143\3\0\6\143\22\0\11\143\1\u015f"+
    "\4\143\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\22\0\16\143\4\0\1\143\1\0\2\143\1\u0160"+
    "\16\143\3\0\2\143\3\0\6\143\22\0\1\143\1\u0161"+
    "\14\143\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\22\0\5\143\1\u0162\10\143\4\0\1\143\1\0"+
    "\21\143\3\0\2\143\3\0\6\143\22\0\12\143\1\u0163"+
    "\3\143\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\22\0\15\143\1\u0164\4\0\1\143\1\0\21\143"+
    "\3\0\2\143\3\0\6\143\57\0\1\u0165\36\0\12\254"+
    "\1\u0166\14\254\2\0\54\254\11\0\16\174\4\0\12\174"+
    "\1\u0167\10\174\3\0\2\174\3\0\6\174\4\0\1\174"+
    "\15\0\11\174\1\u0168\4\174\4\0\23\174\3\0\2\174"+
    "\3\0\6\174\4\0\1\174\15\0\10\174\1\u0169\5\174"+
    "\4\0\23\174\3\0\2\174\3\0\6\174\4\0\1\174"+
    "\15\0\16\174\4\0\6\174\1\u016a\14\174\3\0\2\174"+
    "\3\0\6\174\4\0\1\174\15\0\16\174\4\0\4\174"+
    "\1\u016b\16\174\3\0\2\174\3\0\6\174\4\0\1\174"+
    "\15\0\1\174\1\u016c\14\174\4\0\23\174\3\0\2\174"+
    "\3\0\6\174\4\0\1\174\15\0\5\174\1\u016d\10\174"+
    "\4\0\23\174\3\0\2\174\3\0\6\174\4\0\1\174"+
    "\15\0\12\174\1\u016e\3\174\4\0\23\174\3\0\2\174"+
    "\3\0\6\174\4\0\1\174\15\0\15\174\1\u016f\4\0"+
    "\23\174\3\0\2\174\3\0\6\174\4\0\1\174\15\0"+
    "\16\143\4\0\1\143\1\0\7\143\1\u0170\11\143\3\0"+
    "\2\143\3\0\6\143\22\0\15\143\1\u0150\4\0\1\143"+
    "\1\0\21\143\3\0\2\143\3\0\6\143\22\0\4\143"+
    "\1\u0171\11\143\4\0\1\143\1\0\21\143\3\0\2\143"+
    "\3\0\6\143\22\0\3\143\1\u0172\12\143\4\0\1\143"+
    "\1\0\21\143\3\0\2\143\3\0\6\143\22\0\16\143"+
    "\4\0\1\143\1\0\7\143\1\u0173\11\143\3\0\2\143"+
    "\3\0\6\143\22\0\5\143\1\u0174\10\143\4\0\1\143"+
    "\1\0\21\143\3\0\2\143\3\0\6\143\22\0\11\143"+
    "\1\314\4\143\4\0\1\143\1\0\21\143\3\0\2\143"+
    "\3\0\6\143\22\0\16\143\4\0\1\143\1\0\2\143"+
    "\1\314\16\143\3\0\2\143\3\0\6\143\22\0\3\143"+
    "\1\u0175\12\143\4\0\1\143\1\0\21\143\3\0\2\143"+
    "\3\0\6\143\23\0\1\u0176\103\0\16\143\4\0\1\143"+
    "\1\0\20\143\1\u0177\3\0\2\143\3\0\6\143\22\0"+
    "\3\143\1\u0178\12\143\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\6\143\22\0\16\143\4\0\1\143\1\0"+
    "\2\143\1\u0179\16\143\3\0\2\143\3\0\6\143\22\0"+
    "\11\143\1\u017a\4\143\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\6\143\22\0\4\143\1\u017b\11\143\4\0"+
    "\1\143\1\0\21\143\3\0\2\143\3\0\6\143\22\0"+
    "\1\143\1\u017c\14\143\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\6\143\22\0\16\143\4\0\1\143\1\0"+
    "\2\143\1\u015d\16\143\3\0\2\143\3\0\6\143\22\0"+
    "\13\143\1\u017d\2\143\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\6\143\22\0\3\143\1\u017e\12\143\4\0"+
    "\1\143\1\0\21\143\3\0\2\143\3\0\6\143\22\0"+
    "\12\143\1\333\3\143\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\6\143\22\0\1\143\1\u017f\14\143\4\0"+
    "\1\143\1\0\21\143\3\0\2\143\3\0\6\143\22\0"+
    "\16\143\4\0\1\143\1\0\20\143\1\u0180\3\0\2\143"+
    "\3\0\6\143\22\0\1\143\1\341\14\143\4\0\1\143"+
    "\1\0\21\143\3\0\2\143\3\0\6\143\23\0\1\u0181"+
    "\72\0\26\254\1\u0182\2\0\54\254\11\0\3\174\1\u0183"+
    "\12\174\4\0\23\174\3\0\2\174\3\0\6\174\4\0"+
    "\1\174\15\0\16\174\4\0\4\174\1\u0184\16\174\3\0"+
    "\2\174\3\0\6\174\4\0\1\174\15\0\11\174\1\u0185"+
    "\4\174\4\0\23\174\3\0\2\174\3\0\6\174\4\0"+
    "\1\174\15\0\4\174\1\u0186\11\174\4\0\23\174\3\0"+
    "\2\174\3\0\6\174\4\0\1\174\15\0\3\174\1\u0187"+
    "\12\174\4\0\23\174\3\0\2\174\3\0\6\174\4\0"+
    "\1\174\15\0\12\174\1\356\3\174\4\0\23\174\3\0"+
    "\2\174\3\0\6\174\4\0\1\174\15\0\1\174\1\u0188"+
    "\14\174\4\0\23\174\3\0\2\174\3\0\6\174\4\0"+
    "\1\174\15\0\16\174\4\0\22\174\1\u0189\3\0\2\174"+
    "\3\0\6\174\4\0\1\174\15\0\1\174\1\363\14\174"+
    "\4\0\23\174\3\0\2\174\3\0\6\174\4\0\1\174"+
    "\15\0\12\143\1\u018a\3\143\4\0\1\143\1\0\21\143"+
    "\3\0\2\143\3\0\6\143\22\0\12\143\1\u018b\3\143"+
    "\4\0\1\143\1\0\21\143\3\0\2\143\3\0\6\143"+
    "\22\0\16\143\4\0\1\143\1\0\2\143\1\u018c\16\143"+
    "\3\0\2\143\3\0\6\143\22\0\16\143\4\0\1\143"+
    "\1\0\1\143\1\u0150\17\143\3\0\2\143\3\0\6\143"+
    "\22\0\16\143\4\0\1\143\1\0\20\143\1\u018d\3\0"+
    "\2\143\3\0\6\143\22\0\16\143\4\0\1\143\1\0"+
    "\7\143\1\u018e\11\143\3\0\2\143\3\0\6\143\37\0"+
    "\1\u018f\67\0\11\143\1\u0190\4\143\4\0\1\143\1\0"+
    "\21\143\3\0\2\143\3\0\6\143\22\0\15\143\1\u0191"+
    "\4\0\1\143\1\0\21\143\3\0\2\143\3\0\6\143"+
    "\22\0\16\143\4\0\1\143\1\0\20\143\1\u0192\3\0"+
    "\2\143\3\0\6\143\22\0\12\143\1\u0193\3\143\4\0"+
    "\1\143\1\0\21\143\3\0\2\143\3\0\6\143\22\0"+
    "\11\143\1\u0194\4\143\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\6\143\22\0\16\143\4\0\1\143\1\0"+
    "\7\143\1\u0195\11\143\3\0\2\143\3\0\6\143\22\0"+
    "\4\143\1\u0196\11\143\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\6\143\22\0\16\143\4\0\1\143\1\0"+
    "\11\143\1\u0197\5\143\1\u0111\1\143\3\0\2\143\3\0"+
    "\6\143\22\0\16\143\4\0\1\143\1\0\14\143\1\u0198"+
    "\4\143\3\0\2\143\3\0\6\143\37\0\1\u0199\56\0"+
    "\10\254\1\u0182\16\254\2\u0199\1\u0182\26\254\1\u0182\3\254"+
    "\1\u019a\20\254\11\0\15\174\1\u019b\4\0\23\174\3\0"+
    "\2\174\3\0\6\174\4\0\1\174\15\0\16\174\4\0"+
    "\22\174\1\u019c\3\0\2\174\3\0\6\174\4\0\1\174"+
    "\15\0\12\174\1\u019d\3\174\4\0\23\174\3\0\2\174"+
    "\3\0\6\174\4\0\1\174\15\0\11\174\1\u019e\4\174"+
    "\4\0\23\174\3\0\2\174\3\0\6\174\4\0\1\174"+
    "\15\0\4\174\1\u019f\11\174\4\0\23\174\3\0\2\174"+
    "\3\0\6\174\4\0\1\174\15\0\16\174\4\0\13\174"+
    "\1\u01a0\5\174\1\u0120\1\174\3\0\2\174\3\0\6\174"+
    "\4\0\1\174\15\0\16\174\4\0\16\174\1\u01a1\4\174"+
    "\3\0\2\174\3\0\6\174\4\0\1\174\15\0\1\143"+
    "\1\u01a2\14\143\4\0\1\143\1\0\21\143\3\0\2\143"+
    "\3\0\6\143\22\0\11\143\1\u01a3\4\143\4\0\1\143"+
    "\1\0\21\143\3\0\2\143\3\0\6\143\22\0\1\143"+
    "\1\u0150\14\143\4\0\1\143\1\0\21\143\3\0\2\143"+
    "\3\0\6\143\22\0\15\143\1\u012e\4\0\1\143\1\0"+
    "\21\143\3\0\2\143\3\0\6\143\22\0\4\143\1\314"+
    "\11\143\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\21\0\1\u018f\16\0\3\u018f\26\0\1\u018f\3\0"+
    "\1\u01a4\31\0\16\143\4\0\1\143\1\0\7\143\1\u01a5"+
    "\11\143\3\0\2\143\3\0\6\143\22\0\14\143\1\333"+
    "\1\143\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\22\0\13\143\1\u01a6\2\143\4\0\1\143\1\0"+
    "\21\143\3\0\2\143\3\0\6\143\22\0\14\143\1\u01a7"+
    "\1\143\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\22\0\15\143\1\u017c\4\0\1\143\1\0\21\143"+
    "\3\0\2\143\3\0\6\143\22\0\1\143\1\333\14\143"+
    "\4\0\1\143\1\0\21\143\3\0\2\143\3\0\6\143"+
    "\22\0\16\143\4\0\1\143\1\0\1\u01a8\20\143\3\0"+
    "\2\143\3\0\6\143\22\0\1\143\1\u01a9\14\143\4\0"+
    "\1\143\1\0\21\143\3\0\2\143\3\0\6\143\21\0"+
    "\1\u0199\16\0\3\u0199\26\0\1\u0199\3\0\1\u01aa\20\0"+
    "\10\254\1\u019a\16\254\2\u01aa\1\u019a\12\254\1\u01ab\13\254"+
    "\1\u019a\24\254\11\0\16\174\4\0\11\174\1\u01ac\11\174"+
    "\3\0\2\174\3\0\6\174\4\0\1\174\15\0\14\174"+
    "\1\356\1\174\4\0\23\174\3\0\2\174\3\0\6\174"+
    "\4\0\1\174\15\0\13\174\1\u01ad\2\174\4\0\23\174"+
    "\3\0\2\174\3\0\6\174\4\0\1\174\15\0\14\174"+
    "\1\u01ae\1\174\4\0\23\174\3\0\2\174\3\0\6\174"+
    "\4\0\1\174\15\0\1\174\1\356\14\174\4\0\23\174"+
    "\3\0\2\174\3\0\6\174\4\0\1\174\15\0\16\174"+
    "\4\0\2\174\1\u01af\20\174\3\0\2\174\3\0\6\174"+
    "\4\0\1\174\15\0\1\174\1\u01b0\14\174\4\0\23\174"+
    "\3\0\2\174\3\0\6\174\4\0\1\174\15\0\5\143"+
    "\1\u01b1\10\143\4\0\1\143\1\0\21\143\3\0\2\143"+
    "\3\0\6\143\22\0\3\143\1\u01b2\12\143\4\0\1\143"+
    "\1\0\21\143\3\0\2\143\3\0\6\143\21\0\1\u01a4"+
    "\16\0\3\u01a4\12\0\1\u01b3\13\0\1\u01a4\35\0\4\143"+
    "\1\u01b4\11\143\4\0\1\143\1\0\21\143\3\0\2\143"+
    "\3\0\6\143\22\0\14\143\1\u01b5\1\143\4\0\1\143"+
    "\1\0\21\143\3\0\2\143\3\0\6\143\22\0\10\143"+
    "\1\u01b6\5\143\4\0\1\143\1\0\21\143\3\0\2\143"+
    "\3\0\6\143\22\0\10\143\1\u01b7\5\143\4\0\1\143"+
    "\1\0\21\143\3\0\2\143\3\0\6\143\22\0\4\143"+
    "\1\u01b8\11\143\4\0\1\143\1\0\21\143\3\0\2\143"+
    "\3\0\6\143\21\0\1\u01aa\16\0\3\u01aa\12\0\1\u01b9"+
    "\13\0\1\u01aa\24\0\20\254\1\u01ba\6\254\2\0\54\254"+
    "\11\0\4\174\1\u01bb\11\174\4\0\23\174\3\0\2\174"+
    "\3\0\6\174\4\0\1\174\15\0\14\174\1\u01bc\1\174"+
    "\4\0\23\174\3\0\2\174\3\0\6\174\4\0\1\174"+
    "\15\0\10\174\1\u01bd\5\174\4\0\23\174\3\0\2\174"+
    "\3\0\6\174\4\0\1\174\15\0\10\174\1\u01be\5\174"+
    "\4\0\23\174\3\0\2\174\3\0\6\174\4\0\1\174"+
    "\15\0\4\174\1\u01bf\11\174\4\0\23\174\3\0\2\174"+
    "\3\0\6\174\4\0\1\174\15\0\16\143\4\0\1\143"+
    "\1\0\20\143\1\u01c0\3\0\2\143\3\0\6\143\22\0"+
    "\16\143\4\0\1\143\1\0\7\143\1\u01c1\11\143\3\0"+
    "\2\143\3\0\6\143\26\0\1\u01c2\100\0\16\143\4\0"+
    "\1\143\1\0\14\143\1\u01c3\4\143\3\0\2\143\3\0"+
    "\6\143\22\0\15\143\1\u01c4\4\0\1\143\1\0\21\143"+
    "\3\0\2\143\3\0\6\143\22\0\16\143\4\0\1\143"+
    "\1\0\5\143\1\u01c5\13\143\3\0\2\143\3\0\6\143"+
    "\22\0\16\143\4\0\1\143\1\0\1\143\1\u01c6\17\143"+
    "\3\0\2\143\3\0\6\143\22\0\11\143\1\u01c7\4\143"+
    "\4\0\1\143\1\0\21\143\3\0\2\143\3\0\6\143"+
    "\31\0\1\u01c8\64\0\20\254\1\u01c9\6\254\2\0\54\254"+
    "\11\0\16\174\4\0\16\174\1\u01ca\4\174\3\0\2\174"+
    "\3\0\6\174\4\0\1\174\15\0\15\174\1\u01cb\4\0"+
    "\23\174\3\0\2\174\3\0\6\174\4\0\1\174\15\0"+
    "\16\174\4\0\7\174\1\u01cc\13\174\3\0\2\174\3\0"+
    "\6\174\4\0\1\174\15\0\16\174\4\0\3\174\1\u01cd"+
    "\17\174\3\0\2\174\3\0\6\174\4\0\1\174\15\0"+
    "\11\174\1\u01ce\4\174\4\0\23\174\3\0\2\174\3\0"+
    "\6\174\4\0\1\174\15\0\15\143\1\u018c\4\0\1\143"+
    "\1\0\21\143\3\0\2\143\3\0\6\143\22\0\4\143"+
    "\1\u0150\11\143\4\0\1\143\1\0\21\143\3\0\2\143"+
    "\3\0\6\143\11\0\27\u01c2\2\0\54\u01c2\11\0\1\143"+
    "\1\u01cf\14\143\4\0\1\143\1\0\21\143\3\0\2\143"+
    "\3\0\6\143\11\0\11\u01d0\16\143\4\0\1\143\1\u01d0"+
    "\21\143\3\u01d0\2\143\3\u01d0\6\143\11\u01d0\11\0\4\143"+
    "\1\u01d1\11\143\4\0\1\143\1\0\21\143\3\0\2\143"+
    "\3\0\6\143\22\0\16\143\4\0\1\143\1\0\2\143"+
    "\1\u01d2\16\143\3\0\2\143\3\0\6\143\22\0\16\143"+
    "\4\0\1\143\1\0\1\u01d3\20\143\3\0\2\143\3\0"+
    "\6\143\31\0\1\u01c9\64\0\27\u01c9\2\0\54\u01c9\11\0"+
    "\1\174\1\u01d4\14\174\4\0\23\174\3\0\2\174\3\0"+
    "\6\174\4\0\1\174\4\0\11\u01d0\16\174\4\0\23\174"+
    "\3\u01d0\2\174\3\u01d0\6\174\4\u01d0\1\174\4\u01d0\11\0"+
    "\4\174\1\u01d5\2\174\1\u01d6\6\174\4\0\23\174\3\0"+
    "\2\174\3\0\6\174\4\0\1\174\15\0\16\174\4\0"+
    "\4\174\1\u01d7\16\174\3\0\2\174\3\0\6\174\4\0"+
    "\1\174\15\0\16\174\4\0\2\174\1\u01d8\20\174\3\0"+
    "\2\174\3\0\6\174\4\0\1\174\15\0\4\143\1\u01d9"+
    "\11\143\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\22\0\16\143\4\0\1\143\1\0\6\143\1\u01da"+
    "\12\143\3\0\2\143\3\0\6\143\22\0\4\143\1\u01db"+
    "\11\143\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\22\0\4\174\1\u01dc\11\174\4\0\23\174\3\0"+
    "\2\174\3\0\6\174\4\0\1\174\15\0\7\174\1\u01dd"+
    "\6\174\4\0\23\174\3\0\2\174\3\0\6\174\4\0"+
    "\1\174\15\0\16\174\4\0\10\174\1\u01de\12\174\3\0"+
    "\2\174\3\0\6\174\4\0\1\174\15\0\4\174\1\u01df"+
    "\11\174\4\0\23\174\3\0\2\174\3\0\6\174\4\0"+
    "\1\174\15\0\11\143\1\u01e0\4\143\4\0\1\143\1\0"+
    "\21\143\3\0\2\143\3\0\6\143\22\0\14\143\1\u01e1"+
    "\1\143\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\22\0\16\143\4\0\1\143\1\0\10\143\1\u01e2"+
    "\10\143\3\0\2\143\3\0\6\143\22\0\11\174\1\u01e3"+
    "\4\174\4\0\23\174\3\0\2\174\3\0\6\174\4\0"+
    "\1\174\15\0\14\174\1\u01e4\1\174\4\0\23\174\3\0"+
    "\2\174\3\0\6\174\4\0\1\174\15\0\16\174\4\0"+
    "\12\174\1\u01e5\10\174\3\0\2\174\3\0\6\174\4\0"+
    "\1\174\15\0\12\143\1\u01e6\3\143\4\0\1\143\1\0"+
    "\21\143\3\0\2\143\3\0\6\143\22\0\3\143\1\u01e7"+
    "\12\143\4\0\1\143\1\0\21\143\3\0\2\143\3\0"+
    "\6\143\22\0\12\174\1\u01e8\3\174\4\0\23\174\3\0"+
    "\2\174\3\0\6\174\4\0\1\174\15\0\3\174\1\u01e9"+
    "\12\174\4\0\23\174\3\0\2\174\3\0\6\174\4\0"+
    "\1\174\15\0\16\143\4\0\1\143\1\0\12\143\1\u01ea"+
    "\6\143\3\0\2\143\3\0\6\143\22\0\15\143\1\u01eb"+
    "\4\0\1\143\1\0\21\143\3\0\2\143\3\0\6\143"+
    "\22\0\16\174\4\0\14\174\1\u01ec\6\174\3\0\2\174"+
    "\3\0\6\174\4\0\1\174\15\0\15\174\1\u01ed\4\0"+
    "\23\174\3\0\2\174\3\0\6\174\4\0\1\174\15\0"+
    "\14\143\1\u01ee\1\143\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\6\143\22\0\16\143\4\0\1\143\1\0"+
    "\7\143\1\u01ef\11\143\3\0\2\143\3\0\6\143\22\0"+
    "\14\174\1\u01f0\1\174\4\0\23\174\3\0\2\174\3\0"+
    "\6\174\4\0\1\174\15\0\16\174\4\0\11\174\1\u01f1"+
    "\11\174\3\0\2\174\3\0\6\174\4\0\1\174\15\0"+
    "\2\143\1\u01f2\13\143\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\6\143\22\0\4\143\1\u01f3\11\143\4\0"+
    "\1\143\1\0\21\143\3\0\2\143\3\0\6\143\22\0"+
    "\2\174\1\u01f4\13\174\4\0\23\174\3\0\2\174\3\0"+
    "\6\174\4\0\1\174\15\0\4\174\1\u01f5\11\174\4\0"+
    "\23\174\3\0\2\174\3\0\6\174\4\0\1\174\15\0"+
    "\1\143\1\u01d1\14\143\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\6\143\22\0\16\143\4\0\1\143\1\0"+
    "\14\143\1\u01f6\4\143\3\0\2\143\3\0\6\143\22\0"+
    "\1\174\1\u01d5\14\174\4\0\23\174\3\0\2\174\3\0"+
    "\6\174\4\0\1\174\15\0\16\174\4\0\16\174\1\u01f7"+
    "\4\174\3\0\2\174\3\0\6\174\4\0\1\174\15\0"+
    "\1\143\1\u01f8\14\143\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\6\143\22\0\1\174\1\u01f9\14\174\4\0"+
    "\23\174\3\0\2\174\3\0\6\174\4\0\1\174\15\0"+
    "\4\143\1\u01fa\11\143\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\6\143\22\0\4\174\1\u01fb\11\174\4\0"+
    "\23\174\3\0\2\174\3\0\6\174\4\0\1\174\15\0"+
    "\11\143\1\u01fc\4\143\4\0\1\143\1\0\21\143\3\0"+
    "\2\143\3\0\6\143\22\0\11\174\1\u01fd\4\174\4\0"+
    "\23\174\3\0\2\174\3\0\6\174\4\0\1\174\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29877];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\34\0\2\1\6\11\1\1\1\11\1\1\1\11\1\1"+
    "\2\11\2\1\4\11\1\1\1\11\3\1\2\11\1\1"+
    "\4\11\1\1\6\11\1\1\11\11\1\1\5\11\1\1"+
    "\2\11\2\1\1\11\3\1\3\11\24\1\1\11\1\0"+
    "\1\1\1\11\1\1\2\11\17\1\2\0\11\1\2\0"+
    "\25\1\1\0\2\1\1\11\22\1\2\0\13\1\2\0"+
    "\21\1\1\0\21\1\1\0\1\11\12\1\2\0\20\1"+
    "\1\0\16\1\1\0\15\1\2\0\14\1\1\11\2\1"+
    "\1\0\12\1\1\11\12\1\1\0\15\1\1\0\20\1"+
    "\1\0\12\1\1\0\15\1\1\0\11\1\1\0\12\1"+
    "\1\0\5\1\1\0\10\1\1\0\5\1\1\0\16\1"+
    "\1\0\7\1\1\11\55\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[509];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Deque<Integer> stack = new ArrayDeque<>();


  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }


  public LatexLexer() {
    this((java.io.Reader)null);
  }

  /**
   * In order to avoid a parsing error for new environment definitions, this keeps track of the number of braces in the \newenvironment
   * parameters, so as to know when the parameters are exited.
   */
  private int newEnvironmentBracesNesting = 0;

  /**
   * Also keep track of brackets of verbatim environment optional arguments.
   */
  private int verbatimOptionalArgumentBracketsCount = 0;

  /**
   * Keep track of braces in the PARTIAL_DEFINITION state.
   * We need to count braces in order to avoid exiting the state too early, especially in case of entering this state incorrectly
   * (for example because someone has >{ in their text for whatever reason).
   */
  private int preambleOptionBracesCount = 0;

  /**
   * Remember the delimiter that inline verbatim started with, to check when to end it.
   */
  private String verbatim_delimiter = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 84: break;
          case 2: 
            { return BACKSLASH;
            } 
            // fall through
          case 85: break;
          case 3: 
            { return OPEN_PAREN;
            } 
            // fall through
          case 86: break;
          case 4: 
            { return CLOSE_PAREN;
            } 
            // fall through
          case 87: break;
          case 5: 
            { return OPEN_BRACKET;
            } 
            // fall through
          case 88: break;
          case 6: 
            { return CLOSE_BRACKET;
            } 
            // fall through
          case 89: break;
          case 7: 
            { return OPEN_BRACE;
            } 
            // fall through
          case 90: break;
          case 8: 
            { return CLOSE_BRACE;
            } 
            // fall through
          case 91: break;
          case 9: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 92: break;
          case 10: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 93: break;
          case 11: 
            { return STAR;
            } 
            // fall through
          case 94: break;
          case 12: 
            { return EXCLAMATION_MARK;
            } 
            // fall through
          case 95: break;
          case 13: 
            { return COMMENT_TOKEN;
            } 
            // fall through
          case 96: break;
          case 14: 
            { return EQUALS;
            } 
            // fall through
          case 97: break;
          case 15: 
            { yypushState(INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 98: break;
          case 16: 
            { return OPEN_ANGLE_BRACKET;
            } 
            // fall through
          case 99: break;
          case 17: 
            { return CLOSE_ANGLE_BRACKET;
            } 
            // fall through
          case 100: break;
          case 18: 
            { return COMMA;
            } 
            // fall through
          case 101: break;
          case 19: 
            { return AMPERSAND;
            } 
            // fall through
          case 102: break;
          case 20: 
            { return QUOTATION_MARK;
            } 
            // fall through
          case 103: break;
          case 21: 
            { return PIPE;
            } 
            // fall through
          case 104: break;
          case 22: 
            { yypopState(); return INLINE_MATH_END;
            } 
            // fall through
          case 105: break;
          case 23: 
            { yypopState(); return CLOSE_BRACE;
            } 
            // fall through
          case 106: break;
          case 24: 
            { yypushState(NESTED_INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 107: break;
          case 25: 
            { preambleOptionBracesCount++; return OPEN_BRACE;
            } 
            // fall through
          case 108: break;
          case 26: 
            { if (preambleOptionBracesCount == 0) {
          yypopState();
        }
        else {
            preambleOptionBracesCount--;
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 109: break;
          case 27: 
            { yypopState();
          newEnvironmentBracesNesting = 0;
          yypushState(NEW_ENVIRONMENT_DEFINITION);
          return CLOSE_BRACE;
            } 
            // fall through
          case 110: break;
          case 28: 
            { newEnvironmentBracesNesting++; return OPEN_BRACE;
            } 
            // fall through
          case 111: break;
          case 29: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState(); yypushState(NEW_ENVIRONMENT_SKIP_BRACE);
            // We could have returned normal text, but in this way the braces still match
            return OPEN_BRACE;
        } else {
            return CLOSE_BRACE;
        }
            } 
            // fall through
          case 112: break;
          case 30: 
            { yypopState(); newEnvironmentBracesNesting = 1; yypushState(NEW_ENVIRONMENT_DEFINITION_END); return CLOSE_BRACE;
            } 
            // fall through
          case 113: break;
          case 31: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState();
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 114: break;
          case 32: 
            { yypopState(); yypushState(NEW_DOCUMENT_ENV_DEFINITION_ARGS_SPEC); newEnvironmentBracesNesting = 0; return CLOSE_BRACE;
            } 
            // fall through
          case 115: break;
          case 33: 
            { newEnvironmentBracesNesting--;
        if (newEnvironmentBracesNesting <= 0) {
            yypopState();
            yypushState(NEW_ENVIRONMENT_DEFINITION);
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 116: break;
          case 34: 
            { yypopState(); verbatim_delimiter = yytext().toString(); yypushState(INLINE_VERBATIM); return OPEN_BRACE;
            } 
            // fall through
          case 117: break;
          case 35: 
            { yypopState(); return BACKSLASH;
            } 
            // fall through
          case 118: break;
          case 36: 
            { yypopState(); return OPEN_PAREN;
            } 
            // fall through
          case 119: break;
          case 37: 
            { yypopState(); return OPEN_BRACKET;
            } 
            // fall through
          case 120: break;
          case 38: 
            { yypopState(); return CLOSE_BRACKET;
            } 
            // fall through
          case 121: break;
          case 39: 
            { yypopState(); return OPEN_BRACE;
            } 
            // fall through
          case 122: break;
          case 40: 
            { if(yytext().toString().equals(verbatim_delimiter)) { yypopState(); return CLOSE_BRACE; } else { return RAW_TEXT_TOKEN; }
            } 
            // fall through
          case 123: break;
          case 41: 
            { yypopState(); yypushState(INLINE_VERBATIM_OPTIONAL_ARG); verbatimOptionalArgumentBracketsCount = 1; return OPEN_BRACKET;
            } 
            // fall through
          case 124: break;
          case 42: 
            { yypopState(); verbatim_delimiter = "}"; yypushState(INLINE_VERBATIM); return OPEN_BRACE;
            } 
            // fall through
          case 125: break;
          case 43: 
            { yypopState();
            // toString to fix comparisons of charsequence subsequences with string
            if (EnvironmentMagic.isProbablyVerbatim(yytext().toString())) {
                yypushState(VERBATIM_START);
            }
            else if (yytext().toString().equals("algorithmic")) {
                yypushState(PSEUDOCODE);
            }
            return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 126: break;
          case 44: 
            { verbatimOptionalArgumentBracketsCount++; return OPEN_BRACKET;
            } 
            // fall through
          case 127: break;
          case 45: 
            { verbatimOptionalArgumentBracketsCount--;
        if (verbatimOptionalArgumentBracketsCount == 0) { yypopState(); yypushState(VERBATIM); }
        return CLOSE_BRACKET;
            } 
            // fall through
          case 128: break;
          case 46: 
            { yypopState(); yypushState(POSSIBLE_VERBATIM_OPTIONAL_ARG); return CLOSE_BRACE;
            } 
            // fall through
          case 129: break;
          case 47: 
            { verbatimOptionalArgumentBracketsCount--;
            if (verbatimOptionalArgumentBracketsCount == 0) { yypopState(); yypushState(INLINE_VERBATIM_NORMAL_START); }
            return CLOSE_BRACKET;
            } 
            // fall through
          case 130: break;
          case 48: 
            { return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 131: break;
          case 49: 
            { yypopState(); yypushState(VERBATIM); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 132: break;
          case 50: 
            { verbatimOptionalArgumentBracketsCount = 1; yypopState(); yypushState(VERBATIM_OPTIONAL_ARG); return OPEN_BRACKET;
            } 
            // fall through
          case 133: break;
          case 51: 
            { yypopState(); yypushState(VERBATIM); return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 134: break;
          case 52: 
            { // Pop current state
        yypopState();
        if (EnvironmentMagic.isProbablyVerbatim(yytext().toString())) {
            // Pop verbatim state
            yypopState();
            return NORMAL_TEXT_WORD;
        }
        return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 135: break;
          case 53: 
            { yypopState(); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 136: break;
          case 54: 
            { yypopState();
        if (yytext().toString().equals("algorithmic")) {
            // Pop pseudocode state
            yypopState();
        }
        return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 137: break;
          case 55: 
            { return COMMAND_TOKEN;
            } 
            // fall through
          case 138: break;
          case 56: 
            { yypushState(INLINE_MATH_LATEX); return INLINE_MATH_START;
            } 
            // fall through
          case 139: break;
          case 57: 
            { yypushState(DISPLAY_MATH); return DISPLAY_MATH_START;
            } 
            // fall through
          case 140: break;
          case 58: 
            { return MAGIC_COMMENT_TOKEN;
            } 
            // fall through
          case 141: break;
          case 59: 
            { yypushState(PARTIAL_DEFINITION); preambleOptionBracesCount = 0; return OPEN_BRACE;
            } 
            // fall through
          case 142: break;
          case 60: 
            { yypopState(); return DISPLAY_MATH_END;
            } 
            // fall through
          case 143: break;
          case 61: 
            { return DISPLAY_MATH_START;
            } 
            // fall through
          case 144: break;
          case 62: 
            { return DISPLAY_MATH_END;
            } 
            // fall through
          case 145: break;
          case 63: 
            { yypushState(INLINE_VERBATIM_NORMAL_START); return COMMAND_TOKEN;
            } 
            // fall through
          case 146: break;
          case 64: 
            { return ANGLE_PARAM;
            } 
            // fall through
          case 147: break;
          case 65: 
            { return BEGIN_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 148: break;
          case 66: 
            { return END_TOKEN;
            } 
            // fall through
          case 149: break;
          case 67: 
            { yypushState(POSSIBLE_VERBATIM_END); return END_TOKEN;
            } 
            // fall through
          case 150: break;
          case 68: 
            { yypushState(POSSIBLE_PSEUDOCODE_END); return END_TOKEN;
            } 
            // fall through
          case 151: break;
          case 69: 
            { yypushState(INLINE_VERBATIM_PLAIN_START); return COMMAND_TOKEN;
            } 
            // fall through
          case 152: break;
          case 70: 
            { yypushState(TEXT_INSIDE_INLINE_MATH); return COMMAND_TOKEN;
            } 
            // fall through
          case 153: break;
          case 71: 
            { return MIDDLE_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 154: break;
          case 72: 
            { yypushState(POSSIBLE_VERBATIM_BEGIN); return BEGIN_TOKEN;
            } 
            // fall through
          case 155: break;
          case 73: 
            { return BEGIN_TOKEN;
            } 
            // fall through
          case 156: break;
          case 74: 
            { return END_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 157: break;
          case 75: 
            { yypushState(PARTIAL_DEFINITION); preambleOptionBracesCount = -1; return COMMAND_TOKEN;
            } 
            // fall through
          case 158: break;
          case 76: 
            { yypushState(OFF); return COMMAND_TOKEN;
            } 
            // fall through
          case 159: break;
          case 77: 
            { yypopState(); return COMMENT_TOKEN;
            } 
            // fall through
          case 160: break;
          case 78: 
            { yypushState(OFF); return COMMENT_TOKEN;
            } 
            // fall through
          case 161: break;
          case 79: 
            { return COMMAND_IFNEXTCHAR;
            } 
            // fall through
          case 162: break;
          case 80: 
            { yypushState(LATEX3); return COMMAND_TOKEN;
            } 
            // fall through
          case 163: break;
          case 81: 
            { yypopState(); return COMMAND_TOKEN;
            } 
            // fall through
          case 164: break;
          case 82: 
            { yypushState(NEW_ENVIRONMENT_DEFINITION_NAME); return COMMAND_TOKEN;
            } 
            // fall through
          case 165: break;
          case 83: 
            { yypushState(NEW_DOCUMENT_ENV_DEFINITION_NAME); return COMMAND_TOKEN;
            } 
            // fall through
          case 166: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
