package nl.hannahsten.texifyidea.lang.commands

import nl.hannahsten.texifyidea.lang.LatexPackage
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.AMSSYMB
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.LATEXSYMB
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.STMARYRD

/**
 * @author Hannah Schellekens
 */
enum class LatexArrowCommand(
    override val command: String,
    override vararg val arguments: Argument = emptyArray(),
    override val dependency: LatexPackage = LatexPackage.DEFAULT,
    override val display: String? = null,
    override val isMathMode: Boolean = true,
    val collapse: Boolean = false
) : LatexCommand {

    NOT_RIGHT_ARROW("nrightarrow", dependency = AMSSYMB, display = "↛", collapse = true),
    LEFT_ARROW("leftarrow", display = "←", collapse = true),
    LEFT_DOUBLE_ARROW("Leftarrow", display = "⇐", collapse = true),
    RIGHT_ARROW("rightarrow", display = "→", collapse = true),
    RIGHT_DOUBLE_ARROW("Rightarrow", display = "⇒", collapse = true),
    LEFT_AND_RIGHT_ARROW("leftrightarrow", display = "↔", collapse = true),
    LEFT_AND_RIGHT_DOUBLE_ARROW("Leftrightarrow", display = "⇔", collapse = true),
    LONG_LEFT_ARROW("longleftarrow", display = "⟵", collapse = true),
    LONG_LEFT_DOUBLE_ARROW("Longleftarrow", display = "⟸", collapse = true),
    LONG_RIGHT_ARROW("longrightarrow", display = "⟶", collapse = true),
    L_ONGRIGHTARROW("Longrightarrow", display = "⟹", collapse = true),
    LONG_LEFT_AND_RIGHT_ARROW("longleftrightarrow", display = "⟷", collapse = true),
    LONG_LEFT_AND_RIGHT_DOUBLE_ARROW("Longleftrightarrow", display = "⟺", collapse = true),
    UP_ARROW("uparrow", display = "↑", collapse = true),
    UP_DOUBLE_ARROW("Uparrow", display = "⇑", collapse = true),
    DOWN_ARROW("downarrow", display = "↓", collapse = true),
    DOWN_DOUBLE_ARROW("Downarrow", display = "⇓", collapse = true),
    UP_AND_DOWN_ARROW("updownarrow", display = "↕", collapse = true),
    UP_AND_DOWN_DOUBLE_ARROW("Updownarrow", display = "⇕", collapse = true),
    MAPS_TO("mapsto", display = "↦", collapse = true),
    LEFT_ARROW_WITH_HOOK("hookleftarrow", display = "↩", collapse = true),
    LEFT_HARPOON_UP("leftharpoonup", display = "↼", collapse = true),
    LEFT_HARPOON_DOWN("leftharpoondown", display = "↽", collapse = true),
    RIGHT_AND_LEFT_HARPOONS("rightleftharpoons", display = "⇌", collapse = true),
    LONG_MAPS_TO("longmapsto", display = "⟼", collapse = true),
    RIGHT_ARROW_WITH_HOOK("hookrightarrow", display = "↪", collapse = true),
    RIGHT_HARPOON_UP("rightharpoonup", display = "⇀", collapse = true),
    RIGHT_HARPOON_DOWN("rightharpoondown", display = "⇁", collapse = true),
    LEADSTO("leadsto", dependency = LATEXSYMB, display = "⤳", collapse = true),
    NORTH_EAST_ARROW("nearrow", display = "↗", collapse = true),
    SOUTH_EAST_ARROW("searrow", display = "↘", collapse = true),
    SOUTH_WEST_ARROW("swarrow", display = "↙", collapse = true),
    NORTH_WEST_ARROW("nwarrow", display = "↖", collapse = true),
    DASHED_RIGHT_ARROW("dashrightarrow", dependency = AMSSYMB, display = "⤍", collapse = true),
    LEFT_AND_RIGHT_ARROW_PAIR("leftrightarrows", dependency = AMSSYMB, display = "⇆", collapse = true),
    LEFT_ARROW_WITH_TAIL("leftarrowtail", dependency = AMSSYMB, display = "↢", collapse = true),
    ANTI_CLOCKWISE_SEMICIRCLE_ARROW_TOP("curvearrowleft", dependency = AMSSYMB, display = "↶", collapse = true),
    UP_ARROW_PAIR("upuparrows", dependency = AMSSYMB, display = "⇈", collapse = true),
    MULTIMAP("multimap", dependency = AMSSYMB, display = "⊸", collapse = true),
    RIGHT_AND_LEFT_ARROW_PAIR("rightleftarrows", dependency = AMSSYMB, display = "⇄", collapse = true),
    TWO_HEADED_RIGHT_ARROW("twoheadrightarrow", dependency = AMSSYMB, display = "↠", collapse = true),
    UP_ARROW_WITH_RIGHT_TIP("Rsh", dependency = AMSSYMB, display = "↱", collapse = true),
    DOWN_HARPOON_RIGHT("downharpoonright", dependency = AMSSYMB, display = "⇂", collapse = true),
    DASHED_LEFT_ARROW("dashleftarrow", dependency = AMSSYMB, display = "⇠", collapse = true),
    LEFT_TRIPLE_ARROW("Lleftarrow", dependency = AMSSYMB, display = "⇚", collapse = true),
    LEFT_ARROW_WITH_LOOP("looparrowleft", dependency = AMSSYMB, display = "↫", collapse = true),
    ANTI_CLOCKWISE_CIRCLE_ARROW("circlearrowleft", dependency = AMSSYMB, display = "↺", collapse = true),
    UP_HARPOON_LEFT("upharpoonleft", dependency = AMSSYMB, display = "↿", collapse = true),
    LEFT_AND_RIGHT_WAVE_ARROW("leftrightsquigarrow", dependency = AMSSYMB, display = "↭", collapse = true),
    RIGHT_ARROW_PAIR("rightrightarrows", dependency = AMSSYMB, display = "⇉", collapse = true),
    RIGHT_ARROW_WITH_TAIL("rightarrowtail", dependency = AMSSYMB, display = "↣", collapse = true),
    CLOCKWISE_SEMICIRCLE_ARROW_TOP("curvearrowright", dependency = AMSSYMB, display = "↷", collapse = true),
    DOWN_ARROW_PAIR("downdownarrows", dependency = AMSSYMB, display = "⇊", collapse = true),
    RIGHT_WAVE_ARROW("rightsquigarrow", dependency = AMSSYMB, display = "⇝", collapse = true),
    LEFT_ARROW_PAIR("leftleftarrows", dependency = AMSSYMB, display = "⇇", collapse = true),
    TWO_HEADED_LEFT_ARROW("twoheadleftarrow", dependency = AMSSYMB, display = "↞", collapse = true),
    LEFT_AND_RIGHT_HARPOONS("leftrightharpoons", dependency = AMSSYMB, display = "↰", collapse = true),
    UP_ARROW_WITH_LEFT_TIP("Lsh", dependency = AMSSYMB, display = "↰", collapse = true),
    DOWN_HARPOON_LEFT("downharpoonleft", dependency = AMSSYMB, display = "⇃", collapse = true),
    RIGHT_ARROW_WITH_LOOP("looparrowright", dependency = AMSSYMB, display = "↬", collapse = true),
    CLOCKWISE_CIRCLE_ARROW("circlearrowright", dependency = AMSSYMB, display = "↻", collapse = true),
    UP_HARPOON_RIGHT("upharpoonright", dependency = AMSSYMB, display = "↾", collapse = true),
    NOT_LEFT_ARROW("nleftarrow", dependency = AMSSYMB, display = "↚", collapse = true),
    NOT_LEFT_DOUBLE_ARROW("nLeftarrow", dependency = AMSSYMB, display = "⇍", collapse = true),
    NOT_RIGHT_DOUBLE_ARROW("nRightarrow", dependency = AMSSYMB, display = "⇏", collapse = true),
    NOT_LEFT_AND_RIGHT_ARROW("nleftrightarrow", dependency = AMSSYMB, display = "↮", collapse = true),
    NOT_LEFT_AND_RIGHT_DOUBLE_ARROW("nLeftrightarrow", dependency = AMSSYMB, display = "⇎", collapse = true),
    LONG_MAPS_FROM_DOUBLE_ARROW("Longmapsfrom", dependency = STMARYRD, display = "⟽", collapse = true),
    LONG_MAPS_TO_DOUBLE_ARROW("Longmapsto", dependency = STMARYRD, display = "⟾", collapse = true),
    MAPS_FROM_DOUBLE_ARROW("Mapsfrom", dependency = STMARYRD, display = "⤆", collapse = true),
    MAPS_TO_DOUBLE_ARROW("Mapsto", dependency = STMARYRD, display = "⤇", collapse = true),
    LEFT_OPEN_HEADED_ARROW("leftarrowtriangle", dependency = STMARYRD, display = "⇽", collapse = true),
    RIGHT_OPEN_HEADED_ARROW("rightarrowtriangle", dependency = STMARYRD, display = "⇾", collapse = true),
    LEFT_AND_RIGHT_ARROW_EQUALS("leftrightarroweq", dependency = STMARYRD),
    LEFT_AND_RIGHT_OPEN_HEADED_ARROW("leftrightarrowtriangle", dependency = STMARYRD, display = "⇿", collapse = true),
    LIGHTNING("lightning", dependency = STMARYRD, display = "☇", collapse = true),
    LONG_MAPS_FROM("longmapsfrom", dependency = STMARYRD, display = "⟻", collapse = true),
    MAPS_FROM("mapsfrom", dependency = STMARYRD, display = "↤", collapse = true),
    NORTH_NORTH_EAST_ARROW("nnearrow", dependency = STMARYRD, display = "↗", collapse = true),
    NORTH_NORTH_WEST_ARROW("nnwarrow", dependency = STMARYRD, display = "↖", collapse = true),
    SOUNT_SOUTH_EAST_ARROW("ssearrow", dependency = STMARYRD, display = "↘", collapse = true),
    SOUTH_SOUTH_WEST_ARROW("sswarrow", dependency = STMARYRD, display = "↙", collapse = true),
    SHORT_LEFT_ARROW("shortleftarrow", dependency = STMARYRD, display = "←", collapse = true),
    SHORT_UP_ARROW("shortuparrow", dependency = STMARYRD, display = "↑", collapse = true),
    SHORT_RIGHT_ARROW("shortrightarrow", dependency = STMARYRD, display = "→", collapse = true),
    SHORT_DOWN_ARROW("shortdownarrow", dependency = STMARYRD, display = "↓", collapse = true),
    ;

    override val identifier: String
        get() = name
}