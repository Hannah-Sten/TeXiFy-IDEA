:experimental:

See https://github.com/Ruben-Sten/TeXiFy-IDEA/blob/master/CONTRIBUTING.md for the general contributing guide.

== Debugging performance issues

If you do not have a favourite profiler yet, you can use VisualVM. Install it using your package manager or go to https://visualvm.github.io/.

* First, just run TeXiFy like usual.
* Start VisualVM.
* In the Applications panel on the left, identify the instance of IntelliJ where TeXiFy is running, probably it is named Idea. Right-click on it and open.
* Go to the Sampler tab.
* Click Settings, and click Profile only packages. Specify `nl.hannahsten.**` or a specific class you want to filter on. Note that if you want to filter for a Kotlin class you have to append `Kt` to the class name, e.g. `nl.hannahsten.texifyidea.editor.UpDownAutoBracketKt`. However, not all classes will appear in the view.
* Click CPU to start profiling, you can take a Snapshot to view and save results. Note that you may have to click a few more levels open to see the actual methods.
* To clear the profiling view, close and reopen the tab.

== Don't edit generated files directly

So, the files in `gen`. Do edit the files in `src`.
If needed, use method injection or mixin classes.

=== Editing a lexer

For some documentation, see https://jflex.de/manual.html
When you edit a `.flex` file, regenerate the lexer with Run JFlex Generator from the context menu, as described at https://www.jetbrains.org/intellij/sdk/docs/tutorials/custom_language_support/lexer_and_parser_definition.html#generate-a-lexer-class

=== Editing a parser

When you edit a `.bnf` file, regenerate the parser with Grammar-Kit from the context menu or using kbd:[Ctrl + Shift + G].


Note that we have the generated files committed to git because of https://github.com/JetBrains/gradle-grammar-kit-plugin/issues/3

== LatexCommands.commandToken.text vs LatexCommands.name

Throughout the code, you may see either `LatexCommands.commandToken.text` or `LatexCommands.name` being used to get the command name (e.g. `\section`).
Since the (generated) implementation of `getName()` is

[source,java]
----
default String getName() {
    return getCommandToken().getText();
}
----

you would think that these are the same.
But there is an important difference! The `name` is _indexed_ (see `LatexCommandsIndex`).
This means that probably using `name` is recommended, as it would use the index, but it may be completely wrong if the index is not updated correctly.
This can lead to strange behaviour (see e.g. https://github.com/Hannah-Sten/TeXiFy-IDEA/issues/1097[#1097]).

== Execution failed for task ':runIde'.	Process 'command java.exe' finished with non-zero exit value 1

If you get the error `Caused by: org.gradle.process.internal.ExecException: Process 'command 'C:\Users\username\.gradle\caches\modules-2\files-2.1\com.jetbrains\jbre\jbr-11_0_6-windows-x64-b765.25\jbr\bin\java.exe'' finished with non-zero exit value 1` then delete the `jbre` folder in that path.
