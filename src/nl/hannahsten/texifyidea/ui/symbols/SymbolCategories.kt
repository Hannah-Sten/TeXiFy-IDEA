package nl.hannahsten.texifyidea.ui.symbols

import nl.hannahsten.texifyidea.lang.commands.*
import nl.hannahsten.texifyidea.lang.commands.LatexArrowCommand.*
import nl.hannahsten.texifyidea.lang.commands.LatexColoneqCommand.*
import nl.hannahsten.texifyidea.lang.commands.LatexGenericMathCommand.*
import nl.hannahsten.texifyidea.lang.commands.LatexOperatorCommand.*
import nl.hannahsten.texifyidea.lang.commands.LatexGreekCommand.*
import nl.hannahsten.texifyidea.lang.commands.LatexDelimiterCommand.*
import nl.hannahsten.texifyidea.lang.commands.LatexEuroCommand.*
import nl.hannahsten.texifyidea.lang.commands.LatexGenericMathCommand.UNDERLINE
import nl.hannahsten.texifyidea.lang.commands.LatexGenericRegularCommand.*
import nl.hannahsten.texifyidea.lang.commands.LatexTextSymbolCommand.*
import nl.hannahsten.texifyidea.lang.commands.LatexTextcompCommand.*
import nl.hannahsten.texifyidea.lang.commands.LatexUncategorizedStmaryrdSymbols.*

/**
 * @author Hannah Schellekens
 */
object SymbolCategories {

    /**
     * Maps each category to the symbols that are in the category.
     *
     * The categories are ordered, as are the symbols per category.
     */
    val categories: Map<SymbolCategory, List<SymbolUiEntry>> = LinkedHashMap<SymbolCategory, List<SymbolUiEntry>>().apply {

        createCategory("Operators") {
            add(DryUiEntry(description = "plus sign", "+", "misc_plus.png", "+", true))
            add(DryUiEntry(description = "minus sign", "-", "misc_minus.png", "-", true))
            add(PLUS_MINUS)
            add(MINUS_PLUS)
            add(TIMES)
            add(DIV)
            add(ASTERISK)
            add(STAR)
            add(CIRCLE)
            add(BULLET)
            add(DIVIDEONTIMES)
            add(LTIMES)
            add(RTIMES)
            add(CDOT)
            add(DOT_PLUS)
            add(LEFT_THREE_TIMES)
            add(RIGHT_THREE_TIMES)
            add(DryUiEntry(description = "factorial", "!", "misc_factorial.png", "!", true))
            add(AMALGAMATION)
            add(CIRCLED_TIMES)
            add(CIRCLED_PLUS)
            add(CIRCLED_MINUS)
            add(CIRCLED_SLASH)
            add(CIRCLED_DOT)
            add(CIRCLED_CIRCLE)
            add(CIRCLED_DASH)
            add(CIRCLED_ASTERISK)
            add(BIG_CIRCLE)
            add(BOXED_DOT)
            add(BOXED_MINUS)
            add(BOXED_PLUS)
            add(BOXED_TIMES)
            add(DIAMOND)
            add(BIG_TRIANGLE_UP)
            add(TRIANGLE_LEFT)
            add(TRIANGLE_RIGHT)
            add(LHD)
            add(RHD)
            add(UN_LHD)
            add(UN_RHD)
            add(UNION)
            add(INTERSECTION)
            add(MULTISET_UNION)
            add(DOUBLE_UNION)
            add(DOUBLE_INTERSECTION)
            add(WREATH_PRODUCT)
            add(SET_MINUS)
            add(SMALL_SET_MINUS)
            add(SQUARE_CAP)
            add(SQUARE_CUP)
            add(NOT_SIGN)
            add(INVERSED_NOT_SIGN)
            add(WEDGE)
            add(VEE)
            add(WEDGE_BAR)
            add(VEE_BAR)
            add(DOUBLE_BAR_WEDGE)
            add(CURLY_WEDGE)
            add(CURLY_VEE)
            add(DAGGER)
            add(DOUBLE_DAGGER)
            add(INTERCALATE)
            add(N_ARY_INTERSECTION)
            add(N_ARY_UNION)
            add(N_ARY_UNION_WITH_PLUS)
            add(N_ARY_SQUARE_UNION)
            add(N_ARY_PRODUCT)
            add(N_ARY_COPRODUCT)
            add(BIG_WEDGE)
            add(BIG_VEE)
            add(BIG_CIRCLED_DOT)
            add(BIG_CIRCLED_PLUS)
            add(BIG_CIRCLED_TIMES)
            add(SUM)
            add(INTEGRAL)
            add(CONTOUR_INTEGRAL)
            add(DOUBLE_INTEGRAL)
            add(TRIPLE_INTEGRAL)
            add(QUADRUPLE_INTEGRAL)
            add(DOTS_INTEGRAL)
        }

        createCategory("Math functions") {
            add(INVERSE_COSINE)
            add(INVERSE_SINE)
            add(INVERSE_TANGENT)
            add(ARGUMENT)
            add(COSINE)
            add(HYPERBOLIC_COSINE)
            add(COTANGENT)
            add(HYPERBOLIC_COTANGENT)
            add(COSECANT)
            add(DEGREES)
            add(DERMINANT)
            add(DIMENSION)
            add(EXPONENTIAL)
            add(GREATEST_COMMON_DIVISOR)
            add(HOMOMORPHISM)
            add(INFINUM)
            add(KERNEL)
            add(BASE_2_LOGARITHM)
            add(LIMIT)
            add(LIMIT_INFERIOR)
            add(LIMIT_SUPERIOR)
            add(NATURAL_LOGARITHM)
            add(LOGARITHM)
            add(MAXIMUM)
            add(MINIMUM)
            add(PROBABILITY)
            add(INVERSE_LIMIT)
            add(SECANT)
            add(SINE)
            add(HYPERBOLIC_SINE)
            add(SUPREMUM)
            add(TANGENT)
            add(HBOLICTANGENT)
            add(LIMIT_SUPERIOR_VARIANT)
            add(LIMIT_INFERIOR_VARIANT)
            add(DIRECT_LIMIT_VARIANT)
            add(INVERSE_LIMIT_VARIANT)
        }

        createCategory("Relations") {
            add(BOWTIE)
            add(JOIN)
            add(PROPORTIONAL_TO)
            add(PROPORTIONAL_TO_SYMBOL)
            add(WASYSYM_PROPTO)
            add(MULTIMAP)
            add(PITCHFORK)
            add(THEREFORE)
            add(BECAUSE)
            add(DryUiEntry(description = "equals sign", "=", "misc_equals.png", "=", true))
            add(NOT_EQUAL)
            add(EQUIVALENT)
            add(APPROX)
            add(TILDE_OPERATOR)
            add(NOT_SIM)
            add(SIM_EQUALS)
            add(BACKWARDS_SIM_EQUALS)
            add(APPROX_EQUALS)
            add(CONG)
            add(NOT_CONG)
            add(COLON_EQUALSS)
            add(EQUALSS_COLON)
            add(COLON_EQUALS)
            add(EQUALS_COLON)
            add(COLON_APPROX)
            add(COLON_SIM)
            add(DOUBLE_COLON)
            add(DOUBLE_COLON_EQUALSS)
            add(EQUALSS_DOUBLE_COLON)
            add(DOUBLE_COLON_EQUALS)
            add(EQUALS_DOUBLE_COLON)
            add(DOUBLE_COLON_APPROX)
            add(DOUBLE_COLON_SIM)
            add(CIRCLE_EQUALS)
            add(TRIANGLE_EQUALS)
            add(EQUALS_CIRCLE)
            add(BUMP_EQUALS)
            add(DOUBLE_BUMP_EQUALS)
            add(DOT_EQUALS_DOT)
            add(RISING_DOTS_EQUALS)
            add(FALLING_DOTS_EQUALS)
            add(DOT_EQUALS)
            add(SMILE)
            add(FROWN)
            add(ASYMP)
            add(SMALL_FROWN)
            add(SMALL_SMILE)
            add(BETWEEN)
            add(PRECEDES)
            add(SUCCEEDS)
            add(NOT_PRECEEDS)
            add(NOT_SUCCEEDS)
            add(PRECEDES_OR_EQUAL)
            add(SUCCEEDS_OR_EQUALS)
            add(NOT_PRECEDES_OR_EQUALS)
            add(NOT_SUCCEEDS_OR_EQUALS)
            add(CURLY_PRECEDES_OR_EQUALS)
            add(CURLY_SUCCEEDS_OR_EQUALS)
            add(CURLY_EQUALS_PRECEDES)
            add(CURLY_EQUALS_SUCCEEDS)
            add(PRECEDES_SIM)
            add(SUCCEEDS_SIM)
            add(PRECEDES_NOT_SIM)
            add(SUCCEEDS_NOT_SIM)
            add(PRECEDES_APPROX)
            add(SUCCEEDS_APPROX)
            add(PRECEDES_NOT_APPROX)
            add(SUCCEEDS_NOT_APPROX)
            add(PERPENDICULAR)
            add(RIGHT_TACK)
            add(LEFT_TACK)
            add(NOT_RIGHT_TACK)
            add(FORCES)
            add(TRIPLE_RIGHT_TACK)
            add(MODELS)
            add(VERTICAL_DOUBLE_DASH_RIGHT)
            add(NOT_VERTICAL_DOUBLE_DASH_RIGHT)
            add(NOT_DOUBLE_VERTICAL_DOUBLE_DASH_RIGHT)
            add(MID)
            add(NOT_MID)
            add(PARALLEL)
            add(NOT_PARALLEL)
            add(MID_SHORT)
            add(NOT_MID_SHORT)
            add(NOT_PARALLEL_SHORT)
            add(DryUiEntry(description = "less than", "<", "misc_lesser.png", "<", true))
            add(DryUiEntry(description = "greater than", ">", "misc_greater.png", ">", true))
            add(NOT_LESS_THAN)
            add(NOT_GREATER_THAN)
            add(LESS_THAN_DOT)
            add(GREATER_THAN_DOT)
            add(DOUBLE_LESS_THAN)
            add(DOUBLE_GREATER_THAN)
            add(LESS_LESS_LESS)
            add(GREATER_GREATER_GREATER)
            add(LESS_THAN_EQUAL)
            add(GREATER_THAN_EQUAL)
            add(LESS_THAN_NOT_EQUAL)
            add(GREATER_THAN_NOT_EQUAL)
            add(NOT_LESS_THAN)
            add(NOT_GREATER_THAN)
            add(LESS_THAN_EQUALL)
            add(GREATER_THAN_EQUALL)
            add(LESS_NOT_EQUAL)
            add(GREATER_NOT_EQUAL)
            add(LESS_THAN_VERTICAL_NOT_EQUALS)
            add(GREATER_THAN_VERTICAL_NOT_EQUALS)
            add(NOT_LESS_THAN_EQUALL)
            add(NOT_GREATER_THAN_EQUALL)
            add(LESS_THAN_EQUALS_SLANT)
            add(GREATER_THAN_EQUALS_SLANT)
            add(NOT_LESS_THAN_EQUALS_SLANT)
            add(NOT_GREATER_THAN_EQUALS_SLANT)
            add(EQUALS_SLANT_LESS_THAN)
            add(EQUALS_SLANT_GREATER_THAN)
            add(LESS_GREATER)
            add(GREATER_LESS)
            add(LESS_EQUALS_GREATER)
            add(GREATER_EQUALS_LESSER)
            add(LESS_EQUALSS_GREATER)
            add(GREATER_EQUALSS_LESSER)
            add(LESS_SIM)
            add(GREATER_SIM)
            add(LESS_NOT_SIM)
            add(GREATER_NOT_SIM)
            add(LESS_APPROX)
            add(GREATER_APPROX)
            add(LESS_NOT_APPROX)
            add(GREATER_NOT_APPROX)
            add(TRIANGLE_LEFT_VARIATION)
            add(TRIANGLE_RIGHT_VARIATION)
            add(NOT_TRIANGLE_LEFT)
            add(NOT_TRIANGLE_RIGHT)
            add(TRIANGLE_LEFT_EQUALS)
            add(TRIANGLE_RIGHT_EQUALS)
            add(TRIANGLE_LEFT_EQUALS_SLANT)
            add(TRIANGLE_RIGHT_EQUALS_SLANT)
            add(NOT_TRIANGLE_LEFT_EQUALS)
            add(NOT_TRIANGLE_RIGHT_EQUALS)
            add(NOT_TRIANGLE_LEFT_EQUALS_SLANT)
            add(NOT_TRIANGLE_RIGHT_SLANT)
            add(BLACK_TRIANGLE_LEFT)
            add(BLACK_TRIANGLE_RIGHT)
            add(CONTAIN_AS_MEMBER)
            add(ELEMENT_OF)
            add(NOT_ELEMENT_OF)
            add(SUBSET)
            add(SUPERSET)
            add(SUBSET_EQUALS)
            add(SUPERSET_EQUALS)
            add(SUBSET_NOT_EQUALS)
            add(SUPERSET_NOT_EQUALS)
            add(SUBSET_NOT_EQUALS_VARIATION)
            add(SUPERSET_NOT_EQUALS_VARIATION)
            add(NOT_SUBSET_EQUALS)
            add(NOT_SUPERSET_EQUALS)
            add(SUBSET_EQUALSS)
            add(SUPERSET_EQUALSS)
            add(SUBSET_NOT_EQUALSS)
            add(SUPERSET_NOT_EQUALSS)
            add(NOT_SUBSET_EQUALSS)
            add(NOT_SUPERSET_EQUALSS)
            add(SUBSET_PLUS)
            add(SUBSET_PLUS_EQUALS)
            add(SUPERSET_PLUS)
            add(SUPERSET_PLUS_EQUALS)
            add(REVERSED_EPSILON)
            add(DOUBLE_SUBSET)
            add(DOUBLE_SUPERSET)
            add(SQUARE_SUBSET)
            add(SQUARE_SUPERSET)
            add(SQUARE_SUBSET_EQUALS)
            add(SQUARE_SUPERSET_EQUALS)
            add(IN_PLUS)
            add(REVERSED_IN_PLUS)
        }

        createCategory("Arrows") {
            add(LEFT_ARROW)
            add(LEFT_AND_RIGHT_ARROW)
            add(RIGHT_ARROW)
            add(LONG_LEFT_ARROW)
            add(LONG_LEFT_AND_RIGHT_ARROW)
            add(LONG_RIGHT_ARROW)
            add(SHORT_LEFT_ARROW)
            add(SHORT_RIGHT_ARROW)
            add(UP_ARROW)
            add(UP_AND_DOWN_ARROW)
            add(DOWN_ARROW)
            add(SHORT_DOWN_ARROW)
            add(SHORT_UP_ARROW)
            add(NORTH_NORTH_EAST_ARROW)
            add(NORTH_EAST_ARROW)
            add(SOUTH_EAST_ARROW)
            add(SOUNT_SOUTH_EAST_ARROW)
            add(SOUTH_SOUTH_WEST_ARROW)
            add(SOUTH_WEST_ARROW)
            add(NORTH_WEST_ARROW)
            add(NORTH_NORTH_WEST_ARROW)
            add(MAPS_TO)
            add(MAPS_FROM)
            add(MAPS_TO_DOUBLE_ARROW)
            add(MAPS_FROM_DOUBLE_ARROW)
            add(LONG_MAPS_TO_DOUBLE_ARROW)
            add(LONG_MAPS_FROM_DOUBLE_ARROW)
            add(LONG_MAPS_TO)
            add(LONG_MAPS_FROM)
            add(NOT_LEFT_ARROW)
            add(NOT_LEFT_AND_RIGHT_ARROW)
            add(NOT_RIGHT_ARROW)
            add(LEFT_ARROW_WITH_HOOK)
            add(RIGHT_ARROW_WITH_HOOK)
            add(TWO_HEADED_LEFT_ARROW)
            add(TWO_HEADED_RIGHT_ARROW)
            add(LEFT_ARROW_WITH_TAIL)
            add(RIGHT_ARROW_WITH_TAIL)
            add(LEFT_DOUBLE_ARROW)
            add(LEFT_AND_RIGHT_DOUBLE_ARROW)
            add(RIGHT_DOUBLE_ARROW)
            add(UP_DOUBLE_ARROW)
            add(UP_AND_DOWN_DOUBLE_ARROW)
            add(DOWN_DOUBLE_ARROW)
            add(LONG_LEFT_DOUBLE_ARROW)
            add(LONG_LEFT_AND_RIGHT_DOUBLE_ARROW)
            add(LONG_RIGHT_ARROW)
            add(NOT_LEFT_DOUBLE_ARROW)
            add(NOT_LEFT_AND_RIGHT_DOUBLE_ARROW)
            add(NOT_RIGHT_DOUBLE_ARROW)
            add(LEFT_ARROW_PAIR)
            add(LEFT_AND_RIGHT_ARROW_PAIR)
            add(RIGHT_AND_LEFT_ARROW_PAIR)
            add(RIGHT_ARROW_PAIR)
            add(UP_ARROW_PAIR)
            add(DOWN_ARROW_PAIR)
            add(ANTI_CLOCKWISE_CIRCLE_ARROW)
            add(CLOCKWISE_CIRCLE_ARROW)
            add(ANTI_CLOCKWISE_SEMICIRCLE_ARROW_TOP)
            add(CLOCKWISE_SEMICIRCLE_ARROW_TOP)
            add(UP_ARROW_WITH_LEFT_TIP)
            add(UP_ARROW_WITH_RIGHT_TIP)
            add(LEFT_ARROW_WITH_LOOP)
            add(RIGHT_ARROW_WITH_LOOP)
            add(DASHED_LEFT_ARROW)
            add(DASHED_RIGHT_ARROW)
            add(LEFT_AND_RIGHT_WAVE_ARROW)
            add(RIGHT_WAVE_ARROW)
            add(LEFT_TRIPLE_ARROW)
            add(LEFT_HARPOON_DOWN)
            add(RIGHT_HARPOON_DOWN)
            add(LEFT_HARPOON_UP)
            add(RIGHT_HARPOON_UP)
            add(RIGHT_AND_LEFT_HARPOONS)
            add(LEFT_AND_RIGHT_HARPOONS)
            add(UP_HARPOON_LEFT)
            add(DOWN_HARPOON_LEFT)
            add(UP_HARPOON_RIGHT)
            add(DOWN_HARPOON_RIGHT)
            add(TEXT_LEFT_ARROW)
            add(TEXT_RIGHT_ARROW)
            add(TEXT_UP_ARROW)
            add(TEXT_DOWN_ARROW)
            add(LEFT_OPEN_HEADED_ARROW)
            add(LEFT_AND_RIGHT_OPEN_HEADED_ARROW)
            add(RIGHT_OPEN_HEADED_ARROW)
            add(LEFT_AND_RIGHT_ARROW_EQUALS)
            add(LIGHTNING)
        }

        createCategory("Delimiters") {
            // Place the enclosing delimiters at the front:
            // 1. Makes the symbol overview less cluttered.
            // 2. Encourages usage of \left\right over standalone symbols.
            add(DryUiEntry(description = "brackets", "\\left[ <caret> \\right]", "misc_brackets_pair.png", "\\left[...\\right]", true))
            addLeftRight(LEFT_BRACKET_BOLD, RIGHT_BRACKET_BOLD, "bold brackets", "misc_bold_brackets_pair.png")
            addLeftRight(LEFT_ANGLE_BRACKET, RIGHT_ANGLE_BRACKET, "angular brackets", "misc_angular_brackets_pair.png")
            add(DryUiEntry(description = "absolute value", "\\left| <caret> \\right|", "misc_absolute_value_pair.png", "\\left|...\\right|", true))
            addLeftRight(DOUBLE_VERTICAL_LINE, DOUBLE_VERTICAL_LINE, "length", "misc_length_pair.png")
            addLeftRight(LEFT_CEIL, RIGHT_CEIL, "ceiling", "misc_ceiling_pair.png")
            addLeftRight(LEFT_CEIL_BOLD, RIGHT_CEIL_BOLD, "bold ceiling", "misc_bold_ceiling_pair.png", requireLeftRight = false)
            addLeftRight(LEFT_FLOOR, RIGHT_FLOOR, "floor", "misc_floor_pair.png")
            addLeftRight(LEFT_FLOOR_BOLD, RIGHT_FLOOR_BOLD, "bold floor", "misc_bold_floor_pair.png", requireLeftRight = false)
            add(DryUiEntry(description = "parentheses", "\\left( <caret> \\right)", "misc_parentheses_pair.png", "\\left(...\\right)", true))
            addLeftRight(LEFT_PARENTHESIS_BOLD, RIGHT_PARENTHESIS_BOLD, "bold parentheses", "misc_bold_parentheses_pair.png", requireLeftRight = false)
            add(DryUiEntry(description = "braces", "\\left\\{ <caret> \\right\\}", "misc_braces_pair.png", "\\left\\{...\\right\\}", true))
            addLeftRight(LEFT_MOUSTACHE, RIGHT_MOUSTACHE, "moustaches", "misc_moustaches_pair.png")
            addLeftRight(LEFT_GROUP, RIGHT_GROUP, "group", "misc_group_pair.png")
            addLeftRight(BRACEVERT, BRACEVERT, "bracevert", "misc_bracevert_pair.png")
            addLeftRight(LEFT_BAG, RIGHT_BAG, "bag", "misc_bag_pair.png", requireLeftRight = false)
            addLeftRight(LEFT_BAG_BOLD, RIGHT_BAG_BOLD, "bold bag", "misc_bold_bag_pair.png", requireLeftRight = false)

            // Single delimiters.
            add(DryUiEntry(description = "left bracket", "[", "misc_left_bracket.png", "[", true))
            add(DryUiEntry(description = "right bracket", "]", "misc_right_bracket.png", "]", true))
            add(LEFT_BRACKET_BOLD)
            add(RIGHT_BRACKET_BOLD)
            add(LEFT_ANGLE_BRACKET)
            add(RIGHT_ANGLE_BRACKET)
            add(DryUiEntry(description = "vertical line", "|", "misc_vertical_line.png", "|", true))
            add(DOUBLE_VERTICAL_LINE)
            add(LEFT_CEIL)
            add(RIGHT_CEIL)
            add(LEFT_CEIL_BOLD)
            add(RIGHT_CEIL_BOLD)
            add(LEFT_FLOOR)
            add(RIGHT_FLOOR)
            add(LEFT_FLOOR_BOLD)
            add(RIGHT_FLOOR_BOLD)
            add(DryUiEntry(description = "left parenthesis", "(", "misc_left_parenthesis.png", "(", true))
            add(DryUiEntry(description = "right parenthesis", ")", "misc_right_parenthesis.png", ")", true))
            add(LEFT_PARENTHESIS_BOLD)
            add(RIGHT_PARENTHESIS_BOLD)
            add(DryUiEntry(description = "left brace", "\\{", "misc_left_brace.png", "\\{", true))
            add(DryUiEntry(description = "right brace", "\\}", "misc_right_brace.png", "\\}", true))
            add(DryUiEntry(description = "forward slash", "/", "misc_forward_slash.png", "/", true))
            add(BACKSLASH)
            add(LEFT_MOUSTACHE, latex = "\\left\\lmoustache", image = "\\left\\lmoustache\\right.")
            add(RIGHT_MOUSTACHE, latex = "\\right\\rmoustache", image = "\\left.\\right\\rmoustache")
            add(LEFT_GROUP, latex = "\\left\\lgroup", image = "\\left\\lgroup\\right.")
            add(RIGHT_GROUP, latex = "\\right\\rgroup", image = "\\left.\\right\\rgroup")
            add(BRACEVERT)
            add(LEFT_BAG)
            add(RIGHT_BAG)
            add(LEFT_BAG_BOLD)
            add(RIGHT_BAG_BOLD)
            add(UPPER_LEFT_CORNER)
            add(UPPER_RIGHT_CORNER)
            add(LOWER_LEFT_CORNER)
            add(LOWER_RIGHT_CORNER)
        }

        createCategory("Greek") {
            add(ALPHA)
            add(BETA)
            add(GAMMA)
            add(DELTA)
            add(BETTER_LOOKING_EPSILON)
            add(EPSILON)
            add(ZETA)
            add(ETA)
            add(THETA)
            add(THETA_VARIANT)
            add(IOTA)
            add(KAPPA)
            add(LAMBDA)
            add(MU)
            add(NU)
            add(XI)
            add(DryUiEntry(description = "omicron", "o", "misc_omicron.png", "o", true))
            add(PI)
            add(PI_VARIANT)
            add(RHO)
            add(RHO_VARIANT)
            add(SIGMA)
            add(FINAL_SIGMA)
            add(TAU)
            add(UPSILON)
            add(PHI_STRAIGHT)
            add(PHI_CURLY)
            add(CHI)
            add(PSI)
            add(OMEGA)
            add(DryUiEntry(description = "capital alpha", "A", "misc_capital_alpha.png", "A", true))
            add(DryUiEntry(description = "capital beta", "B", "misc_capital_beta.png", "B", true))
            add(CAPITAL_GAMMA)
            add(CAPITAL_GAMMA_VARIANT)
            add(CAPITAL_DELTA)
            add(CAPITAL_DELTA_VARIANT)
            add(DryUiEntry(description = "capital epsilon", "E", "misc_capital_epsilon.png", "E", true))
            add(DryUiEntry(description = "capital zeta", "Z", "misc_capital_zeta.png", "Z", true))
            add(DryUiEntry(description = "capital eta", "Z", "misc_capital_eta.png", "H", true))
            add(CAPITAL_THETA)
            add(CAPITAL_THETA_VARIANT)
            add(DryUiEntry(description = "capital iota", "I", "misc_capital_iota.png", "I", true))
            add(DryUiEntry(description = "capital kappa", "K", "misc_capital_kappa.png", "K", true))
            add(CAPITAL_LAMBDA)
            add(CAPITAL_LAMBDA_VARIANT)
            add(DryUiEntry(description = "capital mu", "M", "misc_capital_mu.png", "M", true))
            add(DryUiEntry(description = "capital nu", "M", "misc_capital_nu.png", "N", true))
            add(CAPITAL_XI)
            add(CAPITAL_XI_VARIANT)
            add(DryUiEntry(description = "capital omicron", "O", "misc_capital_omicron.png", "O", true))
            add(CAPITAL_PI)
            add(CAPITAL_PI_VARIANT)
            add(DryUiEntry(description = "capital rho", "P", "misc_capital_rho.png", "P", true))
            add(CAPITAL_SIGMA)
            add(CAPITAL_SIGMA_VARIANT)
            add(DryUiEntry(description = "capital tau", "T", "misc_capital_tau.png", "T", true))
            add(CAPITAL_UPSILON)
            add(CAPITAL_UPSILON_VARIANT)
            add(CAPITAL_PHI)
            add(CAPITAL_PHI_VARIANT)
            add(DryUiEntry(description = "capital chi", "X", "misc_capital_chi.png", "X", true))
            add(CAPITAL_PSI)
            add(CAPITAL_PSI_VARIANT)
            add(CAPITAL_OMEGA)
            add(CAPITAL_OMEGA_VARIANT)
        }

        createCategory("Misc. math") {
            add(ACUTE, latex = "\\acute{<caret>}", image = "\\acute{a}")
            add(GRAVE, latex = "\\grave{<caret>}", image = "\\grave{a}")
            add(CHECK, latex = "\\check{<caret>}", image = "\\check{a}")
            add(HAT, latex = "\\hat{<caret>}", image = "\\hat{a}")
            add(TILDE, latex = "\\tilde{<caret>}", image = "\\tilde{a}")
            add(BAR, latex = "\\bar{<caret>}", image = "\\bar{a}")
            add(VECTOR, latex = "\\vec{<caret>}", image = "\\vec{a}")
            add(BREVE, latex = "\\breve{<caret>}", image = "\\breve{a}")
            add(DOT, latex = "\\dot{<caret>}", image = "\\dot{a}")
            add(DOUBLE_DOTS, latex = "\\ddot{<caret>}", image = "\\ddot{a}")
            add(TRIPLE_DOTS, latex = "\\dddot{<caret>}", image = "\\dddot{a}")
            add(QUADRUPLE_DOTS, latex = "\\ddddot{<caret>}", image = "\\ddddot{a}")
            add(MATHRING, latex = "\\mathring{<caret>}", image = "\\mathring{a}")
            add(WIDE_TILDE, latex = "\\widetilde{<caret>}", image = "\\widetilde{abc}")
            add(WIDE_HAT, latex = "\\widehat{<caret>}", image = "\\widehat{abc}")
            add(OVER_LEFT_ARROW, latex = "\\overleftarrow{<caret>}", image = "\\overleftarrow{abc}")
            add(OVER_RIGHT_ARROW, latex = "\\overrightarrow{<caret>}", image = "\\overrightarrow{abc}")
            add(OVERLINE, latex = "\\overline{<caret>}", image = "\\overline{abc}")
            add(UNDERLINE, latex = "\\underline{<caret>}", image = "\\underline{abc}")
            add(OVERBRACE, latex = "\\overbrace{<caret>}", image = "\\overbrace{abc}")
            add(UNDERBRACE, latex = "\\underbrace{<caret>}", image = "\\underbrace{abc}")
            add(OVER_LEFT_RIGHT_ARROW, latex = "\\overleftrightarrow{<caret>}", image = "\\overleftrightarrow{abc}")
            add(UNDER_LEFT_RIGHT_ARROW, latex = "\\underleftrightarrow{<caret>}", image = "\\underleftrightarrow{abc}")
            add(UNDER_LEFT_ARROW, latex = "\\underleftarrow{<caret>}", image = "\\underleftarrow{abc}")
            add(UNDER_RIGHT_ARROW, latex = "\\underrightarrow{<caret>}", image = "\\underrightarrow{abc}")
            add(ABOVE_LEFT_ARROW, latex = "\\xleftarrow{<caret>}", image = "\\xleftarrow{abc}")
            add(ABOVE_RIGHT_ARROW, latex = "\\xrightarrow{<caret>}", image = "\\xrightarrow{abc}")
            add(STACKED_RELATION, latex = "\\stackrel{<caret>}{}", image = "\\stackrel{abc}{=}")
            add(SQUARE_ROOT, latex = "\\sqrt{<caret>}", image = "\\sqrt{x}")
            add(MIDDLE_DOT)
            add(COLON)
            add(LDOTP)
            add(VERTICAL_DOTS)
            add(CENTER_DOTS)
            add(DOWN_RIGHT_DIAGONAL_DOTS)
            add(LOWER_DOTS)
            add(INFINITY)
            add(PRIME)
            add(BACKSLASH)
            add(DIAGONAL_DOWN)
            add(DIAGONAL_UP)
            add(SQUARE_ROOT_SURD)
            add(EMPTY_SET)
            add(NOTHING)
            add(SHARP)
            add(FLAT)
            add(NATURAL)
            add(ANGLE)
            add(SPHERICAL_ANGLE)
            add(MEASURED_ANGLE)
            add(BOX)
            add(SQUARE)
            add(TRIANGLE_UP)
            add(TRIANGLE_VARIANT)
            add(TRIANGLE_DOWN)
            add(AMSSYMB_DIAMOND)
            add(DIAMOND_SUIT)
            add(LOZENGE)
            add(HEART_SUIT)
            add(BLACK_SQUARE)
            add(BLACK_TRIANGLE)
            add(BLACK_TRIANGLE_DOWN)
            add(BLACK_LOZENGE)
            add(BIG_STAR)
            add(SPADE_SUIT)
            add(CLUB_SUIT)
            add(FOR_ALL)
            add(EXISTS)
            add(NOT_EXISTS)
            add(INVERSE_F)
            add(MIRRORED_G)
            add(IMAGINARY)
            add(REAL)
            add(ALEPH)
            add(SCRIPT_CAPITAL_P)
            add(H_SLASH)
            add(H_BAR)
            add(DOTLESS_I)
            add(DOTLESS_J)
            add(BLACKBOARD_BOLD_K)
            add(SCRIPT_SMALL_L)
            add(CIRCLED_R)
            add(CIRCLED_S)
            add(O_CIRCLE)
            add(LOG_OF)
            add(BOT)
            add(TOP)
            add(PARTIAL)
            add(NABLA)
            add(ETH)
            add(REVERSED_OHM)
        }

        createCategory("Text") {
            add(ELLIPSIS)
            add(TEXT_TILDE_LOW)
            add(TEXT_ASCII_TILDE)
            add(TEXT_ASCII_CIRCUMFLEX)
            add(TEXT_ASCII_DIERESIS)
            add(TEXT_ASCII_ACUTE)
            add(TEXT_DOUBLE_ACUTE)
            add(TEXT_ASCII_GRAVE)
            add(TEXT_DOUBLE_GRAVE)
            add(TEXT_ASCII_BREVE)
            add(TEXT_ASCII_CARON)
            add(TEXT_LEFT_QUOTE)
            add(TEXT_RIGHT_QUOTE)
            add(TEXT_LEFT_DOUBLE_QUOTE)
            add(TEXT_RIGHT_DOUBLE_QUOTE)
            add(TEXT_QUOTE_STRAIGHT_BASE)
            add(TEXT_DOUBLE_QUOTE_STRAIGHT_BASE)
            add(TEXT_QUOTE_SINGLE)
            add(TEXT_DOUBLE_HYPHEN)
            add(TEXT_DOUBLE_HYPHEN_CHARACTER)
            add(TEXT_CENTERED_ASTERISK)
            add(TEXT_CENTERED_PERIOD)
            add(TEXT_UPSIDE_DOWN_QUESTION_MARK)
            add(TEXT_INTERROBANG)
            add(TEXT_UPSIDE_DOWN_INTERROBANG)
            add(TEXT_UPSIDE_DOWN_EXCLAMATION)
            add(TEXT_EN_DASH)
            add(TEXT_EM_DASH)
            add(TEXT_THREE_QUARTERS_EM_DASH)
            add(TEXT_VISIBLE_SPACE)
            add(UNDERSCORE)
            add(TEXT_CURRENCY)
            add(TEXT_CENT)
            add(TEXT_CENT_OLD_STYLE)
            add(TEXT_BAHT)
            add(TEXT_GUARANI)
            add(TEXT_WON)
            add(TEXT_DOLLAR)
            add(TEXT_DOLLAR_OLD_STYLE)
            add(TEXT_LIRA)
            add(TEXT_YEN)
            add(TEXT_DONG)
            add(TEXT_NAIRA)
            add(TEXT_COLON_MONETARY)
            add(TEXT_PESO)
            add(POUNDS)
            add(TEXT_FLORIN)
            add(EURO_AMOUNT, latex = "\\EUR{<caret>}", image = "\\EUR{\\ldots}")
            add(OFFICIAL_EURO)
            add(EURO_WIDE)
            add(EURO_NARROW)
            add(EURO)
            add(TEXT_EURO)
            add(CIRCLED_TEXT, latex = "\\textcircled{<caret>}", image = "\\textcircled{a}")
            add(TEXT_COPYRIGHT)
            add(TEXT_COPYLEFT)
            add(TEXT_REGISTERED)
            add(TEXT_TRADEMARK)
            add(TEXT_SERVICE_MARK)
            add(OLDSTYLEENUMS, latex = "\\oldstylenums{0}", image = "\\oldstylenums{0}", fileName = "text_oldstylenums_0.png", description = "old style enum 0")
            add(OLDSTYLEENUMS, latex = "\\oldstylenums{1}", image = "\\oldstylenums{1}", fileName = "text_oldstylenums_1.png", description = "old style enum 1")
            add(OLDSTYLEENUMS, latex = "\\oldstylenums{2}", image = "\\oldstylenums{2}", fileName = "text_oldstylenums_2.png", description = "old style enum 2")
            add(OLDSTYLEENUMS, latex = "\\oldstylenums{3}", image = "\\oldstylenums{3}", fileName = "text_oldstylenums_3.png", description = "old style enum 3")
            add(OLDSTYLEENUMS, latex = "\\oldstylenums{4}", image = "\\oldstylenums{4}", fileName = "text_oldstylenums_4.png", description = "old style enum 4")
            add(OLDSTYLEENUMS, latex = "\\oldstylenums{5}", image = "\\oldstylenums{5}", fileName = "text_oldstylenums_5.png", description = "old style enum 5")
            add(OLDSTYLEENUMS, latex = "\\oldstylenums{6}", image = "\\oldstylenums{6}", fileName = "text_oldstylenums_6.png", description = "old style enum 6")
            add(OLDSTYLEENUMS, latex = "\\oldstylenums{7}", image = "\\oldstylenums{7}", fileName = "text_oldstylenums_7.png", description = "old style enum 7")
            add(OLDSTYLEENUMS, latex = "\\oldstylenums{8}", image = "\\oldstylenums{8}", fileName = "text_oldstylenums_8.png", description = "old style enum 8")
            add(OLDSTYLEENUMS, latex = "\\oldstylenums{9}", image = "\\oldstylenums{9}", fileName = "text_oldstylenums_9.png", description = "old style enum 9")
            add(TEXT_ONE_HALF)
            add(TEXT_ONE_QUARTER)
            add(TEXT_THREE_QUARTERS)
            add(TEXT_ONE_SUPERIOR)
            add(TEXT_TWO_SUPERIOR)
            add(TEXT_THREE_SUPERIOR)
            add(TEXT_NUMERO)
            add(TEXT_PER_MILLE)
            add(TEXT_PER_TEN_THOUSAND)
            add(TEXT_DISCOUNT)
            add(TEXT_BLANK)
            add(TEXT_RECIPE)
            add(TEXT_ESTIMATED)
            add(TEXT_REFERENCE_MARK)
            add(TEXT_MUSICAL_QUARTER_NOTE)
            add(TEXT_DAGGER)
            add(TEXT_DOUBLE_DAGGER)
            add(SECTION_SIGN)
            add(DOLLAR_SIGN)
            add(TEXT_PILCROW)
            add(CUT_RIGHT_ON_LINE)
            add(CUT_LINE)
            add(CUT_LEFT_ON_LINE)
            add(RIGHT_SCISSORS)
            add(CUT_LINE_MIDDLE)
            add(LEFT_SCISSORS)
            add(CHECKED_BOX)
            add(EMPTY_BOX)
            add(CROSSED_BOX)
            add(TEXT_BIG_CIRCLE)
            add(TEXT_OPEN_BULLET)
            add(TEXT_BULLET)
            add(CHECKMARK)
            add(MALTESE)
            add(TEXT_ORDINAL_INDICATOR_FEMININE)
            add(TEXT_ORDINAL_INDICATOR_MASCULINE)
            add(TEXT_BORN)
            add(TEXT_DIVORCED)
            add(TEXT_DIED)
            add(TEXT_MARRIED)
            add(TEXT_LEAF)
            add(TEXT_DEGREE)
            add(TEXT_OHM)
            add(TEXT_UPSIDE_DOWN_OHM)
            add(TEXT_MU)
            add(TEXT_BACKSLASH)
            add(TEXT_BAR)
            add(TEXT_BROKEN_BAR)
            add(TEXT_DOUBLE_BAR)
            add(TEXT_FRACTION_SOLIDUS)
            add(TEXT_LEFT_ANGLE_BRACKET)
            add(TEXT_RIGHT_ANGLE_BRACKET)
            add(TEXT_LEFT_DOUBLE_BRACKET)
            add(TEXT_RIGHT_DOUBLE_BRACKET)
            add(TEXT_LEFT_QUILL)
            add(TEXT_RIGHT_QUILL)
            add(TEXT_LEFT_NOT)
            add(TEXT_MINUS)
            add(TEXT_PLUS_MINUS)
            add(TEXT_LESS_THAN)
            add(TEXT_GREATER_THAN)
            add(TEXT_SURD)
            add(TEXT_TIMES)
            add(TEXT_DIVIDE)
        }

        createCategory("Misc. symbols") {
            // STMARYRD
            add(Y_UP)
            add(Y_RIGHT)
            add(Y_DOWN)
            add(Y_LEFT)
            add(BIN_AMPERSAND)
            add(BIN_REVERSED_AMPERSAND)
            add(O_BAR)
            add(BOX_BAR)
            add(BOX_CIRCLE)
            add(BOX_BOX)
            add(BOXED_DOT_STMARYRD)
            add(BOX_ASTERISK)
            add(BOX_BSLASH)
            add(BOX_EMPTY)
            add(BOX_SLASH)
            add(BIG_BOX)
            add(CURLY_VEE_VARIANT)
            add(BIG_CURLY_VEE)
            add(CURLY_WEDGE_VARIANT)
            add(BIG_CURLY_WEDGE_VARIANT)
            add(CURLY_VEE_DOWN_ARROW)
            add(CURLY_VEE_UP_ARROW)
            add(CURLY_WEDGE_DOWN_ARROW)
            add(CURLY_WEDGE_UP_ARROW)
            add(BLACKBOARD_BACKSLASH)
            add(BLACKBOARD_SLASH)
            add(FAT_BACKSLASH)
            add(FAT_SLASH)
            add(FAT_SEMICOLON)
            add(BIG_PARALLEL)
            add(INTERLEAVE)
            add(BIG_INTERLEAVE)
            add(TALL_OBLONG)
            add(LEFT_SLICE)
            add(RIGHT_SLICE)
            add(MERGE)
            add(MOO)
            add(CAP_PLUS)
            add(BIG_CAP_PLUS)
            add(O_HORIZONTAL_DASH)
            add(OBLONG)
            add(O_WITH_VERTICAL_LINE)
            add(O_WITH_BACKSLASH)
            add(O_WITH_GREATER_THAN)
            add(O_WITH_LESS_THAN)
            add(O_WITH_VEE)
            add(O_WITH_WEDGE)
            add(BIG_CIRCLE_VARIANT)
            add(O_WITH_STAR_VARIANT)
            add(O_WITH_VERTICAL_BAR_VARIANT)
            add(O_WITH_BACKSLASH_VARIANT)
            add(O_WITH_CIRCLE_VARIANT)
            add(O_WITH_DOT_VARIANT)
            add(O_WITH_GREATER_THAN_VARIANT)
            add(O_WITH_LESS_THAN_VARIANT)
            add(O_WITH_MINUS_VARIANT)
            add(O_WITH_PLUS_VARIANT)
            add(O_WITH_SLASH_VARIANT)
            add(O_WITH_TIMES_VARIANT)
            add(O_WITH_VEE_VARIANT)
            add(O_WITH_WEDGE_VARIANT)
            add(TIMES_VARIANT)
            add(BIG_SQUARE_CAP)

            // wasysym
            // "The Windings of LaTeX" -Sten 2021
            add(FEMALE)
            add(MALE)
            add(CURRENCY)
            add(PHONE)
            add(RECORDER)
            add(CLOCK)
            add(LIGHTNING_WASYSYM)
            add(POINTER)
            add(RIGHT_TRIANGLE)
            add(LEFT_TRIANGLE)
            add(UP_TRIANGLE)
            add(DOWN_TRIANGLE)
            add(AC)
            add(HF)
            add(VHF)
            add(EMPTY_BOX)
            add(PENTAGON)
            add(HEXAGON_LYING)
            add(HEXAGON_STANDING)
            add(OCTAGON)
            add(SIX_LEGGED_STAR_LYING)
            add(SIX_LEGGED_STAR_STANDING)
            add(STAR_OF_DAVID)
            add(DIAMETER)
            add(DIAMETER_MIRRORED)
            add(MEASURED_ANGLE_WASYSYM)
            add(LOZENGE_WASYSYM)
            add(MALTESE_CROSS)
            add(SMILEY)
            add(FROWNIE)
            add(BLACK_SMILEY)
            add(SUN)
            add(CHECKED)
            add(BELL)
            add(TEXT_EIGTH_NOTE)
            add(TEXT_QUARTER_NOTE)
            add(TEXT_HALF_NOTE)
            add(FULLNOTE)
            add(TWONOTES)
            add(BROKENVERT)
            add(ATARIBOX)
            add(WASYTHEREFORE)
            add(WHITE_CIRCLE)
            add(BLACK_CIRCLE)
            add(WHITE_LEFT_CIRCLE)
            add(BLACK_LEFT_CIRCLE)
            add(WHITE_RIGHT_CIRCLE)
            add(WHITE_LEFT_CIRCLE)
            add(BLACK_LEFT_CIRCLE_2)
            add(BLACK_RIGHT_CIRCLE_2)
            add(VERNAL)
            add(ASCENDING_NODE)
            add(DESCENDING_NODE)
            add(FULL_MOON)
            add(NEW_MOON)
            add(LEFT_MOON)
            add(RIGHT_MOON)
            add(ASTROSUN)
            add(MERCURY)
            add(VENUS)
            add(EARTH)
            add(MARS)
            add(JUPITER)
            add(SATURN)
            add(URANUS)
            add(NEPTUNE)
            add(PLUTO)
            add(CAPRICORNUS)
            add(AQUARIUS)
            add(PISCES)
            add(ARIES)
            add(TAURUS)
            add(GEMINI)
            add(CANCER)
            add(LEO)
            add(VIRGO)
            add(LIBRA)
            add(SCORPIO)
            add(SAGITTARIUS)
            add(CONJUNCTION)
            add(OPPOSITION)
            add(APL_STAR)
            add(APL_LOG)
            add(APL_BOX)
            add(APL_UP)
            add(APL_DOWN)
            add(APL_INPUT)
            add(APL_COMMENT)
            add(APL_INV)
            add(APL_UP_ARROW_BOX)
            add(APL_RIGHT_ARROW_BOX)
            add(APL_DOWN_ARROW_BOX)
            add(APL_LEFT_ARROW_BOX)
            add(APL_MINUS)
            add(APL_NOT, latex = "\\APLnot{}", image = "\\APLnot{}")
            add(APL_CIRCLE, latex = "\\APLcirc{}", image = "\\APLcirc{}")
            add(APL_VERTICAL_LINE, latex = "\\APLvert{}", image = "\\APLvert{}")
            add(NOT_BACKSLASH)
            add(NOT_SLASH)
            add(TEXT_BOWTIE)
            add(TEXT_ANTI_CLOCKWISE_ROUND_ARROW)
            add(TEXT_CLOCKWISE_ROUND_ARROW)
            add(PHOTON)
            add(GLUON)
            add(CENT)
            add(PERMIL)
            add(TEXT_UPSIDE_DOWN_OMEGA)
            add(THORN)
            add(CAPITAL_THORN)
            add(OPENO)
            add(INVE)
        }
    }

    /**
     * The list of all registered categories.
     * Also contains the ALL category.
     */
    val categoryList: List<SymbolCategory> = listOf(SymbolCategory.ALL) + categories.map { (category, _) -> category }

    /**
     * Flat map of all registered symbols, in order.
     */
    val symbolList: List<SymbolUiEntry> = categories.flatMap { it.value }

    /**
     * Get the operators that are in the given category.
     * The category [SymbolCategory.ALL] returns all available symbols.
     */
    operator fun get(category: SymbolCategory): List<SymbolUiEntry> = if (category == SymbolCategory.ALL) {
        symbolList
    }
    else categories[category] ?: emptyList()

    /**
     * Adds a symbol entry for a Left/Right pair that inserts \leftX ... \rightX.
     *
     * @param requireLeftRight
     *          True if the commands should be preceded with \left and \right. False if the commands alone suffice.
     */
    fun MutableList<SymbolUiEntry>.addLeftRight(
        left: LatexCommand, right: LatexCommand, description: String, fileName: String, requireLeftRight: Boolean = true
    ) {
        val leftCmd = if (requireLeftRight) "\\left" else ""
        val rightCmd = if (requireLeftRight) "\\right" else ""
        add(
            DryUiEntry(
                description = description,
                generatedLatex = "$leftCmd${left.commandWithSlash} <caret> $rightCmd${right.commandWithSlash}",
                fileName = fileName,
                imageLatex = "$leftCmd${left.commandWithSlash}...$rightCmd${right.commandWithSlash}",
                isMathSymbol = true,
                dependency = left.dependency
            )
        )
    }

    /**
     * Adds a UI entry for the given command to the entry list.
     * For the parameters see [CommandUiEntry].
     */
    private fun MutableList<SymbolUiEntry>.add(
        command: LatexCommand,
        latex: String? = null,
        fileName: String? = null,
        description: String? = null,
        image: String? = null
    ) = add(command.toEntry(latex, fileName, description, image))

    /**
     * Turns the command into a ui entry.
     */
    private fun LatexCommand.toEntry(
        latex: String? = null,
        fileName: String? = null,
        description: String? = null,
        image: String? = null
    ) = CommandUiEntry(this, latex, fileName, description, image)

    /**
     * Adds a new category to the map and initializes the symbols.
     */
    private fun MutableMap<SymbolCategory, List<SymbolUiEntry>>.createCategory(
        name: String,
        description: String = name,
        symbolInitializer: MutableList<SymbolUiEntry>.() -> Unit
    ) {
        val category = SymbolCategory(name, description)
        this[category] = ArrayList<SymbolUiEntry>().apply {
            symbolInitializer()
        }
    }
}